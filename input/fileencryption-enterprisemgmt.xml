<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="..\transforms\pp2html.xsl"?>

<?xml-model href="https://raw.githubusercontent.com/commoncriteria/transforms/master/schemas/CCProtectionProfile.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?>

<PP xmlns="https://niap-ccevs.org/cc/v1" xmlns:h="http://www.w3.org/1999/xhtml" name="file encryption">  
  <PPReference title="PP Reference" id="ID003">
    <ReferenceTable>
      <PPTitle>Application Software Extended Package for File Encryption Enterprise Management </PPTitle>
      <PPVersion>1.0-DRAFT</PPVersion>
      <PPAuthor>National Information Assurance Partnership</PPAuthor>
      <PPPubDate>2018-06-15</PPPubDate>
      <PPCertificationID>unassigned</PPCertificationID>
      <CCVersion>Version 1.0</CCVersion>
      <Keywords>file encryption; encryption</Keywords>
      <entry>
        <name>Registration</name>
        <description>National Information Assurance Partnership</description>
      </entry>
    </ReferenceTable>
  </PPReference>
  <RevisionHistory>
    <entry>
      <version>1.0 DRAFT</version>
      <date>2018-06-15</date>
      <subject>Initial Release</subject>
    </entry>
  </RevisionHistory>
  <chapter title="Introduction" id="int">
    <section title="Overview" id="ppoverview"> This Extended Package (EP) describes security
      requirements for an encryption management product that is configurable for the data it encrypts and is
      intended to provide a minimal, baseline set of requirements that are targeted at mitigating
      well defined and described threats. However, this EP is not complete in itself, but rather
      extends the Protection Profile for Application Software (<cite linkend="bibAppPP"/>). This
      introduction will describe the features of a compliant Target of Evaluation, and will also
      discuss how this EP is to be used in conjunction with the <cite linkend="bibAppPP"/>. </section>
    <section id="glossary" title="Terms">The following sections provide both Common Criteria and
      technology terms used in this Extended Package. 
        <glossary>
          <entry>
            <term><abbr title="Common Criteria">CC</abbr></term>
            <description>Common Criteria for Information Technology Security
              Evaluation.</description>
          </entry>
          <entry>
            <term><abbr title="Extended Package">EP</abbr></term>
            <description>An implementation-independent set of security requirements for a category
              of products, which extends those in a Protection Profile.</description>
          </entry>
          <entry>
            <term><abbr title="Protection Profile">PP</abbr></term>
            <description>An implementation-independent set of security requirements for a category
              of products.</description>
          </entry>
          <entry>
            <term><abbr title="Security Target">ST</abbr></term>
            <description>A set of implementation-dependent security requirements for a specific
              product.</description>
          </entry>
          <entry>
            <term><abbr title="Target of Evaluation">TOE</abbr></term>
            <description>The product under evaluation. In this case, application software and its
              supporting documentation.</description>
          </entry>
          <entry>
            <term><abbr title="TOE Security Functionality">TSF</abbr></term>
            <description>The security functionality of the product under evaluation.</description>
          </entry>
          <entry>
            <term><abbr title="TOE Security Policy">TSP</abbr></term>
            <description>The set of rules that regulate how assets are managed, protected and
              distributed within a TOE.</description>
          </entry>
          <entry>
            <term><abbr title="TOE Summary Specification">TSS</abbr></term>
            <description>A description of how a <abbr linkend="TOE"/> satisfies the SFRs in a <abbr
                linkend="ST"/>. </description>
          </entry>
          <entry>
            <term><abbr title="Security Functional Requirement">SFR</abbr></term>
            <description>A requirement for security enforcement by the <abbr linkend="TOE"/>.
            </description>
          </entry>
          <entry>
            <term><abbr title="Security Assurance Requirement">SAR</abbr></term>
            <description>A requirement to assure the security of the <abbr linkend="TOE"/>.
            </description>
          </entry>
      
     
         
          <entry>
            <term>Authorization factor (AF) </term>
            <description> A value that a user knows, has, or is (e.g. password, token, etc.) submitted 
              to the TOE to establish that the user is in the community authorized to use the hard disk.
              This value is used in the derivation or decryption of the BEV and eventual decryption of the DEK.
              Note that these values may or may not be used to establish the particular identity of the user.  </description>
          </entry>
          <entry>
            <term>Assurance</term>
            <description> Grounds for confidence that a TOE meets the SFRs [CC1]. </description>
          </entry>
          <entry>
            <term>Key Sanitization </term>
            <description> A method of sanitizing encrypted data by securely overwriting the key that was encrypting the data. 
            </description>
          </entry>
          <entry>
            <term>File/Set of files </term>
            <description> The user data that is selected to be encrypted, which can include
              individual file encryption (with a FEK per file) or a set of files encrypted with a
              single FEK. </description>
          </entry>
          <entry>
            <term>File Authentication Key (FAK) </term>
            <description> The secret value used as input when a keyed hash function is used to
              perform data authentication. </description>
          </entry>
          <entry>
            <term>File Encryption Key (FEK) </term>
            <description> The key that is used by the encryption algorithm to encrypt the selected
              user data on the host machine. </description>
          </entry>
          <entry>
            <term>Host Platform</term>
            <description>The local hardware and software the TOE is running on, this does not include 
              any peripheral devices (e.g. USB devices) that may be connected to the local hardware and software. </description>
          </entry>
          <entry>
            <term>Key Chaining</term>
            <description>The method of using multiple layers of encryption keys to protect data. 
              A top layer key encrypts a lower layer key which encrypts the data; this method can have any number of layers.</description>
          </entry>
          <entry>
            <term>Key Encryption Key (KEK) </term>
            <description> The key that is used to encrypt the FEK or another KEK. </description>
          </entry>
          <entry>
            <term>Keying material </term>
            <description> Key material is commonly known as critical security parameter (CSP) data, and also includes authorization data, nonces, and metadata. </description>
          </entry>
            <entry>
              <term>Key Release Key </term>
              <description> A key used to release another key from storage, it is not used for the direct derivation or decryption of another key. </description>
            </entry>
            <entry>
            <term>Noise Source </term>
            <description> The component of an RBG that contains the non-deterministic,
              entropy-producing activity. </description>
          </entry>
            <entry>
              <term>Non-Volatile Memory</term>
              <description> A type of computer memory that will retain information without power.  </description>
            </entry>
          <entry>
            <term>Operational Environment </term>
            <description> Hardware and software that are outside the TOE boundary that support the
              TOE functionality and security policy, including the host platform, its firmware, and
              the operating system. </description>
          </entry>
          <entry>
            <term>Powered-Off State </term>
            <description> The device has been shut down. </description>
          </entry>
          <entry>
            <term>Protected Data</term>
            <description> This refers to all files designated by the user for encryption. </description>
          </entry>
          <entry>
            <term>Submask </term>
            <description> A submask is a bit string that can be generated and stored in a number of ways. </description>
          </entry>
          <entry>
            <term>Target of Evaluation </term>
            <description> A set of software, firmware and/or hardware possibly accompanied by guidance. [CC1]</description>
          </entry>
        </glossary>
      
    </section>
    <section title="Compliant Targets of Evaluation" id="complianttargets">     
    The target of evaluation for this Module is the Enterprise Management (EM) function of
    an FE solution. The EM function is designed to augment the claims made in the File Encryption Module;
    therefore, this functionality is intended to be evaluated in conjunction with a TOE that also
    claims conformance to that module at minimum.
    The following sections provide an overview of the security functionality of this PP-module.</section>
    
    <section title="Use Cases" id="usecases">
      <subsection title="Usage and Major Security Features of the Target of Evaluation (TOE)"
        id="usagetoe"> 
          The use case for a product conforming to the FE module is to protect data at rest on a device
          that is lost or stolen while powered off without any prior access by an adversary. The use case
          where an adversary obtains a device that is in a powered state and is able to make modifications
          to the environment or the TOE itself (e.g., evil maid attacks) is not addressed by that module. <h:br/>
        
          While that use case is still true for the Enterprise Management Module, this PP-module also
          expands the use case to include protecting the communications between the Enterprise
          Management Server and the client device through the use of a trusted channel. It also expands
          the use case to include the optional abilities of the EM to interact with clients (with proper
          authorization) to direct it to perform sanitation of keys and material on the device or to issue a
          recovery credential to reset the authentication factor if it has been lost.
      </subsection>
      
      <subsection title="The TOE and Its Supporting Environment" id="supenv"> The environment in which the EM functions is expected to exist is on a back end server, not
        on the system that contains the EE. It is expected to have secure access to a certified LDAP
        (e.g. Active Directory) and access to a certified means of storing key material when not in use.
        The EM shall not have the ability to access the secured stored key material without verification
        of access authority by the LDAP.
        The Operating System environment may make a full range of services available to the
        Enterprise Management Module, including hardware drivers, cryptographic libraries, and
        perhaps other services external to the TOE.
        The EM TOE may include or leverage features and functions within the operational
        environment.  </subsection>
    </section>
    
  </chapter>
  <chapter title="Conformance Claims" id="conf">
    <cclaims>
      <cclaim id="Conformance Statement">
        <description> 
          This lanaguage will be updated before release. 
          
          The Protection Profile for Application Software (App PP) defines the baseline
          Security Functional Requirements (SFRs) and Security Assurance Requirements (SARs) for
          application software products. This EP serves to extend the App PP baseline with
          additional SFRs and associated Assurance Activities specific to an email client. Assurance
          Activities are the actions that the evaluator performs in order to determine an email
          client’s compliance to the SFRs.<h:br/> This EP conforms to Common Criteria <cite
            linkend="bibCC"/> for Information Technology Security Evaluation, Version 3.1, Revision
          4. It is CC Part 2 extended and CC Part 3 conformant. In order to be conformant to this
          EP, the ST must include all components in this EP and the associated App PP that are:
              <h:ul><h:li>unconditional (which are always required)</h:li>
            <h:li>selection-based (which are required when certain selections are chosen in the
              unconditional requirements)</h:li>
          </h:ul> and may include optional and/or objective components that are desirable but not
          required for conformance. </description>
      </cclaim>
    </cclaims>
    <section title="How to Use This Extended Package" id="howto"> 
      This lanaguage will be updated before release.
      
      As an EP of the <cite
        linkend="bibAppPP"/>, it is expected that the content of both this EP and the <cite
        linkend="bibAppPP"/> be appropriately combined in the context of each product-specific
      Security Target. This EP has been specifically defined such that there should be no difficulty
      or ambiguity in so doing. An ST must identify the applicable versions of the <cite
        linkend="bibAppPP"/> (see http://www.niap-ccevs.org/pp/ for the current version) and this EP
      in its conformance claims. When requirements are referenced from the <cite linkend="bibAppPP"
      />, a short notation is included. </section>
  </chapter>
  
  <chapter title="Security Problem Description" id="spd"> The primary asset that is being protected
    is the sensitive user data stored on a system. The threat model thus focuses on a host machine
    that has been compromised by an unauthorized user. This section addresses threats to the TOE
    only. 
    
    <section title="Threats" id="threats"> This section provides a narrative that describes how the requirements mitigate the mapped threats.
      A requirement may mitigate aspects of multiple threats. A requirement may only mitigate a threat in a limited way. Some requirements are
      optional, either because the TSF fully mitigates the threat without the additional requirement(s) being claimed or because the TSF relies
      on its Operational Environment to provide the functionality that is described by the optional requirement(s). <h:br/>
      
      A threat consists of a threat agent, an asset and an adverse action of that threat agent on that asset. 
      The threat agents are the entities that put the assets at risk if an adversary obtains a lost or stolen storage device.
      Threats drive the functional requirements for the target of evaluation (TOE). <h:br/>
      
      For instance, one threat below is T.UNAUTHORIZED_DATA_ACCESS/SERVER. The threat agent is a malicious actor that is attempting
      to access the Management Server component of the TOE (i.e. the component defined by this Module). The asset is the data on
      the Management Server, while the adverse action is to attempt to obtain data from the Management Server which could lead to the
      compromise of one or more drives that are managed by the TSF. This threat drives the functional requirements for the encrypted
      storage device (TOE) to authorize who can use the TOE to access the data used to interact with one or more encrypted drives.
      Since possession of the KEK, FEK(s), intermediate keys, authorization factors, submasks, and random numbers or any other values
      that contribute to the creation of keys or authorization factors could allow an unauthorized user to defeat the encryption,
      this SPD considers keying material equivalent to the data in importance and they appear among the other assets addressed below. <h:br/>
      
      It is important to reemphasize at this point that this Module does not expect the product (TOE) to defend against a malicious
      agent that has unrestricted logical access to the system on which the Management Server resides. Security of the TOE, which includes
      the files(s) to be protected as well as the capability for the drive(s) to be managed, requires appropriate physical and logical
      protections as part of a defense-in-depth strategy.
      
      <threats>
        <threat id="T.UNAUTHORIZED_DATA_ACCESS">
          <description>
            <h:b>Unauthorized Data Access:</h:b> The threat of an attacker
            accessing the data on the encrypted file(s) by getting access to a protected file(s), attaching it to a host system controlled
            by the attacker and using the key material, or optionally a recovery credential to access the data. The file encryption module addresses
            the primary threat of unauthorized disclosure of recovery material protected by the drive(s); this addresses the attribution of the key material to the drive. </description>
          <objective-refer ref="O.KEY_MATERIAL_PROTECTION">
            <rationale>The threat T.UNAUTHORIZED_DATA_ACCESS is countered by O.KEY_MATERIAL_PROTECTION as this
              provides for encyption of keys that protect data.</rationale>
          </objective-refer>
        </threat>
        <threat id="T.UNAUTHORIZED_DATA_ACCESS_SERVER">
          <description>
            <h:b>Unauthorized Data Access/Server:</h:b> The threat of an attacker accessing the Management Server. 
            The File Encryption Module addresses the primary threat of unauthorized disclosure of recovery material protected by the drive(s);
            this adds the Management Server to the scope of the threat. </description>
          <objective-refer ref="O.RECOVERY_PROTECTION">
            <rationale>The threat T.UNAUTHORIZED_DATA_ACCESS_SERVER is countered by O.RECOVERY_PROTECTION as this
              provides for protection of recovery information.</rationale>
          </objective-refer>
        </threat>
        <threat id="T.KEYING_MATERIAL_COMPROMISE_SERVER">
          <description>
            <h:b>Keying Material Compromise/Server:</h:b> Possession of any of the keys, authorization factors, submasks, and random numbers
            or any other values that contribute to the creation of keys or authorization factors could allow an unauthorized user to defeat
            the encryption. This cPP-Module considers possession of key material of equal importance to the data itself. Threat agents may
            look for key material in unencrypted storage on the Management Server and in external databases in the operating environment (OE), e.g. SQL database. </description>
          <objective-refer ref="O.KEY_MATERIAL_SERVER">
            <rationale>The threat T.KEYING_MATERIAL_COMPROMISE_SERVER is countered by O.KEY_MATERIAL_SERVER as this
              provides for properly protection of key material on the server.</rationale>
          </objective-refer>
        </threat>
        <threat id="T.MAN_IN_THE_MIDDLE">
          <description>
            <h:b>Man in the Middle:</h:b> The Module addresses the threat of an attacker listening on the 
            communication between the Management Server and the Client(s) to obtain the user’s credential, keys, or recovery material.
          </description>
          <objective-refer ref="O.SECURE_CHANNEL">
            <rationale>The threat T.MAN_IN_THE_MIDDLE is countered by O.SECURE_CHANNEL as this
              protects against man in the middles attacks.</rationale>
            </objective-refer>
        </threat>
        <threat id="T.UNAUTHORIZED_ADMINISTRATOR_ACCESS">
          <description>
            <h:b>Unauthorized Administrator Access:</h:b> The Module addresses the threat of an attacker masquerading as an administrator to the Management Server.
          </description>
          <objective-refer ref="O.VERIFIED_ADMIN">
            <rationale>The threat T.UNAUTHORIZED_ADMINISTRATOR_ACCESS is countered by O.VERIFIED_ADMIN as this
              provides methods to verify the administrator.</rationale>
          </objective-refer>
        </threat>
        <threat id="T.UNTRUSTED_COMMUNICATION_CHANNELS">
          <description>
            <h:b>Untrusted Communication Channels:</h:b> The Module address the threat of an attacker targeting the Management Server
            using insecure tunneling protocols or the presence of an unencrypted path to disclose keys, key material, or recovery
            material transferred between the endpoint and the Management Server.
          </description>
          <objective-refer ref="O.TRUSTED_COMMUNICATION_CHANNEL">
            <rationale>The threat T.UNTRUSTED_COMMUNICATION_CHANNELS is countered by O.TRUSTED_COMMUNICATION_CHANNE as this
              provides a trusted channel for server endpoint communications.</rationale>
          </objective-refer>
        </threat>
      </threats>
    </section>
      <section title="Assumptions" id="assumptions">
        <assumptions>
         
          <assumption id="A.SECURED_CONFIGURATION">
            <description>The Management Server and the remote endpoints are assumed to be installed and configured in accordance with their evaluated configuration. </description>
            <objective-refer ref="OE.SECURED_CONFIGURATION">
              <rationale>The operational environment objective OE.SECURED_CONFIGURATION is realized through A.SECURED_CONFIGURATION.</rationale>
              </objective-refer>
          </assumption>
          <assumption id="A.SECURED_ENVIRONMENT">
            <description>Any environmental components required to support the functionality of the Management Server (e.g. underlying operating system, firewall, database) are assumed to be installed and configured in accordance with its evaluated configuration.</description>
            <objective-refer ref="OE.SECURED_ENVIRONMENT">
              <rationale>The operational environment objective OE.SECURED_ENVIRONMENT is realized through A.SECURED_ENVIRONMENT.</rationale>
            </objective-refer>
          </assumption>
          <assumption id="A.PHYSICAL_SERVER">
            <description>This assumption extends the A.PHYSICAL assumption in the Base-PP to assume that the platform on which the Management Server resides is assumed to be physically protected in its Operational Environment and not subject to physical attacks that compromise the security and/or interfere with the platform’s correct operation.</description>
            <objective-refer ref="OE.PHYSICAL_SERVER">
              <rationale>The operational environment objective OE.PHYSICAL_SERVER is realized through A.PHYSICAL_SERVER.</rationale>
            </objective-refer>
          </assumption>
          <assumption id="A.ENVIRONMENTAL_STORAGE">
            <description>Any key storage mechanism provided by the Operational Environment is able to provide the same level of security as a TOE-internal storage mechanism that is conformant to this PP-Configuration.</description>
            <objective-refer ref="OE.ENVIRONMENTAL_STORAGE">
              <rationale>The operational environment objective OE.ENVIRONMENTAL_STORAGE is realized through A.ENVIRONMENTAL_STORAGE.</rationale>
            </objective-refer>
          </assumption>
        </assumptions>
      </section>
  
  </chapter>
  <chapter title="Security Objectives" id="obj">
    <section title="Security Objectives for the TOE" id="objtoe"> The Security Problem described in
      Section 2 will be addressed by a combination of cryptographic capabilities. Compliant TOEs
      will provide security functionality that addresses threats to the TOE and enforces policies
      that are imposed by law and regulation. The following subsections provide a description of the
      security objectives required to meet the threats/policies previously discussed. The
      description of these security objectives are in addition to that described in the <cite
        linkend="bibAppPP"/>.<h:br/> Note: in each subsection below particular security objectives are
      identified (highlighted by O.) and they are matched with the associated security functional
      requirements (SFRs) that provide the mechanisms to satisfy the objectives.<h:br/> The Security
      Objectives are the requirements for the Target of Evaluation (TOE) and for the Operational
      Environment derived from the threats in Section 2. 
      <SOs>
        <SO id="O.KEY_MATERIAL_PROTECTION">
          <description>
            <h:b>Protection of Key Material:</h:b> FPT_KYP_EXT.3 requires that the key material, and optionally recovery credentials
            be uniquely associated with the encrypted drive at a minimum. Additionally, key material may also be associated with a
            specific system or user to prevent an attacker from accessing the data on the encrypted drive by inserting the drive
            in a host with weaker security. A product which distributes keys to meet the requirements of FPT_KYP_EXT.3 will
            additionally prevent an attacker from gaining access to the encrypted data. </description>
          <component-refer ref="FPT_KYP_EXT.3"/>
        </SO>
        <SO id="O.RECOVERY_PROTECTION">
          <description>
            <h:b>Recovery Protection:</h:b> FIA_UAU.1 requires the administrator to be authenticated prior to allowing the administrator
            to manage the product via the remote console. FIA_UID.1 requires the admin to be identified prior to allowing the administrator to manage the
            product via the remote console. FMT_MTD.1 requires that actions which result in changes to key material, user authentication policy and recovery
            are constrained to administrators and specific times. FMT_SMR.2 requires users be assigned roles. FCS_VAL_EXT.2, if selected, requires user
            authentication to be validated by the Operational Environment or the TOE prior to releasing the BEV. <h:br/>
            
            The Optional capability which may be provided by the TSF would include encryption of data stored on the server, as validated by 
            FCS_COP.1(f)/Server; and certificate-based authentication, validated by FIA_X509_EXT.2/Server and validation, as validated by FIA_X509_EXT.1/Server.
            
          </description>
          <component-refer ref="FIA_UAU.1"/>
          <component-refer ref="FIA_UID.1"/>
          <component-refer ref="FMT_MTD.1"/>
          <component-refer ref="FMT_SMR.2"/>
          <component-refer ref="FCS_COP.1(f)/Server"/>
          <component-refer ref="FCS_VAL_EXT.2"/>
          <component-refer ref="FIA_X509_EXT.1/Server"/>
          <component-refer ref="FIA_X509_EXT.2/Server"/>
        </SO>
        
        <SO id="O.KEY_MATERIAL_SERVER">
          <description>
            <h:b>Key Material Server:</h:b>
            The keying material that threat agents may attempt to compromise are generated by the TOE as specified by FCS_CKM.1(a)/Server 
            (or by the Operational Environment if this optional SFR is not claimed). One or more submasks [FCS_AFA_EXT.1] may be chained 
            [FCS_KYC_EXT.1/Server] to produce the FEK or a KEK. The server key chain can be maintained by several methods, including: <h:br/>
            
            •	Key generation [FCS_CKM.1(a)/Server]
            •	Key establishment [FCS_CKM.2/Server]
            •	Key distribution [FCS_CKM.2]
            •	Key derivation [FCS_KDF_EXT.1/Server]
            •	Key attribution [FPT_KYP_EXT.3]
            •	Key combining [FCS_COP.1(b)/Server]
            •	Key derivation [FCS_COP.1(c)/Server]
            •	Key wrapping [FCS_COP.1(d)/Server]
            •	Key transport [FCS_COP.1(e)/Server]
            •	Key combining [FCS_SMC_EXT.1/Server]
            •	Key storage [FPT_KYP_EXT.1, FPT_KYP_EXT.2]
            •	Key encryption [FCS_COP.1(g)]
            •	Salt, Nonce, and IV generation [FCS_SNI_EXT.1]
            
            Key chains may be maintained using asymmetric [FCS_CKM.1(a)/Server] and/or symmetric [FCS_CKM.1(b)/Server]. <h:br/>
            
            These requirements ensure the BEV is properly generated and protected. If selected, FMT_MOF.1/Server ensures that
            only administrators can select the encryption algorithms and key sizes. Only administrators can perform management
            functions on the Enterprise Management Server as defined in FMT_SMF.1/Server. <h:br/>
            
            FCS_KYC_EXT.1/Server extends the requirements of File Encryption Module key chaining to key chains generated or maintained by the Server. <h:br/>
            
            FPT_ITT.1 ensures that keys and key material transported between the EM and the endpoint are protected from disclosure, modification, deletion, substitution, reordering or insertion. <h:br/>
            
            FPT_KYP_EXT.1 ensures unwrapped key material is not stored in non-volatile memory minimizing the exposure of plaintext keys and key material.
            
            The following optional components ensure that key material is not exposed through the communication channel between an Enterprise Server and the endpoint,
            if remote management is supported by the TSF. The requirements for establishing keys are validated by FCS_CKM.2/Server which relies on one or more of the
            following SFR’s to implement secure communications: <h:br/>
            
            •	FCS_HTTPS_EXT.1, 
            •	FCS_IPSEC_EXT.1, 
            •	FCS_SSHS_EXT.1, 
            •	FCS_SSHC_EXT.1, 
            •	FCS_TLSC_EXT.1 (and optionally FCS_TLSC_EXT.3 depending on the claimed ciphersuites), and 
            •	FCS_TLSS_EXT.1 (and optionally FCS_TLSS_EXT.3 depending on the claimed ciphersuites).
            
            The various iterations of FCS_COP.1/Server as well as FCS_RBG_EXT.1/Server all validate that the cryptography used to initiate and protect
            the communication channel protocols between the Enterprise Server and the AA, if remote management is supported by the TSF. If implemented
            on the server, FCS_CKM.4(a)/Server ensures proper destruction of keys and key material on the server when no longer needed.
            
            In order to ensure that a key is only released to the appropriate endpoint, FCS_KYP_EXT.3 ensures that there is attribution of the endpoint
            or encrypted file(s) and a key. The optional Server requirement FCS_CKM.2 ensures that if a key is communicated between the server and the
            endpoint, keys distributed by the server are given to the correct endpoint for the purpose of delivering a key.
            
          </description>
          <component-refer ref="FCS_AFA_EXT.1"/>
          <component-refer ref="FCS_KYC_EXT.1/Server"/>
          <component-refer ref="FPT_KYP_EXT.1"/>
          <component-refer ref="FPT_KYP_EXT.2"/>
          <component-refer ref="FPT_KYP_EXT.3"/>
          <component-refer ref="FCS_SMC_EXT.1/Server"/>
          <component-refer ref="FMT_SMF.1/Server"/>
          <component-refer ref="FPT_ITT.1"/>
          <component-refer ref="FCS_CKM.1(a)/Server"/>
          <component-refer ref="FCS_VAL_EXT.2"/>
          <component-refer ref="FCS_CKM.4(a)/Server"/>
          <component-refer ref="FCS_RBG_EXT.1/Server"/>
          <component-refer ref="FCS_CKM.2/Server"/>
          <component-refer ref="FCS_CKM.2"/>
          <component-refer ref="FCS_COP.1(b)/Server"/>
          <component-refer ref="FCS_COP.1(c)/Server"/>
          <component-refer ref="FCS_COP.1(d)/Server"/>
          <component-refer ref="FCS_COP.1(g)/Server"/>
          <component-refer ref="FCS_KDF_EXT.1/Server"/>
          <component-refer ref="FCS_SNI_EXT.1/Server"/>
          <component-refer ref="FCS_HTTPS_EXT.1"/>
          <component-refer ref="FCS_IPSEC_EXT.1"/>
          <component-refer ref="FCS_SSHC_EXT.1"/>
          <component-refer ref="FCS_SSHS_EXT.1"/>
          <component-refer ref="FCS_TLSC_EXT.1"/>
          <component-refer ref="FCS_TLSS_EXT.1"/>
          <component-refer ref="FMT_MOF.1/Server"/>
        </SO>
        <SO id="O.SECURE_CHANNEL">
          <description>
            <h:b>Secure Channel:</h:b> : FPT_ITT.1 ensures protection of intra TOE communication from disclosure, modification, 
            reordering, substitution, or deletion If server side key generation is implemented, FCS_CKM.1(a)/Server ensures sufficiently
            strong keys correctly generated on the server to meet the requirements of FTP_TRP.1. Products implementing cryptographic 
            communication protocols between the server and managed endpoints must meet the requirements for the specific protocols as
            defined in any of {FCS_HTTPS_EXT.1, FCS_IPSEC_EXT.1, FCS_SSHC_EXT.1, FCS_SSHS_EXT.1, FCS_TLSC_EXT.1, FCS_TLSS_EXT.1}. 
            
            If TLS is supported, then FCS_TLSC_EXT.3 and/or FCS_TLSS_EXT.3 may also apply, depending on the claimed TLS ciphersuites.
            If the EM Server generates signatures to request or verify certificates, FCS_COP.1(a)/Server ensures correct cryptographic
            operation in signature generation process. </description>
          
          <component-refer ref="FPT_ITT.1"/>
          <component-refer ref="FCS_CKM.1(a)/Server"/>
          <component-refer ref="FCS_COP.1(a)/Server"/>
          <component-refer ref="FCS_HTTPS_EXT.1"/>
          <component-refer ref="FCS_IPSEC_EXT.1"/>
          <component-refer ref="FCS_SSHC_EXT.1"/>
          <component-refer ref="FCS_SSHS_EXT.1"/>
          <component-refer ref="FCS_TLSC_EXT.1"/>
          <component-refer ref="FCS_TLSC_EXT.3"/>
          <component-refer ref="FCS_TLSS_EXT.1"/>
          <component-refer ref="FCS_TLSS_EXT.3"/>
        </SO>
        <SO id="O.VERIFIED_ADMIN">
          <description>
            <h:b>Verified Admin:</h:b> FIA_UAU.1 requires that the administrator be authenticated by the EM. 
            The administrator is required by FIA_UID.1 to successfully authenticate to the EM prior to being permitted to perform management functions on behalf of the administrator.
          </description>
          <component-refer ref="FIA_UAU.1"/>
          <component-refer ref="FIA_UID.1"/>
        </SO>
        
        <SO id="O.TRUSTED_COMMUNICATION_CHANNEL">
          <description>FPT_TRP.1 addresses the threat of disclosure of keys, key material, or recovery material transferred between
            the endpoint or a remote administrator and the Management Server when transmitted over untrusted communication channels
            by requiring use of IPsec, SSH, TLS, and/or TLS/HTTPS protocols when such data passes through those channels.<h:br/>
            
            The selection-based communication protocol SFR’s FCS_HTTPS_EXT.1, FCS_IPSEC_EXT.1, FCS_SSHC_EXT.1, and FCS_TLSC_EXT.1
            ensure correct implementation of the protocols required by FTP_TRP.1. If TLS is supported, then FCS_TLSS_EXT.3 may also
            apply, depending on the claimed TLS ciphersuites. FCS_RBG_EXT.1/Server ensures sufficiently strong keys are generated for 
            the communication protocols previously referenced. FIA_X509_EXT.1/Server, FIA_X509_EXT.2/Server, and FIA_X509_EXT.3/Server ensure
            the communication channel is established only with a server that is authenticated. FCS_COP.1(a)/Server ensures correct generation of cryptographic signatures. <h:br/>
            
            If the TSF generates password authorization factors, the requirements of FCS_PCC_EXT.1/Server ensure that the password data is not subjected
            to unauthorized disclosure or brute force attack.
          </description>
          <component-refer ref="FTP_TRP.1"/>
          <component-refer ref="FCS_COP.1(a)/Server"/>
          <component-refer ref="FCS_PCC_EXT.1/Server"/>
          <component-refer ref="FCS_RBG_EXT.1/Server"/>
          <component-refer ref="FIA_X509_EXT.1/Server"/>
          <component-refer ref="FIA_X509_EXT.2/Server"/>
          <component-refer ref="FIA_X509_EXT.3/Server"/>
          <component-refer ref="FCS_HTTPS_EXT.1"/>
          <component-refer ref="FCS_IPSEC_EXT.1"/>
          <component-refer ref="FCS_SSHS_EXT.1"/>
          <component-refer ref="FCS_TLSS_EXT.1"/>
          <component-refer ref="FCS_TLSS_EXT.3"/>
        </SO>
      </SOs>
    </section>
    
    <section title="Security Objectives for the TOE's Operational Environment" id="objenv"> The
      Operational Environment of the TOE implements technical and procedural measures to assist the
      TOE in correctly providing its security functionality (which is defined by the security
      objectives for the TOE). The security objectives for the Operational Environment consist of a
      set of statements describing the goals that the Operational Environment should achieve.<h:br/>
      This section defines the security objectives that are to be addressed by the IT domain or by
      non-technical or procedural means. The assumptions identified in Section 3 are incorporated as
      security objectives for the environment. <SOs>
        <SO id="OE.SECURED_CONFIGURATION">
          <description>The Management Server and remote endpoints are configured in accordance with its associated operational guidance
            so that the level of security that is provided by the TOE is consistent with its evaluated configuration.</description>
          <component-refer ref="FMT_SMF.1/Server"/>
        </SO>
        <SO id="OE.SECURED_ENVIRONMENT">
          <description>The components of the Management Server’s underlying platform are configured in accordance with their associated 
            operational guidance so that the TOE is deployed in an environment that is consistent with its evaluated configuration. </description>
          <component-refer ref="FMT_SMF.1/Server "/>
        </SO>
        <SO id="OE.PHYSICAL_SERVER">
          <description>The Operating environment will provide a cryptographic function capability
            that is commensurate with the requirements and capabilities of the TOE.</description>
          <component-refer ref="FCS_KYC_EXT.1"/>
        </SO>
        <SO id="OE.ENVIRONMENTAL_STORAGE">
          <description>If the TOE relies on the Operational Environment for key storage, the storage mechanism will provide at least the same 
            level of security as a TOE-internal storage mechanism that is conformant to this PP-Configuration.</description>
          <component-refer ref="FPT_KYP_EXT.2"/>
        </SO>
       </SOs>
    
    </section>
    <section title="Security Objectives Rationale" id="SOR">This section describes how the
      assumptions, threats, and organizational security policies map to the security objectives.
      <h:insertSPDCorrespondence/>
    </section>
  </chapter>

  <chapter title="Security Requirements" id="req">This chapter describes the security requirements
    which have to be fulfilled by the email client. Those requirements comprise functional
    components from Part 2 of <cite linkend="bibCC"/>. The following notations are used: <h:ul>
      <h:li>
        <h:b>Selection</h:b> (denoted by <h:i>italicized text</h:i>): is used to select one or more options
        provided by the [CC] in stating a requirement.</h:li>
      <h:li>
        <h:b>Assignment</h:b> operation (denoted by <h:i>italicized text</h:i>): is used to assign a
        specific value to an unspecified parameter, such as the length of a password. Showing the
        value in square brackets indicates assignment.</h:li>
      <h:li>
        <h:b>Iteration</h:b> operation: are identified with a number inside parentheses (e.g.
        "(1)").</h:li>
    </h:ul>
    <section title="Security Functional Requirements for the File Encryption Application (TOE)"
      id="SFRs"> As indicated in Section 1.3.2, security functional requirements in the main body of
      the module are divided into those that must be satisfied by the file encryption solution, and those that must be satisfied by either the TOE or the platform on which it runs.
      This section contains the requirements that must be met by the TOE. 
      
      
      
      <subsection title="Cryptographic Support (FCS)" id="fcs">
        <f-component id="FCS_VAL_EXT.1" name="Extended: Validation">
          <f-element id="FCS_VAL_EXT.1.1">
            <title>The TSF shall perform validation of the 
              <selectables>
                <selectable>submask</selectable>
                <selectable>intermediate key</selectable>
              </selectables>using the following method(s): 
              <selectables>
                <selectable>key wrap as specified in FCS_COP.1(5)</selectable>
                <selectable>hash the 
                  <selectables>
                    <selectable>submask</selectable>
                    <selectable>intermediate key</selectable>
                  </selectables>as specified in FCS_COP.1.1(2) as specified the Application Software PP
                  and compare it to a stored hashed </selectable> 
                <selectable>decrypt a known value using the 
                  <selectables>
                    <selectable>submask</selectable>
                    <selectable>intermediate key</selectable>
                  </selectables> as specified in FCS_COP.1(1) and compare it against a stored known value]</selectable>
              </selectables> 
            </title>
          
          <note role="application">The EM Module performs validation of any administrator credential used to log in to the EM in accordance with this SFR.</note>
            <aactivity>
              <h:h4>TSS</h:h4>
              The evaluator shall examine the TSS to determine which authorization factors support validation.
              
              The evaluator shall examine the TSS to review a high-level description if multiple submasks are used within the TOE,
              how the submasks are validated (e.g., each submask validated before combining, once combined validation takes place).
              
              
              <h:h4>Guidance</h:h4>If the validation functionality is configurable, the evaluator shall examine the operational guidance
              to ensure it describes how to configure the TOE to ensure the limits regarding validation attempts can be established. 
              
              <h:h4>Tests</h:h4>The evaluator shall perform the following tests:
              
              Test 1: The evaluator shall determine the limit on the average rate of the number of consecutive failed authorization attempts.
              The evaluator will test the TOE by entering that number of incorrect authorization factors in consecutive attempts to access the
              protected data. If the limit mechanism includes any “lockout” period, the time period tested should include at least one such
              period. Then the evaluator will verify that the TOE behaves as described in the TSS.
              
              Test 2: For each validated authorization factor, ensure that when the user provides an incorrect authorization factor,
              the TOE prevents the access administrators.</aactivity>
            
          </f-element>
        </f-component>
      
        <f-component id="FCS_COP.1(1)" name="Cryptographic operation (Data Encryption)">
          <f-element id="FCS_COP.1.1(1)">
            <title>
              <h:b>Refinement:</h:b> The application shall <selectables>
                <selectable>implement platform-provided AES encryption</selectable>
                <selectable>implement AES encryption</selectable>
              </selectables> shall perform <h:b>data encryption and decryption</h:b> in accordance with
              a specified cryptographic algorithm <h:b>AES used in</h:b>
              <selectables linebreak="yes">
                <selectable> CBC (as defined in NIST SP 800-38A)</selectable>
                <selectable> GCM (as defined in NIST SP 800-38D)</selectable>
                <selectable> XTS (as defined in NIST SP 800-38E)</selectable>
              </selectables>
              <h:b>mode</h:b> and cryptographic key sizes <selectables linebreak="yes">
                <selectable>128 bits;</selectable>
                <selectable>256 bits</selectable>
              </selectables>
            </title>
            <note role="application"> The intent of this requirement is to specify the approved AES
              modes that the ST author may select for AES encryption of the appropriate information
              on the file encryption software. The first selection indicates whether the TOE or the
              platform performs the cryptographic operations. For the second selection, the
              ST author should indicate the mode or modes supported by the TOE/platform
              implementation. The third selection indicates the key size to be used, which is
              identical to that specified for FCS_CKM_EXT.1. <h:br/> 
              
              When the XTS mode is selected, a cryptographic key of 256-bit or of 512-bit is allowed as
              specified in IEEE 1619. XTS-AES key is divided into two AES keys of equal size - for
              example, AES-128 is used as the underlying algorithm, when 256-bit key and XTS mode are
              selected. AES-256 is used when a 512-bit key and XTS mode are selected.
              
            </note>
            <aactivity>
              <h:h4>TSS</h:h4>
              <h:h4>Requirement met by the platform</h:h4> The evaluator examines the TSS to determine that it lists 
              the APIs used by the TOE to invoke the required functionality on the platform. The evaluator examines 
              the ST of all platforms claimed in the TOE ST to determine that the specific modes and key-sizes are 
              supported by the underlying platform, and that the APIs listed in the TSS section are those that were exercised on each underlying platform<h:br/>
              <h:h4>Requirement met by the TOE</h:h4> If multiple modes are supported, the evaluator 
              examines the TSS to determine how a specific mode/key-size is chosen by the end user. <h:br/>
              
              <h:h4>Guidance</h:h4> 
              <h:h4>Requirement met by the platform</h:h4>  If multiple modes are supported, the evaluator examines the Operational Guidance to 
              determine how a specific mode/key-size is chosen by the end user. 
              
              <h:h4>Tests</h:h4> <h:h4>Requirement met by the TOE</h:h4> 
              The assurance activity tests specified for AES in GCM or CBC mode in the underlying Application Software PP shall be performed in the case that "GCM" is selected in the requirement.
              
              <h:h4>XTS-AES Monte Carlo Test</h:h4> The
              evaluator shall test the encrypt functionality of XTS-AES for each combination of the
              following input parameter lengths: <h:h4>256 bit (for AES-128) and 512 bit (for AES-256)
                keys</h:h4>
              <h:h4>Three data unit (i.e., plaintext) lengths.</h:h4> One of the data unit lengths shall
              be a non-zero integer multiple of 128 bits, if supported. One of the data unit lengths
              shall be an integer multiple of 128 bits, if supported. The third data unit length
              shall be either the longest supported data unit length or 216 bits, whichever is
              smaller. <h:br/> using a set of 100 (key, plaintext and 128-bit random tweak value)
              3-tuples and obtain the ciphertext that results from XTS-AES encrypt. <h:br/> The
              evaluator may supply a data unit sequence number instead of the tweak value if the
              implementation supports it. The data unit sequence number is a base-10 number ranging
              between 0 and 255 that implementations convert to a tweak value internally. <h:br/> The
              evaluator shall test the decrypt functionality of XTS-AES using the same test as for
              encrypt, replacing plaintext values with ciphertext values and XTS-AES encrypt with
              XTS-AES decrypt. </aactivity>
          </f-element>
        </f-component>
      
        <f-component id="FCS_COP.1(5)" name="Cryptographic operation (Key Wrapping)" status="sel-based">
          <selection-depends req="FCS_KYC_EXT.1.1" ids="USEKEYWRA"/>
          <f-element id="FCS_COP.1.1(5)">
            <title>
              <h:b>Refinement:</h:b> The application shall 
              <selectables>
                <selectable>use platform-provided functionality to perform Key Wrapping</selectable>
                <selectable>implement functionality to perform Key Wrapping in accordance with a specified cryptographic algorithm [AES] in the following modes
                  <selectables linebreak="yes">
                    <selectable>Key Wrap</selectable>
                    <selectable>Key Wrap with Padding</selectable>
                    <selectable>GMC mode</selectable>
                    <selectable>CCM mode</selectable>
                  </selectables> and the cryptographic key size 
                  <selectables>
                    <selectable>128 bits (AES)</selectable>
                    <selectable>256 bits (AES)</selectable>
                  </selectables> that meet the following: 
                  <selectables linebreak="yes">
                    <selectable>“NIST SP 800-38C”</selectable>
                    <selectable>“NIST SP 800-38D”</selectable>
                    <selectable>“NIST SP 800-38F”</selectable>
                    <selectable>no other standards</selectable>
                  </selectables>
                </selectable>
              </selectables> 
            </title>
            <note role="application">This requirement is used in the body of the ST if the ST author chooses to
              use key wrapping in the key chaining approach that is specified in FCS_KYC_EXT.1.</note>
            <aactivity>
              <h:h4>TSS</h:h4>
              <h:h4>Conditional:</h:h4> If use platform provided functionality was selected, then the evaluator shall examine the TSS to verify that it
              describes how the FEK encryption/decryption is invoked. <h:br/>
              <h:h4>Conditional:</h:h4> If use impliment functionality was selected, The evaluator shall check that the TSS includes
              a description of encryption function(s) used for key wrapping. The evaluator should check that this description of the
              selected encryption function includes the key sizes and modes of operations as specified in the table above per row.
              The evaluator shall check that the TSS describes the means by which the TOE satisfies constraints on algorithm parameters
              included in the selections made for ‘cryptographic algorithm’ and ‘list of standards’. 
              
              The evaluator shall examine the TSS to ensure that the points at which key wrapping and decryption occurs are described,
              and that the complete data path for key wrapping is described. The evaluator checks that this description is consistent
              with the relevant parts of the TSS.
              
              Assessment of the complete data path for key wrapping includes confirming that the TSS describes the data flow from the
              device’s host interface to the device’s non-volatile memory storing the data, and gives information enabling the user data
              datapath to be distinguished from those situations in which data bypasses the data encryption engine (e.g. read-write
              operations to an unencrypted Master Boot Record area). The documentation of the data path should be detailed enough that
              the evaluator will thoroughly understand the parts of the TOE that the data passes through (e.g. different memory types,
              processors and co-processors), its encryption state (i.e. encrypted or unencrypted) in each part, and any places where
              the data is stored. For example, any caching or buffering of the data should be identified and distinguished from the
              final destination in non-volatile memory (the latter represents the location from which the host will expect to retrieve the data in future).
              
              
              <h:br/>
              <h:h4>Guidance</h:h4> If multiple encryption modes are supported, the evaluator examines the guidance documentation
              to determine that the method of choosing a specific mode/key size by the end user is described.
              
              <h:h4>Tests</h:h4> 
              The assurance activity tests specified for AES in GCM mode in the underlying Application Software PP shall be performed in the case that "GCM" is selected in the requirement.
              
              If AES Key Wrap is used to decrypt/encrypt the key, the evaluator shall examine the TSS to determine that it specifies that the implementation conforms to SP 800-38F with the appropriate (with or without padding) Key Wrap section using AES. 
              The evaluator shall also perform the verification procedures outlined in the testing methodology, "The Key Wrap Validation System." (http://csrc.nist.gov/groups/STM/cavp/documents/mac/KWVS.pdf)
              
              AES-CCM Tests
              These tests are intended to be equivalent to those described in the NIST document, “The CCM Validation System (CCMVS),” updated 9 Jan 2012, found at http://csrc.nist.gov/groups/STM/cavp/documents/mac/CCMVS.pdf.
              
              It is not recommended that evaluators use values obtained from static sources such as 
              http://csrc.nist.gov/groups/STM/cavp/documents/mac/ccmtestvectors.zip
              or use values not generated expressly to exercise the AES-CCM implementation.
              
              The evaluator shall test the generation-encryption and decryption-verification
              functionality of AES-CCM for the following input parameter and tag lengths:
              Keys: All supported and selected key sizes (e.g., 128, 256 bits).
              Associated Data: Two or three values for associated data length: The minimum (≥ 0 bytes) and maximum (≤ 32 bytes) supported associated data lengths, and 2^16 (65536) bytes, if supported.
              Payload: Two values for payload length: The minimum (≥ 0 bytes) and maximum (≤ 32 bytes) supported payload lengths.
              Nonces: All supported nonce lengths (7, 8, 9, 10, 11, 12, 13) in bytes.
              Tag: All supported tag lengths (4, 6, 8, 10, 12, 14, 16) in bytes.
              
              The testing for CCM consists of five tests. To determine correctness in each of the below tests, the evaluator shall compare the ciphertext with the result of encryption of the same inputs with a known good implementation.
              
              Variable Associated Data Test
              For each supported key size and associated data length, and any supported payload length, nonce length, and tag length, the evaluator shall supply one key value, one nonce value, and 10 pairs of associated data and payload values, and obtain the resulting ciphertext.
              
              Variable Payload Text
              For each supported key size and payload length, and any supported associated data length, nonce length, and tag length, the evaluator shall supply one key value, one nonce value, and 10 pairs of associated data and payload values, and obtain the resulting ciphertext.
              
              Variable Nonce Test
              For each supported key size and nonce length, and any supported associated data length, payload length, and tag length, the evaluator shall supply one key value, one nonce value, and 10 pairs of associated data and payload values, and obtain the resulting ciphertext.
              
              Variable Tag Test
              For each supported key size and tag length, and any supported associated data length, payload length, and nonce length, the evaluator shall supply one key value, one nonce value, and 10 pairs of associated data and payload values, and obtain the resulting ciphertext.
              
              Decryption-Verification Process Test
              To test the decryption-verification functionality of AES-CCM, for each combination of supported associated data length, payload length, nonce length, and tag length, the evaluator shall supply a key value and 15 sets of input plus ciphertext, and obtain the decrypted payload. Ten of the 15 input sets supplied should fail verification and five should pass.
              
            </aactivity>
          </f-element>
        </f-component>
        
        
        <f-component id="FCS_COP.1(7)" name="Cryptographic operation (Key Encryption)" status="sel-based">
          <selection-depends req="FCS_KYC_EXT.1.1" ids="USEKEYENC"/>
          <f-element id="FCS_COP.1.1(7)">
            <title>
              <h:b>Refinement:</h:b> The TSF shall 
              <selectables>
                <selectable>use platform-provided functionality to perform Key Wrapping</selectable>
                <selectable>perform [key encryption and decryption] in accordance with a specified cryptographic algorithm [AES used in CBC mode] and cryptographic key sizes 
                  <selectables linebreak="yes">
                    <selectable>128</selectable>
                    <selectable>256</selectable>
                  </selectables> bits] that meet the following:
                  [AES as specified in SP 800-38A.
                </selectable>
              </selectables>
            </title>
            <note role="application">: This requirement is used in the body of the ST if the ST author chooses to
              use AES encryption/decryption for protecting the keys as part of the key chaining approach
              that is specified in FCS_KYC_EXT.1..</note>
            <aactivity>
              <h:h4>TSS</h:h4>
              <h:h4>Requirement met by the platform</h:h4> If the platform provides the FEK
              encryption/decryption, then the evaluator shall examine the TSS to verify that it
              describes how the FEK encryption/decryption is invoked. <h:br/>
              <h:h4>Requirement met by the TOE</h:h4> The evaluator shall verify the TSS includes a description of the key size used for
              encryption and the mode used for the key encryption <h:br/>
              <h:h4>Guidance</h:h4> None. 
              <h:h4>Tests</h:h4> 
              The assurance activity tests specified for AES in CBC mode in the underlying Application Software PP shall be performed in the case that "GCM" is selected in the requirement.
            </aactivity>
          </f-element>
        </f-component>
        
        <f-component id="FCS_KDF_EXT.1" name="Cryptographic operation (Key Derivation)" status="sel-based">
          <selection-depends req="FCS_KYC_EXT.1.1" ids="USEKEYDER"/>
          <f-element id="FCS_KDF_EXT.1.1">
            <title>
              <h:b>Refinement:</h:b> The TSF shall accept 
              <selectables>
                <selectable>a RNG generated submask as specified in FCS_RBG_EXT.1</selectable>
                <selectable>a conditioned password</selectable>
                <selectable>an imported submask</selectable>
              </selectables> to derive an intermediate key, as defined in [selection:
              <selectables>
                <selectable>NIST SP 800-108 
                  <selectables>
                    <selectable>KDF in Counter Mode</selectable>
                    <selectable>KDF in Feedback Mode</selectable>
                    <selectable>KDF in Double-Pipeline Iteration Mode</selectable>
                  </selectables>
                </selectable>
                <selectable>NIST SP 800-132</selectable>
              </selectables> using the keyed-hash functions specified in FCS_COP.1(c), such that the output is at least of
              equivalent security strength (in number of bits) to the FEK.
            </title>
            <note role="application">: Application Note: This requirement is used in the body of the ST if the ST author chooses to
              use key derivation in the key chaining approach that is specified in FCS_KYC_EXT.1.
              This requirement establishes acceptable methods for generating a new random key or an
              existing submask to create a new key along the key chain.</note>
            <aactivity>
              <h:h4>TSS</h:h4>
              The evaluator shall verify the TSS includes a description of the key derivation
              function and shall verify the key derivation uses an approved derivation mode and
              key expansion algorithm according to SP 800-108 and SP 800-132. <h:br/>
              <h:h4>Guidance</h:h4> None. 
              <h:h4>Tests</h:h4> None. 
            </aactivity>
          </f-element>
        </f-component>
        
        <f-component id="FCS_COP.1(8)" name="Cryptographic operation (Key Transport)" status="sel-based">
          <selection-depends req="FCS_KYC_EXT.1.1" ids="USEKEYTRA"/>
          <f-element id="FCS_COP.1.1(8)">
            <title>
              <h:b>Refinement:</h:b> The TSF shall perform [key transport] in accordance with a
              3 specified cryptographic algorithm [RSA in the following modes 
              <selectables>
                <selectable>KTS-OAEP</selectable>
                <selectable>KTS4-KEM-KWS</selectable>
              </selectables> and the cryptographic key size 
              <selectables>
                <selectable>2048</selectable>
                <selectable>3072</selectable>
              </selectables>bits that meet the following: [NIST SP 800-56B, Revision 1].
            </title>
            <note role="application">:  This requirement is used in the body of the ST if the ST author chooses to
              use key transport in the key chaining approach that is specified in FCS_KYC_EXT.1.
            </note>
            <aactivity>
              <h:h4>TSS</h:h4>
              The evaluator shall verify the TSS provides a high level description of the RSA
              scheme and the cryptographic key size that is being used, and that the asymmetric
              algorithm being used for key transport is RSA. If more than one scheme/key size are
              allowed, then the evaluator shall make sure and test all combinations of scheme and
              key size. There may be more than one key size to specify – an RSA modulus size
              (and/or encryption exponent size), an AES key size, hash sizes, MAC key/MAC tag
              size.
              If the KTS-OAEP scheme was selected, the evaluator shall verify that the TSS
              identifies the hash function, the mask generating function, the random bit generator,
              the encryption primitive and decryption primitive.
              If the KTS-KEM-KWS scheme was selected, the evaluator shall verify that the TSS
              identifies the key derivation method, the AES-based key wrapping method, the secret
              value encapsulation technique, and the random number generator. <h:br/>
              <h:h4>Guidance</h:h4> None. 
              <h:h4>Tests</h:h4> 
              For each supported key transport schema, the evaluator shall initiate at least 25
              sessions that require key transport with an independently developed remote instance
              of a key transport entity, using known RSA key-pairs. The evaluator shall observe
              traffic passed from the sender-side and to the receiver-side of the TOE, and shall
              perform the following tests, specific to which key transport scheme was employed.
              If the KTS-OAEP scheme was selected, the evaluator shall perform the following
              tests:
              1. The evaluator shall inspect each cipher text, C, produced by the RSA-OAEP
              encryption operation of the TOE and make sure it is the correct length, either
              256 or 384 bytes depending on RSA key size. The evaluator shall also feed into
              the TOE’s RSA-OEAP decryption operation some cipher texts that are the
              wrong length and verify that the erroneous input is detected and that the
              decryption operation exits with an error code.
              2. The evaluator shall convert each cipher text, C, produced by the RSA-OAEP
              encryption operation of the TOE to the correct cipher text integer, c, and use the
              decryption primitive to compute em = RSADP((n,d),c) and convert em to the
              encoded message EM. The evaluator shall then check that the first byte of EM
              is 0x00. The evaluator shall also feed into the TOE’s RSA-OEAP decryption
              operation some cipher texts where the first byte of EM was set to a value other
              than 0x00, and verify that the erroneous input is detected and that the decryption
              operation exits with an error code.
              3. The evaluator shall decrypt each cipher text, C, produced by the RSA-OAEP
              encryption operation of the TOE using RSADP, and perform the OAEP
              decoding operation (described in NIST SP 800-56B section 7.2.2.4) to recover
              HA’ || X. For each HA’, the evalutor shall take the corresponding A and the
              specified hash algorithm and verify that HA' = Hash(A). The evaluator
              should[shall?] also force the TOE to perform some RSA-OAEP decryptions
              where the A value is passed incorrectly, and the evaluator should[shall?] verify
              that an error is detected.
              4. The evaluator shall check the format of the ‘X’ string recovered in OAEP.Test.3
              to ensure that the format is of the form PS || 01 || K, where PS consists of zero or
              more consecutive 0x00 bytes and K is the transported keying material. The
              evaluator should[shall?] also feed into the TOE’s RSA-OEAP decryption
              operation some cipher texts for which the resulting ‘X’ strings do not have the
              correct format (i.e., the leftmost non-zero byte is not 0x01). These incorrectly 
              formatted ‘X’ variables should[shall?] be detected by the RSA-OEAP decrypt
              function.
              5. The evaluator shall trigger all detectable decryption errors and validate that the
              returned error codes are the same and that no information is given back to the
              sender on which type of error occurred. The evaluator shall also validate that no
              intermediate results from the TOE’s receiver-side operations are revealed to the
              sender.
              If the KTS-KEM-KWS scheme was selected, the evaluator shall perform the
              following tests:
              1. The evaluator shall inspect each cipher text, C, produced by RSA-KEM-KWS
              encryption operation of the TOE and make sure the length (in bytes) of the
              cipher text, cLen, is greater than nLen (the length, in bytes, of the modulus of
              the RSA public key) and that cLen - nLen is consistent with the byte lengths
              supported by the key wrapping algorithm. The evaluator shall feed into the
              RSA-KEM-KWS decryption operation a cipher text of unsupported length and
              verify that an error is detected and that the decryption process stops.
              2. The evaluator shall separate the cipher text, C, produced by the sender-side of
              the TOE into its C0 and C1 components and use the RSA decryption primitive to
              recover the secret value, Z, from C0. The evaluator shall check that the
              unsigned integer represented by Z is greater than 1 and less than n-1, where n is
              the modulus of the RSA public key. The evaluator shall construct examples
              where the cipher text is created with a secret value Z = 1 and make sure the
              RSA-KEM-KWS decryption process detects the error. Similarly, the evaluator
              shall construct examples where the cipher text is created with a secret value Z =
              n – 1 and make sure the RSA-KEM-KWS decryption process detects the error.
              3. The evaluator shall attempt to successfully recover the secret value Z, derive the
              key wrapping key, KWK, and unwrap the KWA-cipher text following the RSAKEM-KWS
              decryption process given in NISP SP 800-56B section 7.2.3.4. If the
              key-wrapping algorithm is AES-CCM, the evaluator shall verify that the value
              of any (unwrapped) associated data, A, that was passed with the wrapped keying
              material is correct The evaluator shall feed into the TOE’s RSA-KEM-KWS
              decryption operation examples of incorrect cipher text and verify that a
              decryption error is detected. If the key-wrapping algorithm is AES-CCM, the
              evaluator shall attempt at least one decryption where the wrong value of A is
              given to the RSA-KEM-KWS decryption operation and verify that a decryption
              error is detected. Similarly, if the key-wrapping algorithm is AES-CCM, the
              evaluator shall attempt at least one decryption where the wrong nonce is given to
              the RSA-KEM-KWS decryption operation and verify that a decryption error is
              detected.
              4. The evaluator shall trigger all detectable decryption errors and validate that the
              resulting error codes are the same and that no information is given back to the
              sender on which type of error occurred. The evaluator shall also validate that no
              intermediate results from the TOE’s receiver-side operations (in particular, no Z
              values) are revealed to the sender.</aactivity>
          </f-element>
        </f-component>
        
        <f-component id="FCS_IV_EXT.1" name="Extended: Initialization Vector Generation">
          <f-element id="FCS_IV_EXT.1.1 ">
            <title>The application shall <selectables>
              <selectable>implement platform-provided functionality to generate IVs</selectable>
              <selectable>generate IVs in the following manner<selectables>
                <selectable>CBC: IVs shall be non-repeating and unpredictable;</selectable>
                <selectable>CCM: Nonce shall be non-repeating and unpredictable;</selectable>
                <selectable>XTS: No IV. Tweak values shall be non-negative integers, assigned consecutively,
                  and starting at an arbitrary non-negative integer;</selectable>
                <selectable>GCM: IV shall be non-repeating. The number of invocations of GCM shall not exceed
                  2^32 for a given secret key].</selectable>
              </selectables></selectable>
            </selectables> </title>
            <note role="application">None.</note>
            <aactivity>
              <h:h4>TSS</h:h4>
              The evaluator shall examine the TSS to determine which authorization factors support
              validation.
              The evaluator shall examine the TSS to review a high-level description if multiple
              submasks are used within the TOE, how the submasks are validated (e.g., each
              submask validated before combining, once combined validation takes place). <h:br/>
              
              The evaluator shall examine the TSS to verify that it described the method the TOE
              employs to limit the number of consecutively failed authorization attempts.
              The evaluator shall examine the vendor’s TSS to ensure it describes how validation
              is performed. The description of the validation process in the TSS provides detailed
              information how the TOE validates the submasks. The TSS describes how the
              process works, such that it does not expose any material that might compromise the
              submask(s).
              
              
              <h:h4>Guidance</h:h4>[conditional] If the validation functionality is configurable, the evaluator shall
              examine the operational guidance to ensure it describes how to configure the TOE to
              ensure the limits regarding validation attempts can be established.
              
              <h:h4>Tests</h:h4>The evaluator shall perform the following tests:
              Test 1: The evaluator shall determine the limit on the average rate of the number of
              consecutive failed authorization attempts. The evaluator will test the TOE by entering
              that number of incorrect authorization factors in consecutive attempts to access the
              protected data. If the limit mechanism includes any “lockout” period, the time period 
              tested should include at least one such period. Then the evaluator will verify that the
              TOE behaves as described in the TSS.
              Test 2: For each validated authorization factor, ensure that when the user provides an
              incorrect authorization factor, the TOE prevents the any FEK from being decrypted. 
            </aactivity>
          </f-element>
        </f-component>
        
        <f-component id="FCS_SMC_EXT.1" name="Submask Combining " status="sel-based">
          <selection-depends req="FCS_KYC_EXT.1.1"  ids="USEKEYCOM"/>
          <f-element id="FCS_SMC_EXT.1.1 ">
            <title>The TSF shall combine submasks using the following method <selectables>
              <selectable>exclusive OR (XOR)</selectable>
              <selectable>SHA-256</selectable>
              <selectable>SHA-384</selectable>
              <selectable>SHA-512</selectable>
            </selectables> to generate an intermediary key</title>
            <note role="application">This requirement specifies the way that a product may combine the
              various submasks by using either an XOR or an approved SHA-hash. </note>
            <aactivity>
              <h:h4>TSS</h:h4> If keys are XORed together to form an intermediate key, the TSS section
              shall identify how this is performed (e.g., if there are ordering requirements, checks
              performed, etc.). The evaluator shall also confirm that the TSS describes how the length
              of the output produced is at least the same as that of the FEK. <h:h4>Guidance</h:h4>None.
              <h:h4>Tests</h:h4>None.
            </aactivity>
          </f-element>
        </f-component>
        
        
        
        
        
        
       
        
        
        
        
        
        
        
        
        
        
        
        
        
        
      
        
      
        
      
      
      
        
              
      </subsection>
      
      <subsection title="User Data Protection (FDP)" id="fdp">
        <f-component id="FDP_PRT_EXT.1" name="FILLERa">
          <f-element id="FDP_PRT_EXT.1.1">
            <title>The TSF shall perform encryption and decryption of the user-selected file (or set
              of files) in accordance with FCS_COP.1(1). </title>
            <note role="application">This is the primary requirement for encrypting and decrypting
              the protected resources (files and sets of files). Apart from the actual encryption
              and decryption of the resources, there are two other functions specified by this
              requirement. </note>
            <aactivity>
              <h:h4>TSS</h:h4> FDP_PRT_EXT.1.1: The evaluator shall examine the TSS to determine that it
              lists each type of resource that can be encrypted (e.g., file, directory) and what
              “encrypted” means in terms of the resource (e.g., “encrypting a directory” means that
              all of the files contained in the directory are encrypted, but the data in the
              directory itself (which are filenames and pointers to the files) are not encrypted).
              The evaluator shall also confirm that the TSS describes how each type of resource
              listed is encrypted and decrypted by the TOE. The evaluator shall ensure that this
              description includes the case where an existing file or set of files is encrypted for
              the first time; a new file or set of files is created and encrypted; an existing file
              or set of files is re-encrypted (that is, it had been initially encrypted; it was
              decrypted (by the TOE) for use by the user, and is then subsequently re-encrypted);
              and corresponding decryption scenarios. If other scenarios exist due to product
              implementation/features, the evaluator shall ensure that those scenarios are covered
              in the TSS as well. <h:h4>Guidance</h:h4> If the TOE creates temporary objects and these
              objects can be protected through administrative measures (e.g., the TOE creates
              temporary files in a designated directory that can be protected through configuration
              of its access control permissions), then the evaluator shall check the Operational
              Guidance to ensure that these measures are described. <h:br/> If there are special
              measures necessary to configure the method by which the file or set of files are
              encrypted (e.g., choice of algorithm used, key size, etc.), then those instructions
              shall be included in the Operational Guidance and verified by the evaluator. In these
              cases, the evaluator checks to ensure that all non-TOE products used to satisfy the
              requirements of the ST that are described in the Operational Guidance are consistent
              with those listed in the ST, and those tested by the assurance activities of this EP.
                <h:h4>Tests</h:h4> The evaluator shall also perform the following tests. All
              instructions for configuring the TOE and each of the environments must be included in
              the Operational Guidance and used to establish the test configuration.<h:br/> For each
              resource and decryption/encryption scenario listed in the TSS, the evaluator shall
              ensure that the TSF is able to successfully encrypt and decrypt the resource using the
              following methodology:<h:br/> Monitor the temporary resources being created (if any) and
              deleted by the TSF—the tools used to perform the monitoring (e.g., procmon for a
              Windows system) shall be identified in the test report. The evaluator shall ensure
              that these resources are consistent with those identified in the TSS, and that they
              are protected as specified in the Operational Guidance and are deleted when the
              decryption/encryption operation is completed. </aactivity>
          </f-element>
          <f-element id="FDP_PRT_EXT.1.2">
            <title> The application shall <selectables>
                <selectable>invoke platform-provided functionality</selectable>
                <selectable>implement functionality</selectable>
              </selectables> to ensure that all sensitive data created by the TOE when
              decrypting/encrypting the user-selected file (or set of files) are destroyed in
              volatile and non-volatile memory when the data is no longer needed. </title>
            <note role="application"> The intent is that the TSF controls the use and clearing of any data
              that it manipulates that is not needed by the user (e.g. a temporary file created in non-volatile
              memory during the encryption/decryption process would be destroyed as soon as the process is completed).
              This should not prevent expected usage (e.g. the TOE may create a decrypted copy of a file as requested
              by the user).The TSF is also not responsible for temporary files that  non-TSF application creates 
              (for example, a text editor may create a “checkpoint” file when editing a file that is protected by the TOE;
              the TOE does not have to try to keep track of or clean up these “checkpoint” files). An optional
              requirement on cleaning up the temporary files created by non-TSF application when operating on
              files protected by the TOE is in Appendix B. </note>
            <aactivity>
              <h:h4>TSS</h:h4>
              <h:b>Requirement met by the TOE</h:b>
              <h:br/> The evaluator shall examine the TSS to ensure there is a high-level description
              of how the FEK is protected. <h:br/>The evaluator shall examine the TSS to ensure there
              is a description of how the FEK is protected. The evaluator shall examine the TSS to ensure 
              that it describes all temporary files/resources created or memory used during the 
              decryption/encryption process and when those files/resources or memory is no longer needed. 
              The TSS shall describe how the TSF or TOE platform deletes the non-volatile memory (for example, files) 
              and volatile memory locations after the TSF is done with its decryption/encryption operation. 
              <h:h4>Guidance</h:h4>
              None. <h:h4>Tests</h:h4> 
              <testlist><test>This test only applies for application provided functionality.</test>
                
                1. Using a file editor, create and save a text file that is encrypted per the evaluation configured encryption policy.  The contents of the file will be limited to a known text pattern to ensure that the text pattern will be present in all encryption/decryption operations performed by the TOE.
                
                2. Exit the file editor so that the file (including its known text pattern) has “completed the decryption/encryption operation” and process memory containing the known text pattern is released.
                
                3. The evaluator will take a dump of volatile memory and search the generated dump for the known pattern.  The test fails if the known plaintext pattern is found in the memory dump.
                
                4. Open the file again with a file editor. 
                
                5. The evaluator will take a dump of volatile memory and search the generated dump for the known text pattern.  Note that the known text pattern is expected to be present since the file editor has the file open. The test fails if the known plaintext pattern is not found in the memory dump.
                
                6. Close the file and exit the file editor.
                
                7. The evaluator will take a dump of volatile memory and search the retrieved dump for the known pattern.  The test fails if the known plaintext pattern is found in the memory dump.</testlist>
            </aactivity>
          </f-element>
        </f-component>
      
      
      
      
      
        
      
      
      </subsection>
      <subsection title="Identification and Authentication (FIA)" id="fia">
        <f-component id="FIA_UAU.1" name="Timing of Authentication">
          <f-element id="FIA_UAU.1.1">
            <title>The TSF shall allow 
              <assignable>list of TSF-mediated actions</assignable>
              on behalf of the administrator to be performed before the administrator is authenticated.
            </title>
          </f-element>
            <f-element id="FIA_UAU.1.2">
           <title>The TSF shal require each administrator to be successfully authenticated before allowing any other TSF-mediated actions on behlaf of that administractor.</title>
            <note role="application"> This requirement defines the timing administrator capabilities on the enterprise server.
            </note>
            <aactivity>
              
              <h:h4>TSS</h:h4> The evaluator shall examine the TSS to determine that it describes the list of actions that are performed on behalf
              of the administrator prior to login of the administrator. The evaluator shall examine the TSS to determine that it describes the list
              of actions that require administrator authentication.
              
              <h:h4>Guidance</h:h4>	The evaluator shall examine the guidance documentation to determine that any necessary preparatory steps 
              (e.g., establishing credential material such as pre- shared keys, tunnels, certificates, etc.) to logging in are described.
              For each supported login method, the evaluator shall ensure the guidance documentation provides clear instructions for successfully
              logging on. If configuration is necessary to ensure the services provided before login are limited, the evaluator shall determine
              that the guidance documentation provides sufficient instruction on limiting the allowed services.
              
              
              <h:h4>Tests</h:h4>	The evaluator shall perform the following tests:
              <testlist>
                <test>Test 1: The evaluator shall verify that the list of actions allowed without administrator login completes 
                  successfully without requiring administrator login and make sure this list is consistent with the TSS. </test>
                
                <test>Test 2: The evaluator shall verify that attempting any other action requires successful entry of an administrator credential. </test>
                
                <test>Test 3: The evaluator shall use the guidance documentation to configure the appropriate credential supported for the login method.
                For that credential/login method, the evaluator shall show that providing correct IA information results in the ability to access the system,
                while providing incorrect information results in denial of access.</test>
                
                <test>Test 4: The evaluator shall configure the services allowed (if any) according to the guidance documentation, and then determine
                  the services available to an external remote entity. The evaluator shall determine that the list of services available is limited to those specified in the requirement. </test>
                
              </testlist>
            </aactivity>
          </f-element>
        </f-component>
        
        <f-component id="FIA_UID.1" name="Timing of Identification">
          <f-element id="FIA_UID.1.1">
            <title>The TSF shall allow 
              <assignable>list of TSF-mediated actions</assignable>
              on behalf of the administrator to be performed before the administrator is identified.
            </title>
          </f-element>
          <f-element id="FIA_UAU.1.2">
            <title>The TSF shal require each administrator to be successfully identified before allowing any other TSF-mediated actions on behlaf of that administractor.</title>
            <note role="application"> This requirement defines the timing administrator capabilities on the enterprise server.
            </note>
            <aactivity>
              
              <h:h4>TSS</h:h4> The evaluator shall examine the TSS to determine that it describes the list of actions that are performed on behalf of the administrator
              prior to identification of the administrator.
              
              <h:h4>Guidance</h:h4> The evaluator shall examine the guidance documentation to determine that any necessary preparatory
              steps for creating and configuring administrator accounts are described.
              
              
              <h:h4>Tests</h:h4> The evaluator shall perform the following tests:
              <testlist>
                <test>Test 1: The evaluator shall verify that the list of actions allowed without administrator identification completes successfully without
                  requiring the administrative user to be identified and make sure this list is consistent with the TSS. </test>
                
                <test>Test 2: The evaluator shall verify that attempting any other action requires successful entry of an administrator
                  account name and successful entry of the administrator account credential.  </test>
                
                
              </testlist>
            </aactivity>
          </f-element>
        </f-component>
        
      
      </subsection>
      <subsection title="Security Management (FMT)" id="fmt"> 
        
        
        
        
        <f-component id="FMT_MTD.1" name="Management of TSF Data">
          <f-element id="FMT_MTD.1.1">
            <title>The TSF shall restrict the ability to 
              <selectables>
                <selectable>change default</selectable>
                <selectable>query</selectable>
                <selectable>modify</selectable>
                <selectable>delete</selectable>
                <selectable>clear</selectable>
                <selectable><assignable>other operations</assignable></selectable>
              </selectables> the [encryption keys and intermediate values] to [administrators] at the following times: 
              <selectables>
                <selectable>never</selectable>
                <selectable>during initial provisioning</selectable>
                <selectable>during recovery</selectable>
              </selectables>
            </title>
            <note role="application"> These restrictions apply to modifications on the enterprise server.
            </note>
            <aactivity>
              <h:h4>TSS</h:h4>
              The evaluator shall examine the TSS to determine that, for each administrative function identified in the guidance documentation;
              those that are available to the administrator are identified. For each of these functions, the evaluator shall also confirm that
              the TSS details when changes may be made to the encryption keys and/or intermediate values.
              
              
              <h:h4>Guidance</h:h4>The evaluator shall verify that the guidance document describes what operations on the encryption keys and intermediate
              values are allowed to the administrator at what times.
              
              <h:h4>Tests</h:h4> The evaluator shall perform the following tests:
              
              <testlist>
                <test>Test 1: The evaluator shall try to perform at least one of the related actions without prior authentication as security administrator 
                  (either by authentication as a user with no administrator privileges or without user authentication at all – depending on the configuration 
                  of the TOE). This test should fail.</test>
                
                <test>Test 2: The evaluator shall try to perform at least one of the related actions with prior authentication as security administrator. This test should pass.</test>
                
                <test>Test 3: The evaluator shall try to perform at least one of the actions at the times that are not permitted. This test should fail.</test>
                
                <test>Test 4: The evaluator shall try to perform at least one of the actions at the times are permitted. This test should pass.</test>
              </testlist>
            </aactivity>
          </f-element>
        </f-component>
        
        <f-component id="FMT_SMF.1" name="Specification of Management Functions (Management Server)">
          <f-element id="FMT_SMF.1.1">
            <title>The TSF shall be capable of performing the following management functions: 
              <selectables>
                <selectable>register new endpoint</selectable>
                <selectable>revoke registration of endpoint</selectable>
                <selectable>initiate key generation</selectable>
                <selectable>initiate key escrow</selectable>
                <selectable>initiate key zeroization</selectable>
                <selectable>initiate key recovery</selectable>
                <selectable>set encryption policy (supported algorithms and key sizes)</selectable>
                <selectable>change administrator passwords</selectable>
                <selectable>change user passwords</selectable>
                <selectable>change recovery credentials</selectable>
                <selectable>define administrators of the TOE</selectable>
                <selectable>enable/disable use of recovery credential</selectable>
                <selectable>configure number of failed authentication attempts before issuing a key sanitization of the FEK(s)</selectable>
                <selectable>configure the number of authentication attempts that can be made within a 24 hour period</selectable>
                <selectable>configure the number of failed authentication attempts required to begin blocking subsequent attempts</selectable>
                <selectable><assignable>ability to enable or disable one or more functions defined in the File Encryption Module]</assignable></selectable>
                <selectable><assignable>ability to perform one or more functions defined in the File Encryption Module</assignable></selectable>
                <selectable><assignable>ability to authorize whether or not users can perform one or more functions defined in the File Encryption Module</assignable></selectable>
              </selectables>
            </title>
            <note role="application"> This SFR refers specifically to the management functions that can be performed by the Management Server. 
              Functions that are performed by the rest of the TOE are addressed by the FMT_SMF.1 SFR in the File Encryption Module. The final two assignments
              provide the ST author the ability to indicate when File Encyrption module functionality (such as configuration of power saving states) can be configured by the Management Server.
              
              The TSF’s ability to initiate key generation, escrow, zeroization, and/or recovery may be accomplished either by the TOE performing those
              functions or by the TOE issuing a request to a remote endpoint to perform the functions. The ST author shall indicate which case is provided by the TSF.
              If the TOE performs any of the cryptographic functions that are selected as being initiated in this SFR, the ST author shall include the equivalent
              FCS SFRs from the File Encryption Module as part of the TOE, specifically indicating that these functions are provided by the Management Server component of the TOE.
              
              If the TSF supports the use of a recovery credential, the ST author shall include the ‘enable/disable use of recovery credential’ selection.
            </note>
            
            <aactivity>
              <h:h4>TSS</h:h4>
              The evaluator shall examine the TSS to ensure that it describes which of the selections are provided by the TOE.
              Additionally, the TSS shall describe which of the configurable selections can be disabled on the Enterprise Management Server.
              The evaluator shall examine the TSS to ensure that it describes whether the TOE provides the ability to initiate key generation, 
              escrow, zeroization and/or recovery or whether it requests the endpoint to perform those functions.
              
              
              <h:h4>Guidance</h:h4>The evaluator shall examine the Guidance Documents to ensure that, if supported, configuration of the following options is described,
              including any reliance on the Operational Environment if applicable:
              
              •	Register new endpoint
              •	Revoke registration of an endpoint
              •	Initiate key generation
              •	Initiate key escrow
              •	Initiate key recovery
              •	Initiate key zeroization
              •	Set encryption policy (supported algorithms and key sizes)
              •	Change Administrator passwords
              •	Change user passwords
              •	Change Recovery Credentials
              •	Define Administrators of the TOE
              •	Enable/Disable the use of recovery credentials (end users)
              •	Configure the number of failed authentication attempts before issuing a key sanitization of the DEK
              •	Configure the number of authentication attempts that can be made in a 24 hour period
              •	Configure the number of failed authentication attempts required to begin blocking subsequent attempts
              •	The ability to enable/disable one or more functions defined in the File Encryption module
              •	The ability to authorize whether or not users can perform one or more of the functions in the File Encryption Module.
              
              
              <h:h4>Tests</h:h4> The evaluator shall perform the following tests for each claimed management function:
              
              <testlist>
                <test>Test 1: The evaluator shall configure the management server and two endpoints according to the guidance documents.
                  The evaluator shall register the endpoints with the management server. The evaluator shall verify that the endpoints
                  are identified by the management server as defined in the guidance documents. This test shall pass.</test>
                
                <test>Test 2: The evaluator shall disconnect the second endpoint from the network. The evaluator shall revoke the registration of the second endpoint
                  in the management server. The evaluator shall attempt to connect the second endpoint to the network and verify the endpoint fails to connect or is
                  displayed as revoked in the console.</test>
                
                <test>Test 3: For each item that is performed by the TOE, the evaluator shall verify that the TOE performs the actions (e.g. generate key) and
                  sends the result to the endpoint. The endpoint shall perform the actions necessary to accept the updated configuration (e.g. encrypt the data
                  with the new key, update the encryption algorithm key size or mode and re-encrypt).</test>
                
                <test>Test 4: For each item that is initiated by the TOE but performed on the endpoint, the evaluator shall verify that the TOE requests the
                  endpoint to perform the action (generate a key and encrypt the data, zeroize a key). </test>
                
                <test>Test 5: For each method of changing a credential, the evaluator shall first provision the initial authorization factor(s) in the Enterprise Server,
                  and then verify all authorization values supported allow the user access to the encrypted data on configured endpoint. Then the evaluator shall exercise
                  the management functions to change the authorization factor values to a new one on the Enterprise Server. Then he or she will verify that the endpoint
                  denies access to the user’s encrypted data when he or she uses the old or original authorization factor values to gain access.  </test>
                
                <test>Test 6: The evaluator shall add two administrators to the administrator group in the Enterprise Server and provision authorization
                  factor(s) for each administrator. The evaluator shall verify that both administrators can log into the Enterprise Server using the provided authorization factors.
                  The evaluator shall then exercise the management functions to change the authorization factor values for the first administrator to a new one on the Enterprise Server.
                  Then he or she will verify that the Enterprise Server denies the first administrator access to the Management Console when the first administrator logs in with the old
                  or original authorization factor to gain access. The evaluator shall also verify that the second administrator is still able to log in to the Enterprise Server with
                  their original authorization factor. </test>
                
                <test>Test 7: The evaluator shall verify that the second administrator from Test 2 can configure each of the supported authorization attempts configurations 
                  and shall verify that the endpoint denies access to the user’s encrypted data. </test>
                
                <test>Test 8: If the TOE provides the capability to disable management of any capability allowed in the EM Module, the evaluator shall devise a test that
                  ensures that each capability which can be disabled has been or can be disabled following guidance provided by the vendor. </test>
                
                <test>Test 9: If the TOE provides the capability to manage capabilities in place of the File Encryption Endpoint, where those administrative capabilities are then disabled in the File Encryption Enpoint,
                  the evaluator shall devise a test that ensures that each capability which can be disabled in the File Encryption Endpoint and can be subsequently managed by the EM is tested as follows:
                  
                  Disable the administrative capability in the File Encryption Endpoint and enable it in the EM
                  
                  Verify that the administration of the capability in the EM is successfully
                </test>
                
              </testlist>
            </aactivity>
          </f-element>
        </f-component>
        
      </subsection>
      
      
      <subsection title="Protection of the TSF (FPT)" id="fpt">
        <f-component id="FPT_KYP_EXT.1/server" name="Extended: Protection of Key and Key Material (FPT_KYP_EXT)">
          <f-element id="FPT_KYP_EXT.1.1/server">
            <title>The TSF shall 
              <selectables>
                <selectable>not store keys in non-volatile memory</selectable>
                <selectable>only store keys in non-volatile memory when
                  <selectables>
                    <selectable>wrapped, as specified in FCS_COP.1(5)</selectable>
                    <selectable>encrypted, as specified in FCS_COP.1(1)</selectable>
                    <selectable>the plaintext key is stored in the underlying platofrm's keystore as specified by FCS_STO_EXT.1.1</selectable>
                    <selectable>the plaintext key is not part of the key chain as specified in FCS_KYC_EXT.1.</selectable>
                    <selectable>the plaintext key will no longer provide access to the encrypted data after initial provisioning</selectable>
                    <selectable>the plaintext key is a key split that is combined as specified in FCS_SMC_EXT.1 and another contribution to the split is
                      <selectables>
                        <selectable>wrapped as specified in FCS_COP.1(5) or encrypted as specified in FCS_COP.1(7)</selectable>
                        <selectable>derived and not stored in non-volatile memory</selectable>
                      </selectables>
                    </selectable>
                    <selectable>the plaintext key is stored on an external storage device for use as an authorization factor.</selectable>
                    <selectable>the plaintext key is used to encrypt a key as specified in FCS_COP.1(7) or wrap a key as specified in FCS_COP.1(5) 
                      that is already encrypted as specified in FCS_COP.1(7) or wrapped as specified in FCS_COP.1(5)</selectable>
                  </selectables>
                </selectable>
              </selectables>.
            </title>
            <note role="application">The plaintext key storage in non-volatile memory is allowed for
              several reasons. If the keys exist within protected memory that is not user accessible
              on the TOE or OE, the only methods that allow it to play a security relevant role for
              protecting the FEK is if it is a key split or providing additional layers of wrapping
              or encryption on keys that have already been protected. </note>
            <aactivity>
              <h:h4>TSS</h:h4> The evaluator shall verify the TSS for a high level description of method
              used to protect keys stored in non-volatile memory.<h:br/> The evaluator shall verify
              the TSS to ensure it describes the storage location of all keys and the protection of
              all keys stored in non-volatile memory. The description of the key chain shall be
              reviewed to ensure FCS_COP.1(5) is followed for the storage of wrapped or encrypted
              keys in non-volatile memory and plaintext keys in non-volatile memory meet one of the
              criteria for storage. <h:h4>Guidance</h:h4> None. <h:h4>Tests</h:h4> None. </aactivity>
          </f-element>
        </f-component>
      
        
      </subsection>
    </section>
  </chapter>

    <appendix title="Optional Requirements" id="optional" >
        As indicated in <secref linkend="ccl"/>, the baseline requirements (those that must be
        performed by the <abbr title="Target of Evaluation" linkend="TOE">TOE</abbr>) are contained in the body of this PP.
        Additionally, there are three other types of requirements specified in 
        <appref linkend="optional"/>, <appref linkend="sel-based"/>, and
        <appref linkend="objective"/>.
        The first type (in this Appendix) are requirements that can be included in the <abbr title="Security Target" linkend="ST">ST</abbr>,
        but are not required in order for a TOE to claim conformance to this PP. The second type 
        (in <appref linkend="sel-based"/>)
        are requirements based on selections in the body of the PP: if certain selections are made,
        then additional requirements in that appendix must be included. The third type (in
        <appref linkend="objective"/> are components that are not required in
        order to conform to this PP, but will be
        included in the baseline requirements in future versions of this PP, so adoption by
        vendors is encouraged. Note that the ST author is responsible for ensuring that
        requirements that may be associated with those in 
        <appref linkend="optional"/>, <appref linkend="sel-based"/>, and
        <appref linkend="objective"/>
        but are not listed (e.g., FMT-type requirements) are also included in the ST.
    </appendix>
    
    <appendix title="Selection-Based Requirements" id="sel-based" >
        As indicated in the introduction to this PP, the baseline requirements (those that must be
        performed by the TOE or its underlying platform) are contained in the body of this PP. There
        are additional requirements based on selections in the body of the PP: if certain selections are
        made, then additional requirements below will need to be included.
    </appendix>
    
    <appendix title="Objective Requirements" id="objective">
        This Annex includes requirements that specify security functionality which also addresses
        threats. The requirements are not currently mandated in the body of this PP as they describe
        security functionality not yet widely available in commercial technology. However, these
        requirements may be included in the ST such that the TOE is still conformant to this PP, and
        it is expected that they be included as soon as possible.
    </appendix>

  <appendix id="biblio" title="References">
    <bibliography>
      <entry id="bibCC">
        <tag>CC</tag>
        <description>Common Criteria for Information Technology Security Evaluation - <h:ul>
          <h:li><h:a href="http://www.commoncriteriaportal.org/files/ccfiles/CCPART1V3.1R4.pdf">Part
                1: Introduction and General Model</h:a>, CCMB-2012-09-001, Version 3.1 Revision 4,
              September 2012.</h:li>
          <h:li><h:a href="http://www.commoncriteriaportal.org/files/ccfiles/CCPART2V3.1R4.pdf">Part
                2: Security Functional Components</h:a>, CCMB-2012-09-002, Version 3.1 Revision 4,
              September 2012.</h:li>
          <h:li><h:a href="http://www.commoncriteriaportal.org/files/ccfiles/CCPART3V3.1R4.pdf">Part
                3: Security Assurance Components</h:a>, CCMB-2012-09-003, Version 3.1 Revision 4,
              September 2012.</h:li>
          </h:ul></description>
      </entry>
      <entry id="bibAppPP">
        <tag>AppPP</tag>
        <description>
          <h:a href="https://www.niap-ccevs.org/pp/">Protection Profile for Application Software</h:a>
        </description>
      </entry>
      <entry id="FIPS140-2">
        <tag>FIPS140-2</tag>
        <description> Federal Information Processing Standard Publication (FIPS-PUB) 140-2, Security
          Requirements for Cryptographic Modules, National Institute of Standards and Technology,
          March 19, 2007 </description>
      </entry>
      <entry id="FIPS180-4">
        <tag>FIPS180-4</tag>
        <description> Federal Information Processing Standards Publication (FIPS-PUB) 180-4, Secure
          Hash Standard, March, 2012 </description>
      </entry>
      <entry id="FIPS186-4">
        <tag>FIPS186-4</tag>
        <description> Federal Information Processing Standard Publication (FIPS-PUB) 186-4, Digital
          Signature Standard (DSS), National Institute of Standards and Technology, July 2013
        </description>
      </entry>
      <entry id="FIPS197">
        <tag>FIPS197</tag>
        <description>Federal Information Processing Standards Publication (FIPS-PUB) 197,
          Specification for the Advanced Encryption Standard (AES), November 26, 2001 </description>
      </entry>
      <entry id="FIPS198-1">
        <tag>FIPS198-1</tag>
        <description>Federal Information Processing Standards Publication (FIPS-PUB) 198-1, The
          Keyed-Hash Message Authentication Code (HMAC), July 2008 </description>
      </entry>
      <entry id="SP800-38A">
        <tag>NIST800-38A</tag>
        <description>NIST Special Publication 800-38A, Recommendation for Block Cipher Modes of
          Operation: Methods and Techniques, 2001 Edition </description>
      </entry>
      <entry id="SP800-56A">
        <tag>NIST800-56A</tag>
        <description>NIST Special Publication 800-56A, Recommendation for Pair-Wise Key
          Establishment Schemes Using Discrete Logarithm Cryptography (Revised), March 2007
        </description>
      </entry>
      <entry id="SP800-56B">
        <tag>NIST800-56B</tag>
        <description>NIST Special Publication 800-56B, Recommendation for Pair-Wise Key
          Establishment Schemes Using Integer Factorization Cryptography, August 2009 </description>
      </entry>
      <entry id="SP800-90">
        <tag>NIST800-90</tag>
        <description>NIST Special Publication 800-90, Recommendation for Random Number Generation
          Using Deterministic Random Bit Generators (Revised), March 2007 </description>
      </entry>
      <entry id="SP800-132">
        <tag>NIST800-132</tag>
        <description>NIST Special Publication 800-132, Recommendation for Password-Based Key
          Derivation, December 2010 </description>
      </entry>
      <entry id="SP800-38F">
        <tag>NIST800-38F</tag>
        <description>NIST Special Publication 800-38F,Recommendation for Block Cipher Modes of
          Operation: Methods for Key Wrapping, December 2012 </description>
      </entry>
    </bibliography>
  </appendix>
  <appendix id="acronyms" title="Acronyms">
    <acronyms>
      <entry>
        <term>AES</term>
        <description>Advanced Encryption Standard</description>
      </entry>
      <entry>
        <term>CC</term>
        <description>Common Criteria</description>
      </entry>
      <entry>
        <term>CM</term>
        <description/>
      </entry>
      <entry>
        <term>FAK</term>
        <description>File Authentication Key</description>
      </entry>
      <entry>
        <term>FEK</term>
        <description>File Encryption Key</description>
      </entry>
      <entry>
        <term>DRBG</term>
        <description>Deterministic Random Bit Generator</description>
      </entry>
      <entry>
        <term>EAL</term>
        <description>Evaluation Assurance Level</description>
      </entry>
      <entry>
        <term>ECC</term>
        <description>Elliptic Curve Cryptography</description>
      </entry>
      <entry>
        <term>ECC CDH</term>
        <description>Elliptic Curve Cryptography Cofactor Diffie-Hellman (see NIST SP 800-56A rev 2,
          section 6.2.2.2)</description>
      </entry>
      <entry>
        <term>EP</term>
        <description>Extended Package</description>
      </entry>
      <entry>
        <term>FIPS</term>
        <description>Federal Information Processing Standards</description>
      </entry>
      <entry>
        <term>ISSE</term>
        <description>Information System Security Engineers</description>
      </entry>
      <entry>
        <term>IT</term>
        <description>Information Technology</description>
      </entry>
      <entry>
        <term>KDF</term>
        <description>Key Derivation Function</description>
      </entry>
      <entry>
        <term>KEK</term>
        <description>Key Encryption Key</description>
      </entry>
      <entry>
        <term>PBKDF</term>
        <description>Password-Based Key Derivation Function</description>
      </entry>
      <entry>
        <term>PIN</term>
        <description>Personnel Identification Number</description>
      </entry>
      <entry>
        <term>PKI</term>
        <description>Public Key Infrastructure</description>
      </entry>
      <entry>
        <term>PP</term>
        <description>Protection Profile</description>
      </entry>
      <entry>
        <term>PUB</term>
        <description>Publication</description>
      </entry>
      <entry>
        <term>RBG</term>
        <description>Random Bit Generator </description>
      </entry>
      <entry>
        <term>SAR</term>
        <description>Security Assurance Requirement</description>
      </entry>
      <entry>
        <term>SF</term>
        <description>Security Function</description>
      </entry>
      <entry>
        <term>SFR</term>
        <description>Security Functional Requirement</description>
      </entry>
      <entry>
        <term>ST</term>
        <description>Security Target</description>
      </entry>
      <entry>
        <term>TOE</term>
        <description>Target of Evaluation</description>
      </entry>
      <entry>
        <term>TSF</term>
        <description>TOE Security Functionality</description>
      </entry>
      <entry>
        <term>TSFI</term>
        <description>TSF Interface</description>
      </entry>
      <entry>
        <term>TSS</term>
        <description>TOE Summary Specification </description>
      </entry>
    </acronyms>
  </appendix>
</PP>