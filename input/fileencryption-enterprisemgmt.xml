<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="..\transforms\pp2html.xsl"?>

<?xml-model href="https://raw.githubusercontent.com/commoncriteria/transforms/master/schemas/CCProtectionProfile.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?>

<PP xmlns="https://niap-ccevs.org/cc/v1" xmlns:h="http://www.w3.org/1999/xhtml" name="file encryption">  
  <PPReference title="PP Reference" id="ID003">
    <ReferenceTable>
      <PPTitle>Application Software Extended Package for File Encryption Enterprise Management </PPTitle>
      <PPVersion>1.0-DRAFT</PPVersion>
      <PPAuthor>National Information Assurance Partnership</PPAuthor>
      <PPPubDate>2018-06-15</PPPubDate>
      <PPCertificationID>unassigned</PPCertificationID>
      <CCVersion>Version 1.0</CCVersion>
      <Keywords>file encryption; encryption</Keywords>
      <entry>
        <name>Registration</name>
        <description>National Information Assurance Partnership</description>
      </entry>
    </ReferenceTable>
  </PPReference>
  <RevisionHistory>
    <entry>
      <version>1.0 DRAFT</version>
      <date>2018-06-15</date>
      <subject>Initial Release</subject>
    </entry>
  </RevisionHistory>
  <chapter title="Introduction" id="int">
    <section title="Overview" id="ppoverview"> This Extended Package (EP) describes security
      requirements for an encryption management product that is configurable for the data it encrypts and is
      intended to provide a minimal, baseline set of requirements that are targeted at mitigating
      well defined and described threats. However, this EP is not complete in itself, but rather
      extends the Protection Profile for Application Software (<cite linkend="bibAppPP"/>). This
      introduction will describe the features of a compliant Target of Evaluation, and will also
      discuss how this EP is to be used in conjunction with the <cite linkend="bibAppPP"/>. </section>
    <section id="glossary" title="Terms">The following sections provide both Common Criteria and
      technology terms used in this Extended Package. 
        <glossary>
          <entry>
            <term><abbr title="Common Criteria">CC</abbr></term>
            <description>Common Criteria for Information Technology Security
              Evaluation.</description>
          </entry>
          <entry>
            <term><abbr title="Extended Package">EP</abbr></term>
            <description>An implementation-independent set of security requirements for a category
              of products, which extends those in a Protection Profile.</description>
          </entry>
          <entry>
            <term><abbr title="Protection Profile">PP</abbr></term>
            <description>An implementation-independent set of security requirements for a category
              of products.</description>
          </entry>
          <entry>
            <term><abbr title="Security Target">ST</abbr></term>
            <description>A set of implementation-dependent security requirements for a specific
              product.</description>
          </entry>
          <entry>
            <term><abbr title="Target of Evaluation">TOE</abbr></term>
            <description>The product under evaluation. In this case, application software and its
              supporting documentation.</description>
          </entry>
          <entry>
            <term><abbr title="TOE Security Functionality">TSF</abbr></term>
            <description>The security functionality of the product under evaluation.</description>
          </entry>
          <entry>
            <term><abbr title="TOE Security Policy">TSP</abbr></term>
            <description>The set of rules that regulate how assets are managed, protected and
              distributed within a TOE.</description>
          </entry>
          <entry>
            <term><abbr title="TOE Summary Specification">TSS</abbr></term>
            <description>A description of how a <abbr linkend="TOE"/> satisfies the SFRs in a <abbr
                linkend="ST"/>. </description>
          </entry>
          <entry>
            <term><abbr title="Security Functional Requirement">SFR</abbr></term>
            <description>A requirement for security enforcement by the <abbr linkend="TOE"/>.
            </description>
          </entry>
          <entry>
            <term><abbr title="Security Assurance Requirement">SAR</abbr></term>
            <description>A requirement to assure the security of the <abbr linkend="TOE"/>.
            </description>
          </entry>
      
     
          <entry>
            <term>Administrator</term>
            <description> Authorized Users with higher privileges and typically handle configuration
              and management functions, such as configuring and updating the TOE. </description>
          </entry>
          <entry>
            <term>Authorization factor (AF) </term>
            <description> a value submitted by the user, present on the host, or present on a
              separate protected hardware physical device used to establish that the user (and
              potentially the host) is in the community authorized to use the TOE. The authorization
              factors are used to generate the KEK. Note that these AFs are not used to establish
              the particular identity of the user. </description>
          </entry>
          <entry>
            <term>Authorized User </term>
            <description> a user who has been provided Authorization factors by the administrator to
              use the TOE. </description>
          </entry>
          <entry>
            <term>Data Encryption </term>
            <description> the process of encrypting all user data written to volatile memory.
            </description>
          </entry>
          <entry>
            <term>Deterministic Random Bit Generator (DRBG)</term>
            <description> a cryptographic algorithm that produces a sequence of bits from a secret
              initial seed value. Without knowledge of the seed value, the output sequence should be
              unpredictable up to the security level of the DRBG. </description>
          </entry>
          <entry>
            <term>Entropy Source </term>
            <description> this cryptographic function provides a seed for a random bit generator by
              accumulating the outputs from one or more noise sources. The functionality includes a
              measure of the minimum work required to guess a given output and tests to ensure that
              the noise sources are operating properly. </description>
          </entry>
          <entry>
            <term>File/Set of files </term>
            <description> the user data that is selected to be encrypted, which can include
              individual file encryption (with a FEK per file) or a set of files encrypted with a
              single FEK. </description>
          </entry>
          <entry>
            <term>File Authentication Key (FAK) </term>
            <description> the secret value used as input when a keyed hash function is used to
              perform data authentication. </description>
          </entry>
          <entry>
            <term>File Encryption Key (FEK) </term>
            <description> the key that is used by the encryption algorithm to encrypt the selected
              user data on the host machine. </description>
          </entry>
          <entry>
            <term>Key Encryption Key (KEK) </term>
            <description> the key that is used to encrypt the FEK. </description>
          </entry>
          <entry>
            <term>Keying material </term>
            <description> the KEK, FEK, authorization factors and random numbers or any other values
              from which keys are derived. </description>
          </entry>
          <entry>
            <term>Noise Source </term>
            <description> the component of an RBG that contains the non-deterministic,
              entropy-producing activity. </description>
          </entry>
          <entry>
            <term>Operational Environment </term>
            <description> hardware and software that are outside the TOE boundary that support the
              TOE functionality and security policy, including the host platform, its firmware, and
              the operating system. </description>
          </entry>
          <entry>
            <term>Password </term>
            <description> A short string of characters used for authorization to the data on the
              device. </description>
          </entry>
          <entry>
            <term>Passphrase</term>
            <description> A long string of characters that may be used for authorization to the data
              on the device. </description>
          </entry>
          <entry>
            <term>Random Bit Generator (RBG) </term>
            <description> a cryptographic function composed of an entropy source and DRBG that is
              invoked for random bits needed to produce keying material </description>
          </entry>
          <entry>
            <term>Sensitive Data </term>
            <description> Any data of which the compromise with respect to loss, misuse, or
              unauthorized access to or modification of could adversely affect the interest of the
              TOE user. </description>
          </entry>
          <entry>
            <term>Shutdown </term>
            <description> power down or unintentional loss of power of the TOE or host platform.
            </description>
          </entry>
          <entry>
            <term>System files </term>
            <description> Files that reside on the host machine that are used in the operation of
              the file encryption software. </description>
          </entry>
          <entry>
            <term>Temporary File - </term>
            <description> a file created by an application for short term storage of sensitive data.
            </description>
          </entry>
          <entry>
            <term>Trusted Host </term>
            <description> Source/destination host configured and maintained to provide the TOE with
              appropriate IT security commensurate with the value of the user data protected by the
              TOE. </description>
          </entry>
          <entry>
            <term>Unauthorized User </term>
            <description> a user who has not been authorized to use the TOE and decrypt encrypted
              user data. </description>
          </entry>
          <entry>
            <term>User Data </term>
            <description> All data that originate on the host, or is derived from data that
              originate on the host, excluding system files and signed firmware updates from the TOE
              manufacturer. </description>
          </entry>
          <entry>
            <term>Volatile memory </term>
            <description> memory that loses its content when power is turned off. </description>
          </entry>
          <entry>
            <term>Zeroize</term>
            <description> this term is used to make a distinction between dereferencing a memory
              location and actively overwriting it with a constant. Keying material needs to be
              overwritten when it is no longer needed. </description>
          </entry>
        </glossary>
    </section>
    <section title="Compliant Targets of Evaluation" id="complianttargets">     
    The target of evaluation for this Module is the Enterprise Management (EM) function of
    an FE solution. The EM function is designed to augment the claims made in the File Encryption Module;
    therefore, this functionality is intended to be evaluated in conjunction with a TOE that also
    claims conformance to that module at minimum.
    The following sections provide an overview of the security functionality of this PP-module.</section>
    
    <section title="Use Cases" id="usecases">
      <subsection title="Usage and Major Security Features of the Target of Evaluation (TOE)"
        id="usagetoe"> 
          The use case for a product conforming to the FE Module is to protect data at rest on a device
          that is lost or stolen while powered off without any prior access by an adversary. The use case
          where an adversary obtains a device that is in a powered state and is able to make modifications
          to the environment or the TOE itself (e.g., evil maid attacks) is not addressed by that module. <h:br/>
          
          While that use case is still true for the Enterprise Management Module, this PP-module also
          expands the use case to include protecting the communications between the Enterprise
          Management Server and the client device through the use of a trusted channel. It also expands
          the use case to include the optional abilities of the EM to interact with the FE Client
          to direct it to perform sanitation of keys and material on the device or to issue a
          recovery credential to reset the authentication factor if it has been lost.
      </subsection>
      
        <subsection title="The TOE and Its Supporting Environment" id="supenv"> 
            The environment in which the EM functions is expected to exist is on a back end server, not
            on the system that contains the Client. It is expected to have secure access to a certified LDAP
            (e.g. Active Directory) and access to a certified means of storing key material when not in use.
            The EM shall not have the ability to access the secured stored key material without verification
            of access authority by the LDAP. <h:br/>
            The Operating System environment may make a full range of services available to the
            Enterprise Management Module, including hardware drivers, cryptographic libraries, and
            perhaps other services external to the TOE. <h:br/>
            The EM TOE may include or leverage features and functions within the operational
            environment. </subsection>
    </section>
    
  </chapter>
  <chapter title="Conformance Claims" id="conf">
    <cclaims>
      <cclaim id="Conformance Statement">
        <description> The Protection Profile for Application Software (App PP) defines the baseline
          Security Functional Requirements (SFRs) and Security Assurance Requirements (SARs) for
          application software products. This EP serves to extend the App PP baseline with
          additional SFRs and associated Assurance Activities specific to an email client. Assurance
          Activities are the actions that the evaluator performs in order to determine an email
          client’s compliance to the SFRs.<h:br/> This EP conforms to Common Criteria <cite
            linkend="bibCC"/> for Information Technology Security Evaluation, Version 3.1, Revision
          4. It is CC Part 2 extended and CC Part 3 conformant. In order to be conformant to this
          EP, the ST must include all components in this EP and the associated App PP that are:
              <h:ul><h:li>unconditional (which are always required)</h:li>
            <h:li>selection-based (which are required when certain selections are chosen in the
              unconditional requirements)</h:li>
          </h:ul> and may include optional and/or objective components that are desirable but not
          required for conformance. </description>
      </cclaim>
    </cclaims>
    <section title="How to Use This Extended Package" id="howto"> As an EP of the <cite
        linkend="bibAppPP"/>, it is expected that the content of both this EP and the <cite
        linkend="bibAppPP"/> be appropriately combined in the context of each product-specific
      Security Target. This EP has been specifically defined such that there should be no difficulty
      or ambiguity in so doing. An ST must identify the applicable versions of the <cite
        linkend="bibAppPP"/> (see http://www.niap-ccevs.org/pp/ for the current version) and this EP
      in its conformance claims. When requirements are referenced from the <cite linkend="bibAppPP"
      />, a short notation is included. </section>
  </chapter>
  
  <chapter title="Security Problem Description" id="spd"> The primary asset that is being protected
    is the sensitive user data stored on a system. The threat model thus focuses on a host machine
    that has been compromised by an unauthorized user. This section addresses threats to the TOE
    only. 
    
    <section title="Threats" id="threats"> A threat consists of a threat agent, an asset, and
      an adverse action of that threat agent on that asset. The model in this EP only addresses
      risks that arise from the host machine being compromised by an unauthorized user.<h:br/> For
      this EP, the TOE is not expected to defend against all threats related to malicious software
      that may reside in user data files. For instance, the TOE is not responsible for detecting
      malware in the data selected by the user for encryption (that is a responsibility of the host
      environment). Once the file encryption product is operational in a host system, the threats
      against the data from potentially malicious software on the host are also not in the threat
      model of this EP. For example, there are no requirements in this EP addressing a malicious
      host capturing a password-based authorization factor, nor a malicious process reading the
      memory of an application program that is operating on a decrypted file.<h:br/> Note that this EP
      does not repeat the threats identified in the <cite linkend="bibAppPP"/>, though they all
      apply given the conformance and hence dependence of this EP on the <cite linkend="bibAppPP"/>.
      Note also that while the <cite linkend="bibAppPP"/> contains only threats to the ability of
      the TOE to provide its security functions, this EP focuses on threats to resources in the
      operational environment. Together the threats of the AS PP and those defined in this EP define
      the comprehensive set of security threats addressed by a file encryption TOE. 
      <threats>
        <threat id="T.UNAUTHORIZED_DATA_ACCESS">
          <description>
            <h:b>Unauthorized Data Access:</h:b> The central functionality of the TOE is the protection
            of resources under its control through encryption. In a shared resource environment,
            users on a system may have access to administrative-level tools that are capable of
            over-riding a system’s access control protections. Further, if the system were to be
            lost or the system’s storage device stolen, the attacker could then look directly at the
            storage device using low-level forensic tools in an attempt to access data for which
            they are not authorized. However, the need to protect the data in these scenarios should
            not interfere with the data-owner’s (or another user that has been granted access to
            those data) ability to read or manipulate the data. </description>
          <objective-refer ref="O.PROTECT_DATA">
            <rationale>The threat T.UNAUTHORIZED_DATA_ACCESS is countered by O.PROTECT_DATA as this
              provides for encyption of data.</rationale>
          </objective-refer>
          <objective-refer ref="O.MANAGE">
            <rationale>The threat T.UNAUTHORIZED_DATA_ACCESS is countered by O.MANAGE as this
              ensures proper management functionality.</rationale>
          </objective-refer>
        </threat>
        <threat id="T.KEYING_MATERIAL_COMPROMISE">
          <description>
            <h:b>Compromise of Keying Material:</h:b> Attacks against the encryption product could take
            several forms; for example, if there is a weakness in the random number generation
            mixing algorithm or the data sources used in random number generation are guessable,
            then the output may be guessable as well. If an attacker can guess the output of the
            pseudorandom number generator (PRNG) at the time an encryption key is made, then the
            output may be used to recreate the keying material and decrypt the protected files. As
            the encryption program runs, it will store a variety of information in memory. Some of
            this information, such as random bit generation (RBG) inputs, RBG output, copies of the
            plaintext file, and other keying material, could be very valuable to an attacker who
            wishes to decrypt an encrypted file. If the encryption product does not wipe these
            memory spaces appropriately, an attacker may be able to recreate the encryption key and
            access encrypted files. </description>
          <objective-refer ref="O.KEY_MATERIAL_PROTECTION">
            <rationale>The threat T.KEYING_MATERIAL_COMPROMISE is countered by O.KEY_MATERIAL_PROTECTION as this
              provides for protection of keys.</rationale>
          </objective-refer>
        </threat>
        <threat id="T.UNSAFE_AUTHFACTOR_VERIFICATION">
          <description>
            <h:b>Flawed Authentication Factor Verification:</h:b> When a user enters an authorization
            factor, the TOE is required to ensure that the authorization factor is valid prior to
            providing any data to the user; the purpose of verification is to ensure the FEK is
            correctly derived. If the data is decrypted with an incorrectly derived FEK (the FEK is
            conditioned from the password/passphrase or is decrypted by the KEK), then unpredictable
            data will be provided to the user. If verification is not performed in a secure manner,
            keying material or user data may be exposed or weakened. </description>
          <objective-refer ref="O.SAFE_AUTHFACTOR_VERIFICATION">
            <rationale>The threat T.UNSAFE_AUTHFACTOR_VERIFICATION is countered by O.SAFE_AUTHFACTOR_VERIFICATION as this
              provides for properly supported authentication factors.</rationale>
          </objective-refer>
        </threat>
        <threat id="T.KEYSPACE_EXHAUST">
          <description>
            <h:b>Brute Force Attack:</h:b> The protection of the data involves encrypting said data
            assuming an attacker may have significant computing resources at their disposal. Several
            ciphers have already been broken through brute-force attacks because the length of the
            keys used in those ciphers was too short to provide protection against a concerted
            computing effort to discover those keys. Because protection of the data may rely on a
            chaining of keys and encryption mechanisms, there are many opportunities for brute force
            attacks against each potential key in the chain, such that the weakest link in the chain
            of factors/keys will determine the overall strength against a brute force attack.
          </description>
          <objective-refer ref="O.FEK_SECURITY">
            <rationale>The threat T.KEYSPACE_EXHAUST is countered by O.FEK_SECURITY as this
              makes brute force attacks infeasible.</rationale>
            </objective-refer>
        </threat>
        <threat id="T.PLAINTEXT_COMPROMISE">
          <description>
            <h:b>Plaintext Compromise:</h:b> Unlike full disk encryption, selectable encryption products
            also need to protect against data leaks to other applications on the machine. Many file
            creators and editors store temporary files as the user is working on a file, and restore
            files if the machine experiences an interrupt while a file is open. Any of these files,
            if not properly protected or deleted, could leak information about a protected file to
            an attacker. Other applications might also access volatile or non-volatile memory
            released by the file encryption product, and the software used to create files prior to
            encryption may retain information about the file even after it has been encrypted. As
            the user creates and saves a new document, the plaintext will be stored on the machine's
            hard drive. An attacker could then search for the plaintext of the sensitive, encrypted
            information. An attacker may not even have to access the encrypted file for the
            protected information to be compromised. When the user wishes to encrypt the document,
            this plaintext file should be replaced with the new encrypted version. For non-mobile
            devices, it is expected that if the volatile and/or non-volatile memory space where the
            plaintext file was stored is merely released back to the machine without being first
            wiped clean of the data that was stored there, then the information the user wishes to
            protect will still be accessible. While protection of the encryption algorithm itself is
            vital, memory must also be properly managed by the file encryption product or the TOE
            platform in order for security to remain intact. For mobile devices, it is assumed that
            the File Encryption product will not be responsible for providing memory management
            cleanup and the environment's platform has met the Mobile Device Fundamentals Protection
            Profile.<h:br/> Additionally, some encryption products offer to create backup files. These
            files are meant to be used in the event an encrypted file becomes corrupted and
            incapable of being decrypted. Each backup file is a valuable resource to protect
            information that the user cannot afford to lose; however, it also may provide another
            route for an attacker to access the encrypted information. If the backup file is
            insufficiently protected, then the attacker may choose to attempt to break into it,
            rather than the copy of the encrypted file that the user would typically access.
          </description>
          <objective-refer ref="O.WIPE_MEMORY">
            <rationale>The threat T.PLAINTEXT_COMPROMISE is countered by O.WIPE_MEMORY as this
              provides data cleanup.</rationale>
          </objective-refer>
        </threat>
        <threat id="T.PLAINTEXT_DATA_SPOOFING">
          <description>
            <h:b>Data Spoofing (optional):</h:b> For certain modes of encryption, it is possible for a
            malicious person to modify ciphertext data to force unintended modification to the
            underlying plaintext data, without the user being notified. There are various failures
            that may occur on the part of the TOE, to include: failure to verify the integrity of
            the data prior to decryption, failure to provide integrity on the sensitive data,
            failure to use a cryptographic or secure hashing code and failure to differentiate the
            File Authentication Key (FAK) from the FEK; the FAK is any secret value used as input to
            a keyed hashing function or as part of an asymmetric authentication process.
          </description>
          <objective-refer ref="O.DATA_AUTHENTICATION">
            <rationale>The threat T.PLAINTEXT_DATA_SPOOFING is countered by O.DATA_AUTHENTICATION as this
              provides data authentication.</rationale>
          </objective-refer>
        </threat>
      </threats>
    </section>
      <section title="Assumptions" id="assumptions">
        <assumptions>
          <assumption id="A.AUTH_FACTOR">
            <description>An authorized user will be responsible for ensuring that all externally
              derived authorization factors have sufficient strength and entropy to reflect the
              sensitivity of the data being protected. This can apply to password- or
              passphrase-based, ECC CDH, and RSA authorization factors.</description>
            <objective-refer ref="OE.AUTHORIZATION_FACTOR_STRENGTH">
              <rationale>The operational environment objective OE.AUTHORIZATION_FACTOR_STRENGTH is realized through A.AUTH_FACTOR.</rationale>
            </objective-refer>
          </assumption>
          <assumption id="A.EXTERNAL_FEK_PROTECTION">
            <description>External entities that implement ECC CDH or RSA that are used to encrypt
              and decrypt a FEK have the following characteristics: <h:br/>meet National requirements
              for the cryptographic mechanisms implemented; <h:br/>require authentication via a pin or
              other mechanisms prior to allowing access to protected information (the decrypted FEK,
              or the private key); <h:br/>implement anti-hammer provisions where appropriate (for
              example, when a pin is the authentication factor). </description>
            <objective-refer ref="OE.STRONG_ENVIRONMENT_CRYPTO">
              <rationale>The operational environment objective OE.STRONG_ENVIRONMENT_CRYPTO is realized through A.EXTERNAL_FEK_PROTECTION.</rationale>
              </objective-refer>
          </assumption>
          <assumption id="A.SHUTDOWN">
            <description>An authorized user will not leave the machine in a mode where sensitive
              information persists in non-volatile storage (e.g., power it down or enter a power
              managed state, such as a “hibernation mode”).</description>
            <objective-refer ref="OE.POWER_SAVE">
              <rationale>The operational environment objective OE.POWER_SAVE is realized through A.SHUTDOWN.</rationale>
            </objective-refer>
          </assumption>
          <assumption id="A.STRONG_OE_CRYPTO">
            <description>All cryptography implemented in the Operational Environment and used by the
              TOE will meet the requirements listed in Appendix C of this EP. This includes
              generation of external token authorization factors by a RBG.</description>
            <objective-refer ref="OE.STRONG_ENVIRONMENT_CRYPTO">
              <rationale>The operational environment objective OE.STRONG_ENVIRONMENT_CRYPTO is realized through A.STRONG_OE_CRYPTO.</rationale>
            </objective-refer>
          </assumption>
          <assumption id="A.FILE_INTEGRITY ">
            <description>When the file is in transit, it is not modified, otherwise if that
              possibility exists, the appropriate selections in Appendix B are chosen for Data
              Authentication.</description>
            <objective-refer ref="OE.STRONG_ENVIRONMENT_CRYPTO">
              <rationale>The operational environment objective OE.STRONG_ENVIRONMENT_CRYPTO is realized through A.STRONG_OE_CRYPTO.</rationale>
            </objective-refer>
          </assumption>
        </assumptions>
      </section>
  
  </chapter>
  <chapter title="Security Objectives" id="obj">
    <section title="Security Objectives for the TOE" id="objtoe"> The Security Problem described in
      Section 2 will be addressed by a combination of cryptographic capabilities. Compliant TOEs
      will provide security functionality that addresses threats to the TOE and enforces policies
      that are imposed by law and regulation. The following subsections provide a description of the
      security objectives required to meet the threats/policies previously discussed. The
      description of these security objectives are in addition to that described in the <cite
        linkend="bibAppPP"/>.<h:br/> Note: in each subsection below particular security objectives are
      identified (highlighted by O.) and they are matched with the associated security functional
      requirements (SFRs) that provide the mechanisms to satisfy the objectives.<h:br/> The Security
      Objectives are the requirements for the Target of Evaluation (TOE) and for the Operational
      Environment derived from the threats in Section 2. 
      <SOs>
        <SO id="O.KEY_MATERIAL_PROTECTION">
          <description>
            <h:b>Protection of Key Material:</h:b> The TOE must ensure that plaintext key material used
            in performing its operations is cleared once it is no longer needed. Key material must
            be identified; its use and intermediate storage areas must also be identified; and then
            those storage areas must be cleared in a timely manner and without interruptions. For
            example, authorization factors are only needed until the KEK is formed; at that point,
            volatile memory areas containing the authorization factors should be cleared. </description>
          <component-refer ref="FCS_CKM_EXT.4"/>
          <component-refer ref="FPT_KYP_EXT.1"/>
        </SO>
        <SO id="O.FEK_SECURITY">
          <description>
            <h:b>Encryption Using a Strong FEK and KEK:</h:b> In order to ensure that brute force
            attacks are infeasible, the TOE must ensure that the cryptographic strength of the keys
            and authorization factors used to generate and protect the keys is sufficient to
            withstand attacks in the near-to-mid-term future. Password/passphrase complexity and
            conditioning requirements are also levied to help ensure that a brute force attack
            against these authorization factors (when used) has a similar level of resistance.
          </description>
          <component-refer ref="FCS_CKM_EXT.2"/>
          <component-refer ref="FCS_CKM_EXT.1"/>
          <component-refer ref="FCS_COP.1(1)"/>
          <component-refer ref="FCS_COP.1(5)"/>
          <component-refer ref="FCS_COP.1(7)"/>
          <component-refer ref="FCS_KDF_EXT.1"/>
          <component-refer ref="FCS_COP.1(8)"/>
          <component-refer ref="FCS_VAL_EXT.1"/>
          <component-refer ref="FCS_IV_EXT.1"/>
          <component-refer ref="FCS_KYC_EXT.1"/>
          <component-refer ref="FCS_CKM.1(A)"/>
          <component-refer ref="FCS_SMC_EXT.1 "/>
        </SO>
        <SO id="O.WIPE_MEMORY">
          <description>
            <h:b>Removal of Plaintext Data:</h:b> To address the threat of unencrypted copies of data
            being left in non-volatile memory or temporary files where it may be accessed by an
            unauthorized user, the TOE will ensure that plaintext data it creates is securely erased
            when no longer needed. The TOE’s responsibility is to utilize the appropriate TOE
            platform method for secure erasure, but the TOE is not responsible for verifying that
            the secure erasure occurred as this will be the responsibility of the TOE platform. </description>
          <component-refer ref="FDP_PRT_EXT.1"/>
          <component-refer ref="FDP_PRT_EXT.2"/>
          <component-refer ref="FDP_PRT_EXT.3"/>
        </SO>
        <SO id="O.PROTECT_DATA">
          <description>
            <h:b>Protection of Data:</h:b> The TOE will encrypt data to protect the data from
            unauthorized access. Encrypting the file or set of files will protect the user data even
            when low-level tools that bypass operating system protections such as discretionary and
            mandatory access controls are available to an attacker. Users that are authorized to
            access the data must provide authorization factors to the TOE in order for the data to
            be decrypted and provided to the user. </description>
          <component-refer ref="FCS_COP.1(1)"/>
          <component-refer ref="FCS_IV_EXT.1"/>
          <component-refer ref="FDP_PRT_EXT.1"/>
          <component-refer ref="FDP_PRT_EXT.2"/>
          <component-refer ref="FDP_PM_EXT.1"/>
          <component-refer ref="FDP_PRT_EXT.2"/>
          <component-refer ref="FDP_PRT_EXT.3"/>
          <component-refer ref="FIA_FCT_EXT.1(1)"/>
        </SO>
        <SO id="O.SAFE_AUTHFACTOR_VERIFICATION">
          <description>
            <h:b>Safe Authentication Factor Verification:</h:b> In order to avoid exposing information
            that would allow an attacker to compromise or weaken any factors in the chain keys
            generated or protected by the authorization factors, the TOE will verify the valid
            authorization factor prior to the FEK being used to decrypt the data being
            protected.
          </description>
          <component-refer ref="FCS_VAL_EXT.1"/>
          <component-refer ref="FIA_AUT_EXT.1"/>
        </SO>
        <SO id="O.DATA_AUTHENTICATION">
          <description>
            <h:b>Data Authentication:</h:b> For certain encryption modes, it is feasible to maliciously
            modify the ciphertext data to cause unintended modifications to plaintext data, without
            user notification. The TOE may provide a method for authenticating the sensitive data
            and using an approved data authentication method. </description>
          <component-refer ref="FCS_CKM_EXT.5"/>
          <component-refer ref="FCS_COP.1(6)"/>
          <component-refer ref="FDP_AUT_EXT.1"/>
          <component-refer ref="FDP_AUT_EXT.2"/>
          <component-refer ref="FDP_AUT_EXT.3"/>
        </SO>
        <SO id="O.MANAGE">
          <description>The TOE will provide all the functions and facilities necessary to support
            the authorized administrators in their management of the security of the TOE, and
            restrict these functions and facilities from unauthorized use.</description>
          <component-refer ref="FMT_SMF.1"/>
          <component-refer ref="FMT_MEC_EXT.1"/>
        </SO>
      </SOs>
    </section>
    
    <section title="Security Objectives for the TOE's Operational Environment" id="objenv"> The
      Operational Environment of the TOE implements technical and procedural measures to assist the
      TOE in correctly providing its security functionality (which is defined by the security
      objectives for the TOE). The security objectives for the Operational Environment consist of a
      set of statements describing the goals that the Operational Environment should achieve.<h:br/>
      This section defines the security objectives that are to be addressed by the IT domain or by
      non-technical or procedural means. The assumptions identified in Section 3 are incorporated as
      security objectives for the environment. <SOs>
        <SO id="OE.AUTHORIZATION_FACTOR_STRENGTH">
          <description>An authorized user will be responsible for ensuring that all externally
            derived authorization factors have sufficient strength and entropy to reflect the
            sensitivity of the data being protected. This can apply to password- or
            passphrase-based, ECC CDH, and RSA authorization factors.</description>
          <component-refer ref="FIA_AUT_EXT.1"/>
          <component-refer ref="FCS_VAL_EXT.1"/>
        </SO>
        <SO id="OE.POWER_SAVE">
          <description>The non-mobile operational environment must be configurable so that there
            exists at least one mechanism that will cause the system to power down after a period of
            time in the same fashion as the user electing to shutdown the system (A.SHUTDOWN). Any
            such mechanism (e.g., sleep, hibernate) that does not conform to this requirement must
            be capable of being disabled. <h:br/> The mobile operational environment must be
            configurable such that there exists at least one mechanism that will cause the system to
            lock upon a period of time. </description>
          <component-refer ref="FDP_PRT_EXT.1"/>
        </SO>
        <SO id="OE.STRONG_ENVIRONMENT_CRYPTO">
          <description>The Operating environment will provide a cryptographic function capability
            that is commensurate with the requirements and capabilities of the TOE.</description>
          <component-refer ref="FCS_KYC_EXT.1"/>
        </SO>
       </SOs>
    
    </section>
    <section title="Security Objectives Rationale" id="SOR">This section describes how the
      assumptions, threats, and organizational security policies map to the security objectives.
      <h:insertSPDCorrespondence/>
    </section>
  </chapter>

  <chapter title="Security Requirements" id="req">This chapter describes the security requirements
    which have to be fulfilled by the email client. Those requirements comprise functional
    components from Part 2 of <cite linkend="bibCC"/>. The following notations are used: <h:ul>
      <h:li>
        <h:b>Selection</h:b> (denoted by <h:i>italicized text</h:i>): is used to select one or more options
        provided by the [CC] in stating a requirement.</h:li>
      <h:li>
        <h:b>Assignment</h:b> operation (denoted by <h:i>italicized text</h:i>): is used to assign a
        specific value to an unspecified parameter, such as the length of a password. Showing the
        value in square brackets indicates assignment.</h:li>
      <h:li>
        <h:b>Iteration</h:b> operation: are identified with a number inside parentheses (e.g.
        "(1)").</h:li>
    </h:ul>
    <section title="Security Functional Requirements for the File Encryption Application (TOE)"
      id="SFRs"> As indicated in Section 1.3.2, security functional requirements in the main body of
      the EP are divided into those that must be satisfied by the file encryption application (the
      TOE), and those that must be satisfied by either the TOE or the platform on which it runs.
      This section contains the requirements that must be met by the TOE. 
      
      <subsection title="Cryptographic Support (FCS)" id="fcs">
        <f-component id="FCS_CKM_EXT.2" name="Cryptographic key generation (FEK)">
          <f-element id="FCS_CKM_EXT.2.1">
            <title> The TSF shall 
              <selectables>
                <selectable> accept FEK from an enterprise management server</selectable>
                <selectable> generate FEK cryptographic keys <h:br/>
                  <selectables linebreak="yes">
                    <selectable> using a Random Bit Generator as specified in FCS_RBG_EXT.1 (from the AS
                      PP) and with entropy corresponding to the security strength of AES key sizes of
                      [selection: 128 bit, 256 bit]; </selectable>
                    <selectable> derived from a password/passphrase that is conditioned as defined in FCS_CKM.1(A) </selectable>
                  </selectables>
                </selectable>
              </selectables>
            </title>
          </f-element>
          <f-element id="FCS_CKM_EXT.2.2">
            <title>The TSF shall create a unique FEK for each file (or set of files) using the
              mechanism on the client as specified in FCS_CKM_EXT.2.1.</title>
            <note role="application"> For the first selection, the TOE may accept FEKS from an file encryption enterprise managment server.
              For the second selection, the key generation capability of the TOE uses a RBG implemented on the TOE device (FCS_RBG_EXT.1 from the <cite
                linkend="bibAppPP"/>)or the key is derived from the conditioning of a password/passphrase.<h:br/>
               </note>
            <aactivity>
              <h:h4>TSS</h:h4> 
              FCS_CKM_EXT.2.1: The evaluator shall review the TSS to determine that a
              description covering how and when a FEKs are generated exists. The description must
              cover all environments on which the TOE is claiming conformance, and include any
              preconditions that must exist in order to successfully generate the FEKs. The evaluator shall verify 
              that the description of how the FEK are generated is consistent with
              the instructions in the AGD guidance, and any differences that arise from different
              platforms are taken into account. <h:br/> <h:br/> 
              
              Conditional: <h:br/> 
              If using a RBG was selected the evaluator verify the TSS to determine that it describes how the functionality
              described by FCS_RBG_EXT.1 (from the <cite linkend="bibAppPP"/>) is invoked to
              generate FEK. To the extent possible from the description of the RBG functionality in
              FCS_RBG_EXT.1 (from the AS PP), the evaluator shall determine that the key size being
              requested is identical to the key size and mode to be used for the
              decryption/encryption of the user data (FCS_COP.1(1)).  <h:br/> <h:br/> 
              
              Conditional: <h:br/>               
              If derived from a password/password is selected the examination of the TSS section is performed as
              part of FCS_CKM.1(A) assurance activities. <h:br/>  <h:br/> 
              
              
              FCS_CKM_EXT.2.2: The evaluator shall
              verify the TSS describes how a FEK is created for a protected
              resource and associated with that resource. The evaluator confirms that—per this description—the
              FEK is unique per resource (file or set of files) and that the FEK is created using
              the mechanisms specified in). <h:br/> 
              
              <h:h4>Guidance</h:h4> The evaluator shall review the
              instructions in the AGD guidance to determine that any explicit actions that need to
              be taken by the user to create a FEK exist—taking into account any differences that
              arise from different platforms—and are consistent with the description in the TSS.
              
              
              <h:h4>Tests</h:h4> None. 
            </aactivity>
          </f-element>
        </f-component>
      
        
        
        <f-component id="FCS_CKM_EXT.1" name="Key Encrypting Key (KEK) Support" status="sel-based">
        <selection-depends req="FCS_KYC_EXT.1.1"  ids="HASKEK"/>
        <f-element id="FCS_CKM_EXT.1.1 ">
          <title> The TSF shall 
            <selectables>
              <selectable>accept KEK from an enterprise management server</selectable>
              <selectable> generate KEK cryptographic keys <h:br/>
                <selectables linebreak="yes">
                  <selectable> using a Random Bit Generator as specified in FCS_RBG_EXT.1 (from the AS
                    PP) and with entropy corresponding to the security strength of AES key sizes of
                    [selection: 128 bit, 256 bit]; </selectable>
                  <selectable> derived from a password/passphrase that is conditioned as defined in FCS_CKM.1(A) </selectable>
                </selectables>
              </selectable>
            </selectables>
          </title>
          <note>This requirement shall be included in STs in which KEKs originating from is chosen in FCS_KYC_EXT.1.1. </note>
            <aactivity>
              FCS_CKM_EXT.2.1: The evaluator shall review the TSS to determine that a
              description covering how and when a KEKs are generated exists. The description must
              cover all environments on which the TOE is claiming conformance, and include any
              preconditions that must exist in order to successfully generate the KEKs. The evaluator shall verify 
              that the description of how the KEK are generated is consistent with
              the instructions in the AGD guidance, and any differences that arise from different
              platforms are taken into account. <h:br/> <h:br/> 
              
              Conditional: <h:br/> 
              If using a RBG was selected the evaluator verify the TSS to determine that it describes how the functionality
              described by FCS_RBG_EXT.1 (from the <cite linkend="bibAppPP"/>) is invoked to
              generate FEK. To the extent possible from the description of the RBG functionality in
              FCS_RBG_EXT.1 (from the AS PP), the evaluator shall determine that the key size being
              requested is identical to the key size and mode to be used for the
              decryption/encryption of the user data (FCS_COP.1(1)).  <h:br/> <h:br/> 
              
              Conditional: <h:br/>               
              If derived from a password/password is selected the examination of the TSS section is performed as
              part of FCS_CKM.1(A) assurance activities. <h:br/>  <h:br/> 
              
              <h:h4>Guidance</h:h4> The evaluator shall review the
              instructions in the AGD guidance to determine that any explicit actions that need to
              be taken by the user to create a KEK exist—taking into account any differences that
              arise from different platforms—and are consistent with the description in the TSS.
              
              <h:h4>Tests</h:h4> None. 
            </aactivity>
        </f-element>
      </f-component>
        
        
        <f-component id="FCS_CKM_EXT.4" name="Extended: Cryptographic Key Destruction">
          <f-element id="FCS_CKM_EXT.4.1">
            <title>The TSF shall destroy cryptographic keys in accordance with a specified cryptographic key destruction method 
              <selectables linebreak="yes">
                <selectable> For volatile memory, the destruction shall be executed by a
                  <selectables>
                    <selectable>single overwrite consitting of 
                      <selectables>
                        <selectable>a pseudo-random pattern using the TSF's RBG</selectable>
                        <selectable>zeros</selectable>
                        <selectable>ones</selectable>
                        <selectable>new value of a key</selectable>
                        <selectable><assignable>any value that does not contain any CSP</assignable></selectable>
                      </selectables>
                    </selectable>
                    <selectable>removal of power to the memory</selectable>
                    <selectable>destruction of reference to the key directly followed by a request for garbage collection</selectable>
                  </selectables>
                </selectable>
                <selectable> For non-volatile memory that consists of the invocation of an interface provided by the underlying platform that
                  <selectables>
                    <selectable>logically addresses the storage locatoin of the key and performs a
                      <selectables>
                        <selectable>single</selectable>
                        <selectable><assignable>ST author defined multi-pass</assignable></selectable>
                      </selectables>
                      overwrite consisting of 
                      <selectables>
                        <selectable>a pseudo-random pattern using the TSF's RBG</selectable>
                        <selectable>zeros</selectable>
                        <selectable>ones</selectable>
                        <selectable>new value of a key</selectable>
                        <selectable><assignable>any value that does not contain any CSP</assignable></selectable>
                      </selectables>
                    </selectable>
                    <selectable>instructs the underlying platform to destory the abstraction the represents the key</selectable>
                  </selectables>
                  
                </selectable>
              </selectables>
            </title>
            <note role="application"> The interface referenced in the requirement could take different forms, 
              the most likely of which is an application programming interface to an OS kernel. There may be 
              various levels of abstraction visible. For instance, in a given implementation, selection a, the 
              application may have access to the file system details and may be able to logically address 
              specific memory locations. In another implementation, selection b, the application may simply 
              have a handle to a resource and can only ask the platform to delete the resource, as may be the 
              case with a platforms secure key store. Selection b should only be used for the most restricted access. 
              The level of detail to which the TOE has access will be reflected in the TSS section of the ST.
              
              Several selections allow assignment of a ‘value that does not contain any CSP’. This means that 
              the TOE uses some other specified data not drawn from a source that may contain key material or 
              reveal information about key material, and not being any of the particular values listed as other 
              selection options. The point of the phrase ‘does not contain any CSP’ is to ensure that the 
              overwritten data is carefully selected, and not taken from a general ‘pool’ that might contain 
              current or residual data that itself requires confidentiality protection. </note>
            
            <aactivity>
              <h:h4>TSS</h:h4> The evaluator examines the TSS to ensure it describes how the keys are managed in volatile memory. 
              This description includes details of how each identified key is introduced into volatile memory (e.g. by derivation 
              from user input, or by unwrapping a wrapped key stored in non-volatile memory) and how they are overwritten.
              
              The evaluator shall check to ensure the TSS lists each type of key that is stored in in non-volatile memory, and 
              identifies how the TOE interacts with the underlying platform to manage keys (e.g., store, retrieve, destroy). 
              The description includes details on the method of how the TOE interacts with the platform, including an identification 
              and description of the interfaces it uses to manage keys (e.g., file system APIs, platform key store APIs).
              
              The evaluator examines the interface description for each different media type to ensure that the 
              interface supports the selection(s) and description in the TSS.
              
              If the ST makes use of the open assignment and fills in the type of pattern that is used, the evaluator 
              examines the TSS to ensure it describes how that pattern is obtained and used. The evaluator shall 
              verify that the pattern does not contain any CSPs.
              
              The evaluator shall check that the TSS identifies any configurations or 
              circumstances that may not strictly conform to the key destruction requirement.
              
              <h:h4>Guidance</h:h4> There are a variety of concerns that may prevent or delay key destruction in some cases.
              
              The evaluator shall check that the guidance documentation identifies configurations or circumstances that may 
              not strictly conform to the key destruction requirement, and that this description is consistent with the 
              relevant parts of the TSS and any other relevant Required Supplementary Information.
              
              The evaluator shall check that the guidance documentation provides guidance on situations where key 
              destruction may be delayed at the physical layer and how such situations can be avoided or mitigated if possible.
              
              Some examples of what is expected to be in the documentation are provided here. 
              
              When the TOE does not have full access to the physical memory, it is possible that the storage may be implementing 
              wear-leveling and garbage collection. This may create additional copies of the key that are logically inaccessible 
              but persist physically. In this case, to mitigate this the drive should support the TRIM command and implements 
              garbage collection to destroy these persistent copies when not actively engaged in other tasks.
              
              Drive vendors implement garbage collection in a variety of different ways, as such there is a variable amount of time 
              until data is truly removed from these solutions. There is a risk that data may persist for a longer amount of time 
              if it is contained in a block with other data not ready for erasure. To reduce this risk, the operating system and 
              file system of the OE should support TRIM, instructing the non-volatile memory to erase copies via garbage collection 
              upon their deletion. If a RAID array is being used, only set-ups that support TRIM are utilized. If the drive is 
              connected via PCI-Express, the operating system supports TRIM over that channel.
              
              The drive should be healthy and contains minimal corrupted data and should be end of lifed before a significant 
              amount of damage to drive health occurs, this minimizes the risk that small amounts of 
              potentially recoverable data may remain in damaged areas of the drive.
              
              <h:h4>Tests</h:h4> 
              These tests are only for key destruction provided by the application, test 2 does not apply to any keys using the selection "new value of a key": 
              <testlist>
                <test>Test 1: Applied to each key held as in volatile memory and subject to destruction by overwrite by the 
                  TOE (whether or not the value is subsequently encrypted for storage in volatile or non-volatile memory). 
                  In the case where the only selection made for the destruction method key was removal of power, then this test is unnecessary. 
                  
                  The evaluator shall:
                  
                  Record the value of the key in the TOE subject to clearing.
                  
                  Cause the TOE to perform a normal cryptographic processing with the key from Step #1.
                  
                  Cause the TOE to clear the key.
                  
                  Cause the TOE to stop the execution but not exit.
                  
                  Cause the TOE to dump the entire memory of the TOE into a binary file.
                  
                  Search the content of the binary file created in Step #5 for instances of the known key value from Step #1.
                  
                  Steps 1-6 ensure that the complete key does not exist anywhere in volatile memory. If a copy is found, then the test fails.</test>
                
                <test> Test 2: [Contitional] If new value of a key is selected this test does not apply. 
                  Applied to each key help in non-volatile memory and subject to destruction by the TOE. 
                  The evaluator shall use special tools (as needed), provided by the TOE developer if necessary, to ensure the tests function as intended.
                  
                  Identify the purpose of the key and what access should fail when it is deleted. (e.g. the data encryption key being deleted would cause data decryption to fail.)
                  
                  Cause the TOE to clear the key.
                  
                  Have the TOE attempt the functionality that the cleared key would be necessary for.
                  
                  The test succeeds if step 3 fails.</test>
                  
                <test>Test 3:Applied to each key held in non-volatile memory and subject to destruction by overwrite by the TOE. The evaluator shall use a tool that provides a logical view of the media (e.g., MBR file system):
                  
                  Record the value of the key in the TOE subject to clearing.
                  
                  Cause the TOE to perform a normal cryptographic processing with the key from Step #1.
                  
                  Cause the TOE to clear the key.
                  
                  Search the logical view that the key was stored in for instances of the known key value from Step #1. If a copy is found, then the test fails. </test>
                  
                <test>Test 4: Applied to each key held as non-volatile memory and subject to destruction by overwrite by the TOE. The evaluator shall use a tool that provides a logical view of the media:
                  
                  Record the logical storage location of the key in the TOE subject to clearing.
                  
                  Cause the TOE to perform a normal cryptographic processing with the key from Step #1.
                  
                  Cause the TOE to clear the key.
                  
                  Read the logical storage location in Step #1 of non-volatile memory to ensure the appropriate pattern is utilized.
                  
                  The test succeeds if correct pattern is used to overwrite the key in the memory location. If the pattern is not found the test fails.</test>
              </testlist>
            </aactivity>
          </f-element>
          
          <f-element id="FCS_CKM_EXT.4.1(a)">
            <title>The TSF shall destroy all keys and key material when no longer needed.</title>
            
            <note role="application">Application Note: Keys, including intermediate keys and key material that are no longer
              needed are destroyed by using an approved method, FCS_CKM_EXT.4.1. Examples of keys are
              intermediate keys, submasks. There may be instances where keys or key material
              that are contained in persistent storage are no longer needed and require destruction. 
              Base on their implementation, vendors will explain when certain keys are no longer needed. There
              are multiple situations in which key material is no longer necessary, for example, a wrapped
              key may need to be destroyed when a password is changed. However, there are instances
              when keys are allowed to remain in memory, for example, a device identification key. If a
              PIN was used for a SmartCard and managed by the TOE, ensuring that the PIN was properly destroyed shall be addressed.
            </note>
            <aactivity>
              <h:h4>TSS</h:h4>              
              The evaluator shall verify the TSS  includes a key lifecycle, that includes a
              description where key material reside, how the key material is used, how it is
              determined that keys and key material are no longer needed, and how the material is
              destroyed once it is not needed and that the documentation in the follows
              FCS_CKM_EXT.4.1 for the destruction.
              
                            
              <h:h4>Guidance</h:h4> None.
              
              <h:h4>Tests</h:h4> None.
              
            </aactivity>
          </f-element>
        </f-component>
       
        <f-component id="FCS_COP.1(1)" name="Cryptographic operation (Data Encryption)">
          <f-element id="FCS_COP.1.1(1)">
            <title>
              <h:b>Refinement:</h:b> The application shall <selectables>
                <selectable>implement platform-provided AES encryption</selectable>
                <selectable>implement AES encryption</selectable>
              </selectables> shall perform <h:b>data encryption and decryption</h:b> in accordance with
              a specified cryptographic algorithm <h:b>AES used in</h:b>
              <selectables linebreak="yes">
                <selectable> CBC (as defined in NIST SP 800-38A)</selectable>
                <selectable> GCM (as defined in NIST SP 800-38D)</selectable>
                <selectable> XTS (as defined in NIST SP 800-38E)</selectable>
              </selectables>
              <h:b>mode</h:b> and cryptographic key sizes <selectables linebreak="yes">
                <selectable>128 bits;</selectable>
                <selectable>256 bits</selectable>
              </selectables>
            </title>
            <note role="application"> The intent of this requirement is to specify the approved AES
              modes that the ST author may select for AES encryption of the appropriate information
              on the file encryption software. The first selection indicates whether the TOE or the
              platform performs the cryptographic operations. For the second selection, the
              ST author should indicate the mode or modes supported by the TOE/platform
              implementation. The third selection indicates the key size to be used, which is
              identical to that specified for FCS_CKM_EXT.1. <h:br/> 
                          
            When the XTS mode is selected, a cryptographic key of 256-bit or of 512-bit is allowed as
            specified in IEEE 1619. XTS-AES key is divided into two AES keys of equal size - for
            example, AES-128 is used as the underlying algorithm, when 256-bit key and XTS mode are
            selected. AES-256 is used when a 512-bit key and XTS mode are selected.
            
            </note>
            <aactivity>
              <h:h4>TSS</h:h4>
              <h:h4>Requirement met by the platform</h:h4> The evaluator examines the TSS to determine that it lists 
              the APIs used by the TOE to invoke the required functionality on the platform. The evaluator examines 
              the ST of all platforms claimed in the TOE ST to determine that the specific modes and key-sizes are 
              supported by the underlying platform, and that the APIs listed in the TSS section are those that were exercised on each underlying platform<h:br/>
              <h:h4>Requirement met by the TOE</h:h4> If multiple modes are supported, the evaluator 
              examines the TSS to determine how a specific mode/key-size is chosen by the end user. <h:br/>
              
              <h:h4>Guidance</h:h4> 
              <h:h4>Requirement met by the platform</h:h4>  If multiple modes are supported, the evaluator examines the Operational Guidance to 
              determine how a specific mode/key-size is chosen by the end user. 
              
              <h:h4>Tests</h:h4> <h:h4>Requirement met by the TOE</h:h4> 
              The assurance activity tests specified for AES in GCM or CBC mode in the underlying Application Software PP shall be performed in the case that "GCM" is selected in the requirement.
              
              <h:h4>XTS-AES Monte Carlo Test</h:h4> The
              evaluator shall test the encrypt functionality of XTS-AES for each combination of the
              following input parameter lengths: <h:h4>256 bit (for AES-128) and 512 bit (for AES-256)
                keys</h:h4>
              <h:h4>Three data unit (i.e., plaintext) lengths.</h:h4> One of the data unit lengths shall
              be a non-zero integer multiple of 128 bits, if supported. One of the data unit lengths
              shall be an integer multiple of 128 bits, if supported. The third data unit length
              shall be either the longest supported data unit length or 216 bits, whichever is
              smaller. <h:br/> using a set of 100 (key, plaintext and 128-bit random tweak value)
              3-tuples and obtain the ciphertext that results from XTS-AES encrypt. <h:br/> The
              evaluator may supply a data unit sequence number instead of the tweak value if the
              implementation supports it. The data unit sequence number is a base-10 number ranging
              between 0 and 255 that implementations convert to a tweak value internally. <h:br/> The
              evaluator shall test the decrypt functionality of XTS-AES using the same test as for
              encrypt, replacing plaintext values with ciphertext values and XTS-AES encrypt with
              XTS-AES decrypt. </aactivity>
          </f-element>
        </f-component>
        <f-component id="FCS_COP.1(5)" name="Cryptographic operation (Key Wrapping)" status="sel-based">
          <selection-depends req="FCS_KYC_EXT.1.1" ids="USEKEYWRA"/>
          <f-element id="FCS_COP.1.1(5)">
            <title>
              <h:b>Refinement:</h:b> The application shall 
              <selectables>
                <selectable>use platform-provided functionality to perform Key Wrapping</selectable>
                <selectable>implement functionality to perform Key Wrapping in accordance with a specified cryptographic algorithm [AES] in the following modes
                  <selectables linebreak="yes">
                    <selectable>Key Wrap</selectable>
                    <selectable>Key Wrap with Padding</selectable>
                    <selectable>GMC mode</selectable>
                    <selectable>CCM mode</selectable>
                  </selectables> and the cryptographic key size 
                  <selectables>
                    <selectable>128 bits (AES)</selectable>
                    <selectable>256 bits (AES)</selectable>
                  </selectables> that meet the following: 
                  <selectables linebreak="yes">
                    <selectable>“NIST SP 800-38C”</selectable>
                    <selectable>“NIST SP 800-38D”</selectable>
                    <selectable>“NIST SP 800-38F”</selectable>
                    <selectable>no other standards</selectable>
                  </selectables>
                </selectable>
              </selectables> 
            </title>
            <note role="application">This requirement is used in the body of the ST if the ST author chooses to
              use key wrapping in the key chaining approach that is specified in FCS_KYC_EXT.1.</note>
            <aactivity>
              <h:h4>TSS</h:h4>
              <h:h4>Conditional:</h:h4> If use platform provided functionality was selected, then the evaluator shall examine the TSS to verify that it
              describes how the FEK encryption/decryption is invoked. <h:br/>
              <h:h4>Conditional:</h:h4> If use impliment functionality was selected, The evaluator shall check that the TSS includes
              a description of encryption function(s) used for key wrapping. The evaluator should check that this description of the
              selected encryption function includes the key sizes and modes of operations as specified in the table above per row.
              The evaluator shall check that the TSS describes the means by which the TOE satisfies constraints on algorithm parameters
              included in the selections made for ‘cryptographic algorithm’ and ‘list of standards’. 
              
              The evaluator shall examine the TSS to ensure that the points at which key wrapping and decryption occurs are described,
              and that the complete data path for key wrapping is described. The evaluator checks that this description is consistent
              with the relevant parts of the TSS.
              
              Assessment of the complete data path for key wrapping includes confirming that the TSS describes the data flow from the
              device’s host interface to the device’s non-volatile memory storing the data, and gives information enabling the user data
              datapath to be distinguished from those situations in which data bypasses the data encryption engine (e.g. read-write
              operations to an unencrypted Master Boot Record area). The documentation of the data path should be detailed enough that
              the evaluator will thoroughly understand the parts of the TOE that the data passes through (e.g. different memory types,
              processors and co-processors), its encryption state (i.e. encrypted or unencrypted) in each part, and any places where
              the data is stored. For example, any caching or buffering of the data should be identified and distinguished from the
              final destination in non-volatile memory (the latter represents the location from which the host will expect to retrieve the data in future).
              
              
              <h:br/>
              <h:h4>Guidance</h:h4> If multiple encryption modes are supported, the evaluator examines the guidance documentation
              to determine that the method of choosing a specific mode/key size by the end user is described.
              
              <h:h4>Tests</h:h4> 
              The assurance activity tests specified for AES in GCM mode in the underlying Application Software PP shall be performed in the case that "GCM" is selected in the requirement.
              
              If AES Key Wrap is used to decrypt/encrypt the key, the evaluator shall examine the TSS to determine that it specifies that the implementation conforms to SP 800-38F with the appropriate (with or without padding) Key Wrap section using AES. 
              The evaluator shall also perform the verification procedures outlined in the testing methodology, "The Key Wrap Validation System." (http://csrc.nist.gov/groups/STM/cavp/documents/mac/KWVS.pdf)
              
              AES-CCM Tests
              These tests are intended to be equivalent to those described in the NIST document, “The CCM Validation System (CCMVS),” updated 9 Jan 2012, found at http://csrc.nist.gov/groups/STM/cavp/documents/mac/CCMVS.pdf.
              
              It is not recommended that evaluators use values obtained from static sources such as 
              http://csrc.nist.gov/groups/STM/cavp/documents/mac/ccmtestvectors.zip
              or use values not generated expressly to exercise the AES-CCM implementation.
              
              The evaluator shall test the generation-encryption and decryption-verification
              functionality of AES-CCM for the following input parameter and tag lengths:
              Keys: All supported and selected key sizes (e.g., 128, 256 bits).
              Associated Data: Two or three values for associated data length: The minimum (≥ 0 bytes) and maximum (≤ 32 bytes) supported associated data lengths, and 2^16 (65536) bytes, if supported.
              Payload: Two values for payload length: The minimum (≥ 0 bytes) and maximum (≤ 32 bytes) supported payload lengths.
              Nonces: All supported nonce lengths (7, 8, 9, 10, 11, 12, 13) in bytes.
              Tag: All supported tag lengths (4, 6, 8, 10, 12, 14, 16) in bytes.
              
              The testing for CCM consists of five tests. To determine correctness in each of the below tests, the evaluator shall compare the ciphertext with the result of encryption of the same inputs with a known good implementation.
              
              Variable Associated Data Test
              For each supported key size and associated data length, and any supported payload length, nonce length, and tag length, the evaluator shall supply one key value, one nonce value, and 10 pairs of associated data and payload values, and obtain the resulting ciphertext.
              
              Variable Payload Text
              For each supported key size and payload length, and any supported associated data length, nonce length, and tag length, the evaluator shall supply one key value, one nonce value, and 10 pairs of associated data and payload values, and obtain the resulting ciphertext.
              
              Variable Nonce Test
              For each supported key size and nonce length, and any supported associated data length, payload length, and tag length, the evaluator shall supply one key value, one nonce value, and 10 pairs of associated data and payload values, and obtain the resulting ciphertext.
              
              Variable Tag Test
              For each supported key size and tag length, and any supported associated data length, payload length, and nonce length, the evaluator shall supply one key value, one nonce value, and 10 pairs of associated data and payload values, and obtain the resulting ciphertext.
              
              Decryption-Verification Process Test
              To test the decryption-verification functionality of AES-CCM, for each combination of supported associated data length, payload length, nonce length, and tag length, the evaluator shall supply a key value and 15 sets of input plus ciphertext, and obtain the decrypted payload. Ten of the 15 input sets supplied should fail verification and five should pass.
              
            </aactivity>
          </f-element>
        </f-component>
        
        <f-component id="FCS_COP.1(7)" name="Cryptographic operation (Key Encryption)" status="sel-based">
          <selection-depends req="FCS_KYC_EXT.1.1" ids="USEKEYENC"/>
          <f-element id="FCS_COP.1.1(7)">
            <title>
              <h:b>Refinement:</h:b> The TSF shall 
              <selectables>
                 <selectable>use platform-provided functionality to perform Key Wrapping</selectable>
                 <selectable>perform [key encryption and decryption] in accordance with a specified cryptographic algorithm [AES used in CBC mode] and cryptographic key sizes 
                  <selectables linebreak="yes">
                    <selectable>128</selectable>
                    <selectable>256</selectable>
                  </selectables> bits] that meet the following:
                  [AES as specified in SP 800-38A.
                 </selectable>
             </selectables>
            </title>
              <note role="application">: This requirement is used in the body of the ST if the ST author chooses to
                use AES encryption/decryption for protecting the keys as part of the key chaining approach
                that is specified in FCS_KYC_EXT.1..</note>
            <aactivity>
              <h:h4>TSS</h:h4>
              <h:h4>Requirement met by the platform</h:h4> If the platform provides the FEK
              encryption/decryption, then the evaluator shall examine the TSS to verify that it
              describes how the FEK encryption/decryption is invoked. <h:br/>
              <h:h4>Requirement met by the TOE</h:h4> The evaluator shall verify the TSS includes a description of the key size used for
              encryption and the mode used for the key encryption <h:br/>
              <h:h4>Guidance</h:h4> None. 
              <h:h4>Tests</h:h4> 
              The assurance activity tests specified for AES in CBC mode in the underlying Application Software PP shall be performed in the case that "GCM" is selected in the requirement.
              </aactivity>
          </f-element>
        </f-component>
        
        <f-component id="FCS_KDF_EXT.1" name="Cryptographic operation (Key Derivation)" status="sel-based">
          <selection-depends req="FCS_KYC_EXT.1.1" ids="USEKEYDER"/>
          <f-element id="FCS_KDF_EXT.1.1">
            <title>
              <h:b>Refinement:</h:b> The TSF shall accept 
              <selectables>
                <selectable>a RNG generated submask as specified in FCS_RBG_EXT.1</selectable>
                <selectable>a conditioned password</selectable>
                <selectable>an imported submask</selectable>
              </selectables> to derive an intermediate key, as defined in [selection:
             <selectables>
               <selectable>NIST SP 800-108 
                 <selectables>
                   <selectable>KDF in Counter Mode</selectable>
                   <selectable>KDF in Feedback Mode</selectable>
                   <selectable>KDF in Double-Pipeline Iteration Mode</selectable>
                 </selectables>
               </selectable>
               <selectable>NIST SP 800-132</selectable>
             </selectables> using the keyed-hash functions specified in FCS_COP.1(c), such that the output is at least of
              equivalent security strength (in number of bits) to the FEK.
            </title>
            <note role="application">: Application Note: This requirement is used in the body of the ST if the ST author chooses to
              use key derivation in the key chaining approach that is specified in FCS_KYC_EXT.1.
              This requirement establishes acceptable methods for generating a new random key or an
              existing submask to create a new key along the key chain.</note>
            <aactivity>
              <h:h4>TSS</h:h4>
              The evaluator shall verify the TSS includes a description of the key derivation
                function and shall verify the key derivation uses an approved derivation mode and
                key expansion algorithm according to SP 800-108 and SP 800-132. <h:br/>
              <h:h4>Guidance</h:h4> None. 
              <h:h4>Tests</h:h4> None. 
              </aactivity>
          </f-element>
        </f-component>
        
        <f-component id="FCS_COP.1(8)" name="Cryptographic operation (Key Transport)" status="sel-based">
          <selection-depends req="FCS_KYC_EXT.1.1" ids="USEKEYTRA"/>
          <f-element id="FCS_COP.1.1(8)">
            <title>
              <h:b>Refinement:</h:b> The TSF shall perform [key transport] in accordance with a
              3 specified cryptographic algorithm [RSA in the following modes 
              <selectables>
                <selectable>KTS-OAEP</selectable>
                <selectable>KTS4-KEM-KWS</selectable>
              </selectables> and the cryptographic key size 
              <selectables>
                <selectable>2048</selectable>
                <selectable>3072</selectable>
              </selectables>bits that meet the following: [NIST SP 800-56B, Revision 1].
            </title>
            <note role="application">:  This requirement is used in the body of the ST if the ST author chooses to
              use key transport in the key chaining approach that is specified in FCS_KYC_EXT.1.
            </note>
            <aactivity>
              <h:h4>TSS</h:h4>
              The evaluator shall verify the TSS provides a high level description of the RSA
                scheme and the cryptographic key size that is being used, and that the asymmetric
                algorithm being used for key transport is RSA. If more than one scheme/key size are
                allowed, then the evaluator shall make sure and test all combinations of scheme and
                key size. There may be more than one key size to specify – an RSA modulus size
                (and/or encryption exponent size), an AES key size, hash sizes, MAC key/MAC tag
                size.
                If the KTS-OAEP scheme was selected, the evaluator shall verify that the TSS
                identifies the hash function, the mask generating function, the random bit generator,
                the encryption primitive and decryption primitive.
                If the KTS-KEM-KWS scheme was selected, the evaluator shall verify that the TSS
                identifies the key derivation method, the AES-based key wrapping method, the secret
                value encapsulation technique, and the random number generator. <h:br/>
              <h:h4>Guidance</h:h4> None. 
              <h:h4>Tests</h:h4> 
              For each supported key transport schema, the evaluator shall initiate at least 25
              sessions that require key transport with an independently developed remote instance
              of a key transport entity, using known RSA key-pairs. The evaluator shall observe
              traffic passed from the sender-side and to the receiver-side of the TOE, and shall
              perform the following tests, specific to which key transport scheme was employed.
              If the KTS-OAEP scheme was selected, the evaluator shall perform the following
              tests:
              1. The evaluator shall inspect each cipher text, C, produced by the RSA-OAEP
              encryption operation of the TOE and make sure it is the correct length, either
              256 or 384 bytes depending on RSA key size. The evaluator shall also feed into
              the TOE’s RSA-OEAP decryption operation some cipher texts that are the
              wrong length and verify that the erroneous input is detected and that the
              decryption operation exits with an error code.
              2. The evaluator shall convert each cipher text, C, produced by the RSA-OAEP
              encryption operation of the TOE to the correct cipher text integer, c, and use the
              decryption primitive to compute em = RSADP((n,d),c) and convert em to the
              encoded message EM. The evaluator shall then check that the first byte of EM
              is 0x00. The evaluator shall also feed into the TOE’s RSA-OEAP decryption
              operation some cipher texts where the first byte of EM was set to a value other
              than 0x00, and verify that the erroneous input is detected and that the decryption
              operation exits with an error code.
              3. The evaluator shall decrypt each cipher text, C, produced by the RSA-OAEP
              encryption operation of the TOE using RSADP, and perform the OAEP
              decoding operation (described in NIST SP 800-56B section 7.2.2.4) to recover
              HA’ || X. For each HA’, the evalutor shall take the corresponding A and the
              specified hash algorithm and verify that HA' = Hash(A). The evaluator
              should[shall?] also force the TOE to perform some RSA-OAEP decryptions
              where the A value is passed incorrectly, and the evaluator should[shall?] verify
              that an error is detected.
              4. The evaluator shall check the format of the ‘X’ string recovered in OAEP.Test.3
              to ensure that the format is of the form PS || 01 || K, where PS consists of zero or
              more consecutive 0x00 bytes and K is the transported keying material. The
              evaluator should[shall?] also feed into the TOE’s RSA-OEAP decryption
              operation some cipher texts for which the resulting ‘X’ strings do not have the
              correct format (i.e., the leftmost non-zero byte is not 0x01). These incorrectly 
              formatted ‘X’ variables should[shall?] be detected by the RSA-OEAP decrypt
              function.
              5. The evaluator shall trigger all detectable decryption errors and validate that the
              returned error codes are the same and that no information is given back to the
              sender on which type of error occurred. The evaluator shall also validate that no
              intermediate results from the TOE’s receiver-side operations are revealed to the
              sender.
              If the KTS-KEM-KWS scheme was selected, the evaluator shall perform the
              following tests:
              1. The evaluator shall inspect each cipher text, C, produced by RSA-KEM-KWS
              encryption operation of the TOE and make sure the length (in bytes) of the
              cipher text, cLen, is greater than nLen (the length, in bytes, of the modulus of
              the RSA public key) and that cLen - nLen is consistent with the byte lengths
              supported by the key wrapping algorithm. The evaluator shall feed into the
              RSA-KEM-KWS decryption operation a cipher text of unsupported length and
              verify that an error is detected and that the decryption process stops.
              2. The evaluator shall separate the cipher text, C, produced by the sender-side of
              the TOE into its C0 and C1 components and use the RSA decryption primitive to
              recover the secret value, Z, from C0. The evaluator shall check that the
              unsigned integer represented by Z is greater than 1 and less than n-1, where n is
              the modulus of the RSA public key. The evaluator shall construct examples
              where the cipher text is created with a secret value Z = 1 and make sure the
              RSA-KEM-KWS decryption process detects the error. Similarly, the evaluator
              shall construct examples where the cipher text is created with a secret value Z =
              n – 1 and make sure the RSA-KEM-KWS decryption process detects the error.
              3. The evaluator shall attempt to successfully recover the secret value Z, derive the
              key wrapping key, KWK, and unwrap the KWA-cipher text following the RSAKEM-KWS
              decryption process given in NISP SP 800-56B section 7.2.3.4. If the
              key-wrapping algorithm is AES-CCM, the evaluator shall verify that the value
              of any (unwrapped) associated data, A, that was passed with the wrapped keying
              material is correct The evaluator shall feed into the TOE’s RSA-KEM-KWS
              decryption operation examples of incorrect cipher text and verify that a
              decryption error is detected. If the key-wrapping algorithm is AES-CCM, the
              evaluator shall attempt at least one decryption where the wrong value of A is
              given to the RSA-KEM-KWS decryption operation and verify that a decryption
              error is detected. Similarly, if the key-wrapping algorithm is AES-CCM, the
              evaluator shall attempt at least one decryption where the wrong nonce is given to
              the RSA-KEM-KWS decryption operation and verify that a decryption error is
              detected.
              4. The evaluator shall trigger all detectable decryption errors and validate that the
              resulting error codes are the same and that no information is given back to the
              sender on which type of error occurred. The evaluator shall also validate that no
              intermediate results from the TOE’s receiver-side operations (in particular, no Z
              values) are revealed to the sender.</aactivity>
          </f-element>
        </f-component>
        
        <f-component id="FCS_VAL_EXT.1" name="Extended: Validation">
          <f-element id="FCS_VAL_EXT.1.1 ">
            <title>The TSF shall perform validation of the 
              <selectables>
                <selectable>submask</selectable>
                <selectable>intermediate key</selectable>
                <selectable>FEK</selectable>
              </selectables>using the following method(s): 
              <selectables>
                <selectable>key wrap as specified in FCS_COP.1(5)</selectable>
                <selectable>hash the 
                  <selectables>
                    <selectable>submask</selectable>
                    <selectable>intermediate key</selectable>
                    <selectable>FEK</selectable> 
                  </selectables>as specified in FCS_COP.1.1(2)and compare it to a stored hashed </selectable> 
                <selectable>decrypt a known value using the 
                  <selectables>
                    <selectable>submask</selectable>
                    <selectable>intermediate key</selectable>
                    <selectable>FEK</selectable>
                  </selectables> asspecified in FCS_COP.1(1) and compare it against a stored known value]</selectable>
              </selectables> 
            </title>
          </f-element>
          <f-element id="FCS_VAL_EXT.1.2">
            <title>The TSF shall require validation as specified in FCS_VAL_EXT.1.1 prior to decrypting any FEK.</title>
          </f-element>
          <f-element id="FCS_VAL_EXT.1.3">
            <title>The TSF shall 
              <selectables>
                <selectable>[perform a key sanitization of the FEK(s)] upon a configurable number of consecutive failed validation attempts</selectable>
                <selectable>institute a delay such that only [assignment: ST author specified number of attempts] can be made within a 24 hour period,</selectable>
                <selectable>block validation after [assignment: ST author specified number of attempts] of consecutive failed validation attempts,</selectable>
                <selectable>require power cycle/reset the TOE after [assignment: ST author specified number of attempts] of consecutive failed validation attempts].</selectable>
              </selectables>
            </title>
          <note role="application">None.</note>
          <aactivity>
            <h:h4>TSS</h:h4>
            <h:h4>Conditional:</h:h4> If the platform provides the IV generation,
            then the evaluator shall examine the TSS to verify that it describes how the IV
            generation is invoked. <h:br/>
            <h:h4>Conditional:</h:h4> If the TOE provides the IV generation, 
            the evaluator shall ensure the TSS describes how salts are generated. The evaluator
            shall confirm that the salt is generating using an RBG described in FCS_RBG_EXT.1
            or by the Operational Environment. If external function is used for this purpose, the
            TSS should include the specific API that is called with inputs.
            The evaluator shall ensure the TSS describes how nonces are created uniquely and
            how IVs and tweaks are handled (based on the AES mode). The evaluator shall
            confirm that the nonces are unique and the IVs and tweaks meet the stated
            requirements.
            
            <h:h4>Guidance</h:h4>None. <h:h4>Tests</h:h4>None. </aactivity>
            
          </f-element>
        </f-component>
        
        <f-component id="FCS_IV_EXT.1" name="Extended: Initialization Vector Generation">
          <f-element id="FCS_IV_EXT.1.1 ">
            <title>The application shall <selectables>
                <selectable>implement platform-provided functionality to generate IVs</selectable>
              <selectable>generate IVs in the following manner<selectables>
                <selectable>CBC: IVs shall be non-repeating and unpredictable;</selectable>
                <selectable>CCM: Nonce shall be non-repeating and unpredictable;</selectable>
                <selectable>XTS: No IV. Tweak values shall be non-negative integers, assigned consecutively,
                  and starting at an arbitrary non-negative integer;</selectable>
                <selectable>GCM: IV shall be non-repeating. The number of invocations of GCM shall not exceed
                  2^32 for a given secret key].</selectable>
              </selectables></selectable>
              </selectables> </title>
            <note role="application">None.</note>
            <aactivity>
              <h:h4>TSS</h:h4>
              The evaluator shall examine the TSS to determine which authorization factors support
                validation.
                The evaluator shall examine the TSS to review a high-level description if multiple
                submasks are used within the TOE, how the submasks are validated (e.g., each
                submask validated before combining, once combined validation takes place). <h:br/>
                
                The evaluator shall examine the TSS to verify that it described the method the TOE
                  employs to limit the number of consecutively failed authorization attempts.
                  The evaluator shall examine the vendor’s TSS to ensure it describes how validation
                  is performed. The description of the validation process in the TSS provides detailed
                  information how the TOE validates the submasks. The TSS describes how the
                  process works, such that it does not expose any material that might compromise the
                  submask(s).
                 
              
                <h:h4>Guidance</h:h4>[conditional] If the validation functionality is configurable, the evaluator shall
                examine the operational guidance to ensure it describes how to configure the TOE to
                ensure the limits regarding validation attempts can be established.
                
                <h:h4>Tests</h:h4>The evaluator shall perform the following tests:
                Test 1: The evaluator shall determine the limit on the average rate of the number of
                consecutive failed authorization attempts. The evaluator will test the TOE by entering
                that number of incorrect authorization factors in consecutive attempts to access the
                protected data. If the limit mechanism includes any “lockout” period, the time period 
                tested should include at least one such period. Then the evaluator will verify that the
                TOE behaves as described in the TSS.
                Test 2: For each validated authorization factor, ensure that when the user provides an
                incorrect authorization factor, the TOE prevents the any FEK from being decrypted. 
            </aactivity>
          </f-element>
        </f-component>
        
        <f-component id="FCS_KYC_EXT.1" name="Key Chaining and Key Storage">
          <f-element id="FCS_KYC_EXT.1.1">
            <title> The TSF shall maintain a key chain of: 
              <selectables linebreak="yes">
                <selectable>a conditioned password as the FEK; </selectable>
                <selectable id="HASKEK">KEKs originating from 
                  <selectables>
                    <selectable>one or more authorization factors(s)</selectable>
                    <selectable>n file encryption enterprise management server</selectable>
                  </selectables> to 
                  <selectables>
                    <selectable>the FEK(s)</selectable>
                    <selectable>a file encryption enterprise management server</selectable>
                  </selectables>
                  using the following method(s): 
                  <selectables linebreak="yes">
                    <selectable>utilization of the platform key storage</selectable>
                    <selectable>utilization of platform key storage that performs key wrap with a
                      TSF provided key</selectable>
                    <selectable id="USEKEYDER">implement key derivation as specified in FCS_KDF_EXT.1</selectable>
                    <selectable id="USEKEYWRA">implement key wrapping as specified in FCS_COP.1(5)</selectable>
                    <selectable id="USEKEYCOM">implement key combining as specified in FCS_SMC_EXT.1</selectable>
                    <selectable id="USEKEYENC">implement key encryption as specified in FCS_COP.1(1)</selectable>
                    <selectable id="USEKEYTRA">implement key transport as specified in FCS_COP.1(8)</selectable>
                  </selectables> while maintaining an effective strength of 
                    <selectables>
                      <selectable>
                        <selectables>
                          <selectable>128 bits</selectable>
                          <selectable>256 bits</selectable>
                        </selectables> for symmetric keys;
                      </selectable>
                      <selectable>
                        <selectables>
                          <selectable>112 bits</selectable>
                          <selectable>128 bits</selectable>
                          <selectable>192 bits</selectable>
                          <selectable>256 bits</selectable>
                        </selectables> for asymmetric keys;
                      </selectable>
                    </selectables> commensurate with the strength of the FEK
                </selectable>
              </selectables> 
              and 
              <selectables>
                <selectable> no supplemental key chains</selectable>
                <selectable> other supplemental key chains that protect a key or keys in the primary key chain using the folliwing method(s):
                  <selectables linebreak="yes">
                    <selectable>utilization of the platform key storage</selectable>
                    <selectable>utilization of platform key storage that performs key wrap with a
                      TSF provided key</selectable>
                    <selectable>implement key wrapping as specified in FCS_COP.1(5)</selectable>
                    <selectable>implement key combining as specified in FCS_SMC_EXT.1</selectable>
                    <selectable>implement key encryption as specified in FCS_COP.1(1)</selectable>
                  </selectables></selectable>
              </selectables>
            </title>
            <note role="application">Key Chaining is the method of using multiple layers of
              encryption keys to ultimately secure the FEK. The number of intermediate keys will
              vary. This applies to all keys that contribute to the ultimate wrapping or derivation
              of the FEK; including those in areas of protected. For the first selection, the ST author
              selects the method used for the keychain.  If the second option is chosen (“KEKs originating…”)
              , then the ST author chooses all methods for production and protection of KEKs in the keychain 
              from the options in the second selection.  For this option, the ST author must also specify the 
              strength of the keys in the keychain.  It should be noted that “maintaining overall strength…
              commensurate with the overall strength of the FEK” is meant to cover the use case for this EP 
              of a powered-off device being recovered by an adversary, who subsequently attempts to recover 
              the FEK through a compromise of the key chain. 
              
              The third selection in the requirement is used to select the types of keys used in the key chain 
              (both symmetric and asymmetric keys are allowed).  The bit sizes selected in the fourth 
              and fifth selections are chosen by the ST author to be commensurate with the strength of 
              the FEK in the following manner: for symmetric FEKs of 128 bits, the ST author can select 
              any of the choices for both symmetric and asymmetric keys.  For symmetric FEKs of 256 bits, 
              the ST author selects 256 bits if the symmetric key option is chosen and 192 bits or 256 bits 
              if the asymmetric key option is chosen.
              
              If a supplemental keychain is used, then the ST author selects the second option in the sixth 
              selection and then chooses the method by which these keys are protected.  Keys in the 
              supplemental key chain may be of any size, as they only provide additional protection to the 
              primary key chain.  Compromise (according the EP use case) of the secondary key chain cannot 
              circumvent the protection provided by the primary keychain. 
            
             If the selections where the TOE impliments KEKs are chosen for the primary or supplimental key chains then FCS_CKM_EXT.1 shall be included.
            
            The selections for an enterprise management server indicate that the key chain may terminate or start an enterprise management server.  
            The server may provide a key needed to start a chain or the server may recieve a key that ends a chain.  The key mangement internal to the server is not evaluated here.</note>
            <aactivity>
              <h:h4>TSS</h:h4>
              The evaluator shall verify the TSS contains a high level 
              description of the key hierarchy for all keychains and authorization methods selected in FIA_AUT_EXT 
              that are used to protect the KEK or FEK. The evaluator shall examine the TSS to ensure it describes 
              each key chain in detail, and these descriptions correspond with the selections of the requirement. 
              The description of each key chain shall be reviewed to ensure it maintains a chain of keys using options for maintaining a the keychain.
              
              The evaluator shall verify the TSS to ensure that it describes how each key chain process functions, 
              such that it does not expose any material that might compromise any key in the chain. A high-level 
              description should include a diagram illustrating the key hierarchy implemented and detail where all 
              keys and keying material is stored or what it is derived from. The evaluator shall examine the primary 
              key hierarchy to ensure that at no point the chain could be broken without a cryptographic exhaust or 
              knowledge of the KEK or FEK and the effective strength of the FEK is maintained throughout the Key Chain 
              as specified in the requirement.<h:h4>Guidance</h:h4>
              None. <h:h4>Tests</h:h4>None. </aactivity>
          </f-element>
        </f-component>
      
        <f-component id="FCS_CKM_EXT.5" name="File Authentication Key (FAK) Support" status="optional">
        <f-element id="FCS_CKM_EXT.5.1">
          <title> The TSF shall use a FAK to authenticate sensitive data when a cryptographic, keyed
            hashing function is used for data authentication and shall be supported in the following
            manner: <selectables linebreak="yes">
              <selectable>A FAK conditioned from a password/passphrase shall never be stored in
                non-volatile memory</selectable>
              <selectable>a FAK will be stored in non-volatile memory encrypted with a KEK as
                specified in FCS_COP.1(5) using authorization factors as specified in FCS_CKM_EXT.1
              </selectable>
            </selectables>
          </title>
        </f-element>
        <f-element id="FCS_CKM_EXT.5.2">
          <title>The TSF shall create a unique FAK for each file (or set of files) using the
            mechanism on the client as specified in FCS_RBG_EXT.1.</title>
        </f-element>
        <f-element id="FCS_CKM_EXT.5.3">
          <title>The FAKs must be generated by the TOE.</title>
        </f-element>
        <f-element id="FCS_CKM_EXT.5.4">
          <title>The TSF will not write FAKs to non-volatile memory.</title>
        </f-element>
        <f-element id="FCS_CKM_EXT.5.5">
          <title>The FAK shall be protected in a manner conformant to FCS_COP.1(6).</title>
          <note role="application"> The intent of this requirement is to describe the different
            methods that a FAK can be created and formed. <h:br/>FCS_CKM_EXT.5.1 details how a FAK may
            be directly conditioned from a password/passphrase or may be a randomly generated from
            an approved randomizer. <h:br/>FCS_CKM_EXT.5.2 requires that each resource to be encrypted
            has a unique FAK, and that this FAK is generated by the TSF. If the encrypted resource
            is a set of files encrypted under one FAK, additional requirements on the initialization
            vectors and cipher modes must be adhered to in Section 4.2. </note>
          <aactivity>
            <h:h4>TSS</h:h4> FCS_CKM_EXT.5.1: The evaluator shall examine the TSS to determine how the
            FEK will actually be formed and details how the FEK is stored (or not stored) in memory.
            <h:br/> FCS_CKM_EXT.5.2: The evaluator shall examine the TSS to determine that it
            describes how a FAK is created for a protected resource and associated with that
            resource; protection of the FAK itself is covered by FCS_COP.1(5). The evaluator
            confirms that—per this description—the FAK is unique per resource (file or set of files)
            and that the FAK is created using the mechanisms specified in FCS_CKM_EXT.1. <h:br/>
            FCS_CKM_EXT.5.3: The TSS must detail that the FAKs are generated on the client machine
            and are not generated on an external server. <h:br/> FCS_CKM_EXT.5.4: FCS_CKM_EXT.4
            contains the requirements necessary to ensure that plaintext keys and key material do
            not remain in plaintext form in the TSF’s non-volatile memory space. In TOEs where the
            FAK is protected with a KEK, the FAK will need to be encrypted and stored in
            non-volatile memory when not being used to decrypt/encrypt a file. (Typically, the
            encrypted FAK is stored in the meta-data of the encrypted file(s).) The evaluator shall
            examine the TSS to ensure that it describes how the FAK is encrypted, both after its
            initial creation and after it has been decrypted for use (note that in the entirely
            likely possibility that the FAK is not re-encrypted, then this case must be indicated in
            the TSS and the description for FCS_CKM_EXT.4 will cover disposal of the plaintext FEK
            and FAK). The evaluator shall further check to ensure that the TSS describes how the FAK
            and any other associated meta-data necessary to decrypt the file or set of files are
            associated with the resource. This description can be combined with the description
            required for FCS_COP.1(5). <h:br/>
            <h:h4>Guidance</h:h4> None <h:h4>Tests</h:h4> An example ciphertext file generated via the TOE
            shall be provided to the evaluator with the accompanying FAK and prerequisite
            authorization information used for encryption. The evaluator will use the TOE in
            conjunction with a debugging or forensics utility to attempt an authentication of the
            ciphertext file using the provided authorization information. The evaluator will then
            terminate processing of the TOE and perform a search through non-volatile memory using
            the provided FAK string. The evaluator must document each command, program or action
            taken during this process, and must confirm that the FAK was never written to
            non-volatile memory. This test must be performed three times to ensure repeatability. If
            during the course of this testing the evaluator finds that the FAK was written to
            non-volatile memory, they should be able to identify the cause (i.e. the TOE wrote the
            FAK to disk, the TOE platform dumped volatile memory as a page file, etc), and document
            the reason for failure to comply with the requirement. </aactivity>
        </f-element>
      </f-component>
      <f-component id="FCS_COP.1(6)" name="FAK encryption/decryption support" status="optional">
        <f-element id="FCS_COP.1.1(6)">
          <title>The FAK shall be protected in the same manner as the FEK, in accordance with
            FCS_COP.1(5).</title>
          <note role="application">53 The intent of this requirement is to clarify that, if a FAK is
            to be used, it should be treated as sensitive as the FEK, and thus, follow the same
            encryption and decryption practices. </note>
          <aactivity> The evaluator shall follow the assurance activities as laid out in
            FCS_COP.1(5) to assert proper FAK protection. </aactivity>
        </f-element>
      
      </f-component>
        <f-component id="FCS_CKM.1(A)" name="Extended: Cryptographic key generation (Password/Passphrase conditioning)" status="sel-based"> 
          <selection-depends req="FIA_AUT_EXT.1.1" ids="USEPAS"/>
        <f-element id="FCS_CKM.1.1(A)">
          <title>
            <h:b>Refinement:</h:b>The TSF shall support a password/passphrase of up to 
            [assignment: maximum password size, positive integer of 64 or more] 
            characters used to generate a password authorization factor.
           </title>
        </f-element>
          <f-element id="FCS_CKM.1.2(A)">
            <title>
              <h:b>Refinement:</h:b> The TSF shall allow passwords to be composed of any combination of upper case characters,
              lower case characters, numbers, and the following special characters: “!”, “@”, “#”, “$”, “%”, “^”, “&amp;”, “*”, “(“, and “)”,
              and [selection: [assignment: other supported special characters], no other characters].</title>
          </f-element>
          <f-element id="FCS_CKM.1.3(A)">
            <title>
              <h:b>Refinement:</h:b> The TSF shall perform [Password-based Key Derivation
              Functions] in accordance with a specified cryptographic algorithm [HMAC- <selectables>
                <selectable>SHA-256</selectable>
                <selectable>SHA-384</selectable>
                <selectable>SHA-512</selectable>
              </selectables> ], with [assignment: positive integer of 4096 or more] iterations, and
              output cryptographic key sizes <selectables>
                <selectable>128</selectable>
                <selectable>256</selectable>
              </selectables> that meet the following: [NIST SP 800-132]. 
              </title>
          </f-element>
          <f-element id="FCS_CKM.1.4(A)">
            <title>
              <h:b>Refinement:</h:b> The TSF shall not accept passwords less than [selection: a value settable by the administrator, 
              [assignment: minimum password length accepted by the TOE, must be >= 1]] and greater than the maximum password length 
              defined in FCS_CKM_EXT.1.1(A).</title>
          </f-element>
        <f-element id="FCS_CKM.1.5(A)">
          <title>The TSF shall generate all salts using a RBG that meets FCS_RBG_EXT.1 (from the AS PP) and with entropy 
            corresponding to the security strength selected for PBKDF in FCS_CKM_EXT.1.3(A).</title>
          <note role="application"> The password/passphrase is represented on the host machine as a sequence of characters whose 
            encoding depends on the TOE and the underlying OS. This sequence must be conditioned into a string of bits that is to be used as a KEK that is the same size as the FEK.
            
            For FCS_CKM_EXT.1.1(A), the ST author assigns the maximum size of the password/passphrase it supports; it must support at least 64 characters.
            
            For FCS_CKM_EXT.1.2(A), the ST author assigns any other supported characters; if there are no other supported characters, 
            they should select “no other characters”.
            
            For FCS_CKM_EXT.1.3(A), the ST author selects the parameters based on the PBKDF used by the TSF. The key cryptographic
            key sizes in are made to correspond to the KEK key sizes selected in FCS_CKM_EXT.1.
            
            The password/passphrase must be conditioned into a string of bits that forms the submask to be used as input into the
            KEK. Conditioning is performed using one of the identified hash functions in accordance with the process described in
            NIST SP 800-132. SP 800-132 requires the use of a pseudo-random function (PRF) consisting of HMAC with an approved hash function.
            
            Appendix A of SP 800-132 recommends setting the iteration count in order to increase the computation needed to derive
            a key from a password and, therefore, increase the workload of performing a password recovery attack. However, for this EP,
            a minimum iteration count of 4096 is required in order to ensure that twelve bits of security is added to the password/passphrase value.
            A significantly higher value is recommended to ensure optimal security.
            
            For FCS_CKM_EXT.1.4(A) If the minimum password length is settable, then ST author chooses “a value settable by the administrator
            for this component, as well as the “configure password/passphrase complexity setting” item for FMT_SMF.1.1. If the minimum length
            is not settable, the ST author fills in the assignment with the minimum length the password must be (zero-length passwords are not allowed for compliant TOEs).  </note>
          <aactivity>
            <h:h4>TSS</h:h4> FCS_CKM_1.1(A): There are two aspects of this component that require
            evaluation: passwords/passphrases of the length specified in the requirement (at least
            64 characters) are supported, and that the characters that are input are subject to the
            selected conditioning function. These activities are separately addressed in the text
            below. <h:br/>Support for minimum length:The evaluators shall check to ensure that the 
            TSS describes the allowable ranges for password/passphrase lengths, and that at least 64 characters may be specified by the user.
            <h:br/>Support for PBKDF: The evaluator shall examine the password hierarchy TSS to ensure
            that the formation of all KEKs or FEKs (as decided in the FCS_CKM_EXT.1 selection) is
            described and that the key sizes match that described by the ST author. <h:br/>The
            evaluator shall check that the TSS describes the method by which the password/passphrase
            is first encoded and then fed to the SHA algorithm. The settings for the algorithm
            (padding, blocking, etc.) shall be described, and the evaluator shall verify that these
            are supported by the selections in this component as well as the selections concerning
            the hash function itself. The evaluator shall verify that the TSS contains a description
            of how the output of the hash function is used to form the submask that will be input
            into the function and is the same length as the KEK as specified in FCS_CKM_EXT.4.
            <h:br/>For the NIST SP 800-132-based conditioning of the password/passphrase, the required
            assurance activities will be performed when doing the assurance activities for the
            appropriate requirements (FCS_COP.1.1(4)). If any manipulation of the key is performed
            in forming the submask that will be used to form the FEK or KEK, that process shall be
            described in the TSS. <h:br/>No explicit testing of the formation of the submask from the
            input password is required. <h:br/> FCS_CKM_1.2(A): The ST author shall provide a
            description in the TSS regarding the salt generation. The evaluator shall confirm that
            the salt is generated using an RBG described in FCS_RBG_EXT.1 (from the <cite
              linkend="bibAppPP"/>). <h:h4>Guidance</h:h4>
            <h:b>Support for minimum length:</h:b> The evaluators shall check the Operational Guidance 
            to determine that there are instructions on how to generate large passwords/passphrases, and
            instructions on how to configure the password/passphrase length (and optional complexity settings)
            to provide entropy commensurate with the keys that the authorization factor is protecting.  
            
            <h:h4>Tests</h:h4> SSupport for Password/Passphrase characteristics: In addition to the analysis above, 
            the evaluator shall also perform the following tests on a TOE configured according to the Operational Guidance: <testlist>
              <test>Ensure that the TOE supports passwords/passphrases of a minimum length of 64 characters. </test>
              <test>Ensure that the TOE does not accept more than the maximum number of characters specified in FCS_CKM_EXT.1.1(A). </test>
              <test> Ensure that the TOE does not accept less than the minimum number of characters specified in FCS_CKM_EXT.1.4(A).
                If the minimum length is settable by the administrator, the evaluator determines the minimum length or lengths to test.</test>
              <test> Ensure that the TOE supports passwords consisting of all characters listed in FCS_CKM_EXT.1.2(A).</test>
            </testlist>
            <h:b>Conditioning:</h:b> No explicit testing of the formation of the authorization factor
            from the input password/passphrase is required. <h:b>Iteration count:</h:b> The evaluator
            shall verify that the iteration count for PBKDFs performed by the TOE comply with NIST
            SP 800-132 by ensuring that the TSS contains a description of the estimated time
            required to derive key material from passwords and how the TOE increases the computation
            time for password-based key derivation (including but not limited to increasing the
            iteration count). </aactivity>
        </f-element>
      </f-component>
      
      
      <f-component id="FCS_SMC_EXT.1" name="Submask Combining " status="sel-based">
        <selection-depends req="FCS_KYC_EXT.1.1"  ids="USEKEYCOM"/>
        <f-element id="FCS_SMC_EXT.1.1 ">
          <title>The TSF shall combine submasks using the following method <selectables>
              <selectable>exclusive OR (XOR)</selectable>
              <selectable>SHA-256</selectable>
              <selectable>SHA-384</selectable>
              <selectable>SHA-512</selectable>
            </selectables> to generate an intermediary key</title>
          <note role="application">This requirement specifies the way that a product may combine the
            various submasks by using either an XOR or an approved SHA-hash. </note>
          <aactivity>
            <h:h4>TSS</h:h4> If keys are XORed together to form an intermediate key, the TSS section
            shall identify how this is performed (e.g., if there are ordering requirements, checks
            performed, etc.). The evaluator shall also confirm that the TSS describes how the length
            of the output produced is at least the same as that of the FEK. <h:h4>Guidance</h:h4>None.
            <h:h4>Tests</h:h4>None.
          </aactivity>
        </f-element>
      </f-component>
        
              
      </subsection>
      
      <subsection title="User Data Protection (FDP)" id="fdp">
        <f-component id="FDP_PRT_EXT.1" name="Extended: Protection of Selected User Data">
          <f-element id="FDP_PRT_EXT.1.1">
            <title>The TSF shall perform encryption and decryption of the user-selected file (or set
              of files) in accordance with FCS_COP.1(1). </title>
            <note role="application">This is the primary requirement for encrypting and decrypting
              the protected resources (files and sets of files). Apart from the actual encryption
              and decryption of the resources, there are two other functions specified by this
              requirement. </note>
            <aactivity>
              <h:h4>TSS</h:h4> FDP_PRT_EXT.1.1: The evaluator shall examine the TSS to determine that it
              lists each type of resource that can be encrypted (e.g., file, directory) and what
              “encrypted” means in terms of the resource (e.g., “encrypting a directory” means that
              all of the files contained in the directory are encrypted, but the data in the
              directory itself (which are filenames and pointers to the files) are not encrypted).
              The evaluator shall also confirm that the TSS describes how each type of resource
              listed is encrypted and decrypted by the TOE. The evaluator shall ensure that this
              description includes the case where an existing file or set of files is encrypted for
              the first time; a new file or set of files is created and encrypted; an existing file
              or set of files is re-encrypted (that is, it had been initially encrypted; it was
              decrypted (by the TOE) for use by the user, and is then subsequently re-encrypted);
              and corresponding decryption scenarios. If other scenarios exist due to product
              implementation/features, the evaluator shall ensure that those scenarios are covered
              in the TSS as well. <h:h4>Guidance</h:h4> If the TOE creates temporary objects and these
              objects can be protected through administrative measures (e.g., the TOE creates
              temporary files in a designated directory that can be protected through configuration
              of its access control permissions), then the evaluator shall check the Operational
              Guidance to ensure that these measures are described. <h:br/> If there are special
              measures necessary to configure the method by which the file or set of files are
              encrypted (e.g., choice of algorithm used, key size, etc.), then those instructions
              shall be included in the Operational Guidance and verified by the evaluator. In these
              cases, the evaluator checks to ensure that all non-TOE products used to satisfy the
              requirements of the ST that are described in the Operational Guidance are consistent
              with those listed in the ST, and those tested by the assurance activities of this EP.
                <h:h4>Tests</h:h4> The evaluator shall also perform the following tests. All
              instructions for configuring the TOE and each of the environments must be included in
              the Operational Guidance and used to establish the test configuration.<h:br/> For each
              resource and decryption/encryption scenario listed in the TSS, the evaluator shall
              ensure that the TSF is able to successfully encrypt and decrypt the resource using the
              following methodology:<h:br/> Monitor the temporary resources being created (if any) and
              deleted by the TSF—the tools used to perform the monitoring (e.g., procmon for a
              Windows system) shall be identified in the test report. The evaluator shall ensure
              that these resources are consistent with those identified in the TSS, and that they
              are protected as specified in the Operational Guidance and are deleted when the
              decryption/encryption operation is completed. </aactivity>
          </f-element>
          <f-element id="FDP_PRT_EXT.1.2">
            <title> The application shall <selectables>
                <selectable>invoke platform-provided functionality</selectable>
                <selectable>implement functionality</selectable>
              </selectables> to ensure that all sensitive data created by the TOE when
              decrypting/encrypting the user-selected file (or set of files) are destroyed in
              volatile and non-volatile memory when the data is no longer needed. </title>
            <note role="application"> The intent is that the TSF controls the use and clearing of any data
              that it manipulates that is not needed by the user (e.g. a temporary file created in non-volatile
              memory during the encryption/decryption process would be destroyed as soon as the process is completed).
              This should not prevent expected usage (e.g. the TOE may create a decrypted copy of a file as requested
              by the user).The TSF is also not responsible for temporary files that  non-TSF application creates 
              (for example, a text editor may create a “checkpoint” file when editing a file that is protected by the TOE;
              the TOE does not have to try to keep track of or clean up these “checkpoint” files). An optional
              requirement on cleaning up the temporary files created by non-TSF application when operating on
              files protected by the TOE is in Appendix B. </note>
            <aactivity>
              <h:h4>TSS</h:h4>
              <h:b>Requirement met by the TOE</h:b>
              <h:br/> The evaluator shall examine the TSS to ensure there is a high-level description
              of how the FEK is protected. <h:br/>The evaluator shall examine the TSS to ensure there
              is a description of how the FEK is protected. The evaluator shall examine the TSS to ensure 
              that it describes all temporary files/resources created or memory used during the 
              decryption/encryption process and when those files/resources or memory is no longer needed. 
              The TSS shall describe how the TSF or TOE platform deletes the non-volatile memory (for example, files) 
              and volatile memory locations after the TSF is done with its decryption/encryption operation. 
              <h:h4>Guidance</h:h4>
              None. <h:h4>Tests</h:h4> 
              <testlist><test>This test only applies for application provided functionality.</test>
                
                1. Using a file editor, create and save a text file that is encrypted per the evaluation configured encryption policy.  The contents of the file will be limited to a known text pattern to ensure that the text pattern will be present in all encryption/decryption operations performed by the TOE.
                
                2. Exit the file editor so that the file (including its known text pattern) has “completed the decryption/encryption operation” and process memory containing the known text pattern is released.
                
                3. The evaluator will take a dump of volatile memory and search the generated dump for the known pattern.  The test fails if the known plaintext pattern is found in the memory dump.
                
                4. Open the file again with a file editor. 
                
                5. The evaluator will take a dump of volatile memory and search the generated dump for the known text pattern.  Note that the known text pattern is expected to be present since the file editor has the file open. The test fails if the known plaintext pattern is not found in the memory dump.
                
                6. Close the file and exit the file editor.
                
                7. The evaluator will take a dump of volatile memory and search the retrieved dump for the known pattern.  The test fails if the known plaintext pattern is found in the memory dump.</testlist>
            </aactivity>
          </f-element>
        </f-component>
      <f-component id="FDP_AUT_EXT.1" name="Extended: Authentication of Selected User Data " status="optional">
        <f-element id="FDP_AUT_EXT.1.1">
          <title>The TSF shall perform authentication of the user-selected file (or set of files)
            and provide notification to the user if modification had been detected. </title>
        </f-element>
        <f-element id="FDP_AUT_EXT.1.2">
          <title> The TSF shall implement a data authentication method based on <selectables>
              <selectable>cryptographic, keyed hashing service and verification in accordance with
                FDP_AUT_EXT.2</selectable>
              <selectable>asymmetric signing and verification in accordance with
                FDP_AUT_EXT.3</selectable>
            </selectables>. </title>
          <note role="application">49 This is the primary requirement for authentication of the
            protected resources (files and sets of files). It is highly encouraged for vendors to
            utilize a keyed hashing service or asymmetric signing mechanism to ensure data
            authentication, as these are the only two implementations noted in this EP that prevent
            decryption if authentication is unsuccessful. Using modes such as XTS or CBC will
            require additional data authentication measures to be added, such as a keyed hash
            function or asymmetric signing, because these modes do not come inherently packaged with
            data authentication or a way to signal to the user that data has been modified. </note>
          <aactivity>
            <h:h4>TSS</h:h4> The evaluator shall examine the TSS to determine that it lists each type of
            resource that can be authenticated (e.g., file, directory) and what “authenticated”
            means in terms of the resource (e.g., “authenticating a directory” means that all of the
            files contained in the directory are authenticated, but the data in the directory itself
            (which are filenames and pointers to the files) are not authenticated). The evaluator
            shall also confirm that the TSS describes how each type of resource listed is
            authenticated by the TOE and how authentication measures are added to each resource
            (e.g. taking all the encrypted files through a MAC function and appending the MAC to the
            set of files). The evaluator shall ensure that this description includes the case where
            an existing file or set of files has authentication measures added for the first time; a
            new file or set of files is created and adds authentication measure; an existing file or
            set of files updates or replaces its existing authentication measures (that is, it had a
            MAC appended to the data; it was authenticated and decrypted (by the TOE) for use by the
            user, and is then subsequently re-encrypted with an updated MAC); and corresponding
            decryption scenarios. If other scenarios exist due to product implementation/features,
            the evaluator shall ensure that those scenarios are covered in the TSS as well.
              <h:h4>Guidance</h:h4>If the TOE creates temporary objects and these objects can be
            protected through administrative measures (e.g., the TOE creates temporary files in a
            designated directory that can be protected through configuration of its access control
            permissions), then the evaluator shall check the Operational Guidance to ensure that
            these measures are described. <h:br/>If there are special measures necessary to configure
            the method by which the file or set of files are authenticated (e.g., choice of function
            used, additional keys, etc.), then those instructions shall be included in the
            Operational Guidance and verified by the evaluator. This includes, for instance, lists
            of allowed platforms, libraries, and devices, and instructions for using them. In these
            cases, the evaluator checks to ensure that all non-TOE products used to satisfy the
            requirements of the ST that are described in the Operational Guidance are consistent
            with those listed in the ST, and those tested by the assurance activities of this EP.
              <h:h4>Tests</h:h4> The evaluator shall also perform the following tests. These tests may
            be performed in conjunction with the tests listed for FCS_COP.1(2) (from the <cite
              linkend="bibAppPP"/>), FCS_COP.1(3) (from the <cite linkend="bibAppPP"/>), and
            FCS_COP.1(4). These tests must be performed for each data authentication feature and
            platform claimed in the ST; all instructions for configuring the TOE and each of the
            environments must be included in the Operational Guidance and used to establish the test
            configuration. <h:br/>For each resource and data authentication scenario listed in the
            TSS, the evaluator shall ensure that the TSF is able to successfully add authentication
            measures and authenticate the resource using the following methodology. <h:br/>Monitor the
            temporary resources being created (if any) and deleted by the TSF—the tools used to
            perform the monitoring (e.g., procmon for a Windows system) shall be identified in the
            test report. The evaluator shall ensure that these resources are consistent with those
            identified in the TSS, and that they are protected as specified in the Operational
            Guidance and are deleted when the decryption/encryption and authentication operations
            are completed. </aactivity>
        </f-element>
      </f-component>
      <f-component id="FDP_AUT_EXT.2" name="Extended: Data Authentication using cryptographic, keyed hash functions" status="optional">
        <f-element id="FDP_AUT_EXT.2.1">
          <title>The TSF shall use a cryptographic, keyed hash function in accordance with
            FCS_COP.1(4).</title>
        </f-element>
        <f-element id="FDP_AUT_EXT.2.2">
          <title>The TSF shall use a File Authentication Key (FAK) in accordance with FCS_COP.1(6)
            and FCS_CKM_EXT.5 as the secret key to the keyed hash function.</title>
        </f-element>
        <f-element id="FDP_AUT_EXT.2.3">
          <title>The TSF shall use the entirety of the ciphertext file as the message input to the
            keyed hash function.</title>
        </f-element>
        <f-element id="FDP_AUT_EXT.2.4">
          <title>The TSF shall concatenate the output of the keyed hash function, the Message
            Authentication Code (MAC).</title>
        </f-element>
        <f-element id="FDP_AUT_EXT.2.5">
          <title>The TSF shall authenticate the encrypted file prior to decryption.</title>
        </f-element>
        <f-element id="FDP_AUT_EXT.2.6">
          <title>The TSF shall authenticate the data by comparing the keyed hash output of the
            ciphertext against the stored MAC.</title>
        </f-element>
        <f-element id="FDP_AUT_EXT.2.7">
          <title>The TSF shall notify the user of an unsuccessful authentication and prevent
            decryption of the ciphertext.</title>
        </f-element>
        <f-element id="FDP_AUT_EXT.2.8">
          <title>During verification, the TSF shall assume the MAC is at the end of the ciphertext
            file.</title>
        </f-element>
        <f-element id="FDP_AUT_EXT.2.9">
          <title>The FAK will be generated using a RBG that meets FCS_RBG_EXT.1 (from the AS
            PP).</title>
          <note role="application">The intent of this requirement is to specify the correct way of
            using a keyed hash function to authenticate the data, and enable authentication of data. </note>
          <aactivity>
            <h:h4>TSS</h:h4> 46 The evaluator shall check the TSS section to confirm that it describes
            how a request for each type of supported resource (file (or set of files)) will result
            in data authentication using a keyed hash function. The evaluator will confirm that the
            TOE will respond appropriately to a failed authentication, to include notifying the user
            of an invalid authentication and preventing decryption. The evaluator will confirm that
            any file encryption utility will be able to identify where the MAC is placed. <h:br/>The
            evaluator will confirm that a FAK is used as part of the authentication process and will
            identify the keyed hash function utilized. <h:h4>Guidance</h:h4> 1 It is encouraged for
            every implementation to use a FAK that is wholly different and independently generated
            from the FEK. <h:h4>Tests</h:h4> The evaluator shall perform the following test: <testlist>
              <test>Create an encrypted file and confirm that authentication of this file using the
                correct FAK will result in a success.</test>
              <test>Modify an arbitrary number of bits of ciphertext and attempt to run the
                authentication and decryption operations on the file. Assert that the TOE
                successfully identified the forged ciphertext file and notified the user. </test>
            </testlist>
          </aactivity>
        </f-element>
      </f-component>
      <f-component id="FDP_AUT_EXT.3" name="Extended: Data Authentication using asymmetric signing and verification" status="optional">
        <f-element id="FDP_AUT_EXT.3.1">
          <title>The TSF shall use a secure hash function in accordance with FCS_COP.1(3) (from the
              <cite linkend="bibAppPP"/>) with the entire ciphertext file as input to create a
            hash.</title>
        </f-element>
        <f-element id="FDP_AUT_EXT.3.2">
          <title>The TSF shall use a cryptographic signing function in accordance with FCS_COP.1(2)
            (from the <cite linkend="bibAppPP"/>) and must use the hash generated in accordance with
            FDP_AUT_EXT.3.1 as input to the signing process. Additionally, use of ephemeral key for
            signing purposes is prohibited.</title>
        </f-element>
        <f-element id="FDP_AUT_EXT.3.3">
          <title>The TSF shall use a public and private key pair generated in accordance with
            FIA_CKM.1(1) and must use this key pair as part of the cryptographic signing process in
            accordance with FDP_AUT_EXT.3.2.</title>
        </f-element>
        <f-element id="FDP_AUT_EXT.3.4">
          <title>The TSF shall authenticate the ciphertext data prior to decryption.</title>
        </f-element>
        <f-element id="FDP_AUT_EXT.3.5">
          <title>The TSF shall notify the user of an unsuccessful authentication and prevent
            decryption of the ciphertext if such an event were to occur.</title>
        </f-element>
        <f-element id="FDP_AUT_EXT.3.6">
          <title>The TSF shall append the signature to the end of the ciphertext file.</title>
        </f-element>
        <f-element id="FDP_AUT_EXT.3.7">
          <title>During verification, the TSF shall assume the signature is at the end of the
            ciphertext file.</title>
          <note role="application">55 The intent of this requirement is to specify the secure way of
            using a cryptographic signing and hashing function as part of the data authentication
            mechanism.</note>
          <aactivity>
            <h:h4>TSS</h:h4> 1 The evaluator shall check the TSS section to confirm that it describes
            how a request for each type of supported resource (file (or set of files)) will result
            in data authentication using a secure hash and cryptographic signing process. The
            evaluator will confirm that the supplied public and private key pair were generated in
            accordance with FCS_CKM.1(1). The evaluator will confirm that the entire ciphertext file
            was used to create the hash and that the hash was used as input to the cryptographic
            signing function. The evaluator will confirm that the TSF notifies the user of an
            unsuccessful authentication and prevents decryption. <h:h4>Guidance</h:h4> None.
              <h:h4>Tests</h:h4> The evaluator shall perform the following test: <testlist>
              <test>Create an encrypted file and demonstrate that authentication of this file using
                the correct keying material will be successful.</test>
              <test>Modify an arbitrary number of bits of ciphertext and attempt to run the
                authentication and decryption operations on the file. Assert that the TOE
                successfully identified the forged ciphertext file and notified the user. </test>
            </testlist>
          </aactivity>
        </f-element>
      </f-component>
      <f-component id="FDP_PM_EXT.1" name="Extended: Protection of  Data in Power Managed States" status="optional">
        <f-element id="FDP_PM_EXT.1.1">
          <title>The TSF shall protect all data stored to the disk drive during the transition to
            the [assignment: powered-down state(s) for which this capability is provided] state as
            per FDP_PRT_EXT.1.1.</title>
        </f-element>
        <f-element id="FDP_PM_EXT.1.2">
          <title>On the return to a powered-on state from the state(s) indicated in FDP_PM_EXT.1.1,
            the TSF shall authorize the user in the manner specified in FIA_AUT_EXT.1.1 once before
            any protected data are decrypted. </title>
          <note role="application"> For the first selection, the ST author fills in the state using
            the same name used in the Operational Guidance for the state that is appropriately
            protected by the TOE. <h:br/> It should be noted that it is not sufficient to use
            Operational Environment-based credentials to unlock the TOE from the indicated state;
            the intent is that returning from the indicated state is equivalent (from an
            authorization point of view) to returning from a completely powered-off state and
            re-opening the resources that are protected. </note>
          <aactivity>
            <h:h4>TSS</h:h4>The evaluator shall examine the TSS to ensure that it describes the state(s)
            that are supported by this capability. For each state, the evaluator ensures that the
            TSS contains a description of how the state is entered, and the actions of the TSF on
            entering the state, specifically addressing how multiple open resources (of each type)
            are protected, and how keying material associated with these resources is protected (if
            different from that described elsewhere). The TSF shall also describe how the state is
            exited, and how the requirements are met during this transition to an operational state.
              <h:h4>Guidance</h:h4> The evaluator shall check the Operational Guidance to determine that
            it describes the states that are supported by the TOE, and provides information related
            to the correct configuration of these modes and the TOE. <h:h4>Tests</h:h4> The following
            tests must be performed by the evaluator for each supported State, type of resource,
            platform, and authorization factor:<testlist>
              <test>Following the Operational guidance, configure the Operational Environment and
                the TOE so that the lower power state of the platform is protected. Open several
                resources (documented in the test report) that are protected. Invoke the lower power
                state. On resumption of normal power an attempting to access a previously-opened
                protected resource, observe that an incorrect entry of the authorization factor(s)
                does not result in access to the system, and that correct entry of the authorization
                factor(s) does result in access to the resources. </test>
            </testlist>
          </aactivity>
        </f-element>
      </f-component>
      <f-component id="FDP_PRT_EXT.2" name="Extended: Protection of Selected User Data">
        <f-element id="FDP_PRT_EXT.2.1">
          <title>The application shall [selection: invoke platform-provided functionality, implement
            functionality] to ensure that all original plaintext data created when
            decrypting/encrypting the user-selected file (or set of files) are destroyed in volatile
            and non-volatile memory upon completion of the decryption/encryption operation.
          </title>
          
          <note role="application"> This is the primary requirement for encrypting and decrypting
            the protected resources (file or set of files). <h:br/>
            
            For FDP_PRT_EXT.2.1, the intent is that the TSF controls the use and clearing of any data that it manipulates. It
            needs to ensure that no plaintext data from encrypted resources
            remains after the TSF has finished operating on that resource. In the context of
            FDP_PRT_EXT.2.1, the TSF has completed the decryption operation after it has decrypted
            the file or set of files for use by an application, and completed the encryption
            operation after it has encrypted the file or set of files for storage in the file
            system. 
          </note>
          
          <aactivity>
            <h:h4>TSS</h:h4>  The evaluator shall
            examine the TSS to ensure that it describes all temporary file (or set of files) that
            are created in the filesystem of the host during the decryption/encryption process, and
            that the TSS describes how these files are deleted after the TSF is done with its
            decryption/encryption operation. Note that if other objects/resources are created on the
            host that are 1) persistent and 2) visible to other processes (users) on that host that
            are not filesystem objects, those objects shall be identified and described in the TSS
            as well. 
            
            <h:h4>Guidance</h:h4> None. 
            
            <h:h4>Tests</h:h4>
            <testlist>
              <test>For each type of resource that is identified in the TSS as sharable in its
                encrypted form, the evaluator shall ensure that different users using different
                authorization factors are able to successfully access the resource using different
                authorization factors. This should include making changes to the resource to ensure
                that the same resource is being shared, and that a per-user copy of the resource is
                not being made.</test>
              <test>If the TSS creates temporary files/resources
                during file decryption/encryption, the evaluator shall perform the following tests
                to verify that the temporary files/resources are destroyed. The evaluator shall use
                a tool (e.g., procmon for a Windows system) that is capable of monitoring the
                creation and deletion of files during the decryption/encryption process is
                performed. A tool that can search the contents of the hard drive (e.g., winhex) will
                also be needed. The tools used to perform the monitoring shall be identified in the
                test report. </test>
            </testlist> Test A (Creating an encrypted document) <h:ul>
              <h:li>Open an editing application.</h:li>
              <h:li>Create a special string inside the document. The string could be 5-10 words. It is
                recommended to remove the spaces. This will create a one page document.</h:li>
              <h:li>Start the file monitoring tool.</h:li>
              <h:li>Save and close the file.</h:li>
              <h:li>Encrypt the file using the TOE (if the TOE does not encrypt automatically for the
                user).</h:li>
            </h:ul>
            <h:b>Analysis Steps </h:b>
            <h:ul>
              <h:li>If needed, exit/close the TOE.</h:li>
              <h:li>Stop the file monitoring tool. View the results. Identify any temporary files that
                were created during the encryption process. Examine to see if the temporary files
                were destroyed when the TOE closed. </h:li>
              <h:li>If temporary files remain, these temporary files should be examined to ensure that
                no plaintext data remains. If plaintext data is found in these files, that means
                that plaintext from the encrypted file remains on the hard drive.</h:li>
              <h:li>Search the contents of the hard drive (using the second tool) for the plaintext
                string used above. (The search should be performed using both ASCII and Unicode
                formats.)</h:li>
              <h:li>If the string is found, this means that plaintext from the encrypted file remains
                on the hard drive. </h:li>
            </h:ul> Test B (Creating, Encrypting a blank document and then adding text): <h:ul>
              <h:li>Encrypt a blank document using the tool.</h:li>
              <h:li>Create a special string inside the document. The string could be 5-10 words. It is
                recommended to remove the spaces. This will create a one page document.</h:li>
              <h:li>Start the file monitoring tool.</h:li>
              <h:li>Save and close the file. </h:li>
              <h:li>Perform the “Analysis Steps” listed above</h:li>
              <h:li>If Test 1 fails and Test 2 passes, the Operational Guidance shall include
                instructions for the users to perform encryption in the manner outlined in Test
                2.</h:li>
            </h:ul>
            <h:br/> Assumption: Regardless of the length of the file, it is assumed that if any
            fragment of the original string is found, this reflects that there is a problem with the
            cleanup with the file encryptor. </aactivity>
        </f-element>
      
      
      </f-component>
        <f-component name="Extended: Protection of Third Party Data" id="FDP_PRT_EXT.3" status="optional">
        <f-element id="FDP_PRT_EXT.3.1">
          <title>The TSF shall ensure that all temporary files created (including those by a
            third-party application, for example an editor) when decrypting/encrypting the
            user-selected file (or set of files) are removed or encrypted upon completion of the
            decryption/encryption operation.</title>
       
          <note role="application"> This requirement is to cover the detection and encryption of temporary files created by third party applications.
          </note>
          
          <aactivity>
            <h:h4>TSS</h:h4>  The evaluator shall
            examine the TSS to ensure that it describes how the TOE detects and encrypts temporary files (or set of files) that
            are created in the filesystem of the host by third party products,
            
            <h:h4>Guidance</h:h4> [conditional]  If any configuration is required for this process the evaluator shall verify it is described in the guidence documentation. 
            
            <h:h4>Tests</h:h4>
          None. </aactivity>
        </f-element>
      </f-component>
      
      
      </subsection>
      <subsection title="Identification and Authentication (FIA)" id="fia">
        <f-component id="FIA_AUT_EXT.1" name="User Authorization">
          <f-element id="FIA_AUT_EXT.1.1">
            <title>The application shall 
              <selectables>
                <selectable>implement platform-provided functionality to provide user
                  authorization</selectable>
                <selectable>provide user authorization</selectable>
              </selectables> based on 
              <selectables>
                <selectable id="USEPAS"> a password authorization factor conditioned as defined in FCS_CKM.1(A)</selectable>
                <selectable id="USECAR">an external Smartcard factor that is at least the same bit-length as the FEK(s), and is protecting a submask that is 
                   <selectables>
                     <selectable>generated by the TOE (using the RBG as specified in FCS_RBG_EXT.1)</selectable>
                     <selectable>generated by the Host Platform</selectable>
                   </selectables> protected using RSA with key size 
                  <selectables>
                    <selectable>2048 bits</selectable>
                    <selectable>3072 bits</selectable>
                    <selectable>4096 bits</selectable>
                  </selectables> with user presence proved by presentation of the smartcard and 
                  <selectables>
                    <selectable>none</selectable>
                    <selectable>an OE defined PIN</selectable>
                    <selectable>a configurable PIN</selectable>
                  </selectables>
                </selectable>
                <selectable>an external USB token factor that is at least the same security strength as the FEK(s),
                   and is providing a submask generated by the 
                   <selectables>
                     <selectable>TOE, using the RBG as specified in FCS_RBG_EXT.1</selectable>
                     <selectable>Host Platform</selectable>
                   </selectables>
                </selectable>
              </selectables>
            </title>
            <note role="application"> FCS_RBG_EXT.1 is in the Application Software Protection Profile.
             
             This requirement specifies what authorization factors the TOE accepts
             from the user. A password entered by the user is one authorization factor that the TOE must 
             be able to condition, as specified in FCS_CKM.1(A). Another option is a smart card
             authorization factor, with the differentiating feature being how the value is generated – either
             by the TOE’s RBG or by the platform. An external USB token may also be used, with the
             submask value generated either by the TOE’s RBG or by the platform.
             The TOE may accept any number of authorization factors, and these are categorized as
             “submasks”. The ST author selects the authorization factors they support, and there may be
             multiple methods for a selection.
             Use of multiple authorization factors is preferable; if more than one authorization factor is
             used, the submasks produced must be combined using FCS_SMC_EXT.1.
            </note>
            <aactivity>The assurance activities for this component will be driven by the selections
              made by the ST author. This section describes assurance activities for all possible
              selections in an ST; it should be understood that if a capability is not selected in
              the ST, the noted assurance activity does not need to be performed. 
              
              <h:h4>TSS</h:h4> The
              evaluator shall examine the TSS to ensure that it describes how user authentication is
              performed. The evaluator shall verify that the authorization methods listed in the TSS
              are specified and included in the requirements in the ST. <h:br/>
              <h:b>Requirement met by the TOE</h:b> <h:br/> The evaluator shall first examine the TSS to ensure that the authorization
              factors specified in the ST are described. For password-based factors the
              examination of the TSS section is performed as part of FCS)CKM.1(A)
              Evaluation Activities. Additionally in this case, the evaluator shall verify that
              the operational guidance discusses the characteristics of external authorization
              factors (e.g., how the authorization factor must be generated; format(s) or
              standards that the authorization factor must meet) that are able to be used by
              the TOE.
              If other authorization factors are specified, then for each factor, the TSS specifies
              how the factors are input into the TOE.<h:br/>
              <h:b>Requirement met by the platform</h:b><h:br/> The evaluator shall examine the TSS to
              ensure a description is included for how the TOE is invoking the platform
              functionality and how it is getting an authorization value that has appropriate
              entropy. 
              
              <h:h4>Guidance</h:h4>The evaluator shall verify that the AGD guidance includes instructions for all of the
              authorization factors. The AGD will discuss the characteristics of external
              authorization factors (e.g., how the authorization factor is generated; format(s) or
              standards that the authorization factor must meet, configuration of the TPM device
              used) that are able to be used by the TOE.
                <h:h4>Tests</h:h4>The evaluator shall ensure that authorization using each selected
              method is tested during the course of the evaluation, setting up the method as
              described in the operational guidance and ensuring that authorization is successful and 
              that failure to provide an authorization factor results in denial to access to plaintext data..
              
              [conditional]: If there is more than one authorization factor, ensure that failure
              to supply a required authorization factor does not result in access to the decrypted
              plaintext data.
            </aactivity>
          </f-element>
        </f-component>
        <f-component id="FIA_FCT_EXT.1(1)" name="Extended: Multi-User Authorization" status="optional">
          <f-element id="FIA_FCT_EXT.1.1(1)">
            <title>The TSF shall support the use of multiple instances of authorization factors that
              result in unique KEKs. INSERT UNFINISHED</title>
         
            <note role="application"> While FIA_FCT_EXT.1.1(1) requires the TSF to support multiple
              authorization factors to produce multiple KEKs, the intent is that the TSF supports a
              system where multiple users have access to files on the underlying platform, and that
              each user has an authorization factor so that they can protect their own files from
              other users. In this case it would mean that the TOE is able to support multiple users each with their own
              authorizaton factor. </note>
            <aactivity>
              <h:h4>TSS</h:h4> INSERT <h:h4>Guidance</h:h4> INSERT <h:h4>Tests</h:h4> INERT
              FDP_PRT_EXT.2.2 - The evaluator shall examine the TSS to determine that it
              identifies each of the resources that is sharable in encrypted form (for instance,
              encrypted files may be sharable among users, but encrypted directories may not), and the
              method by which the resource can be shared among users with different authorization
              factors. This description shall also cover the TSF actions when adding or removing users
              to the set allowed to access the file. <h:br/> FDP_PRT_EXT.2.2 - The evaluator shall examine the operation
              guidance to determine that it contains instructions on how to set up and share resources
              with other users, if additional actions are necessary due to use of the encryption
              product. If different for different underlying platforms, the evaluator determines that
              all platforms listed in the ST are addressed.
              
            </aactivity>
          </f-element>
        </f-component>
      
      </subsection>
      <subsection title="Security Management (FMT)" id="fmt"> 
        <f-component id="FMT_SMF.1" name="Specification of Management Functions">
          <f-element id="FMT_SMF.1.1">
            <title>The TSF shall be capable of performing the following management functions:
                <selectables linebreak="yes">
                  <selectable>no other function</selectable>
                  <selectable>configure cryptographic functionality</selectable>
                  <selectable>change authentication factors</selectable>
                  <selectable>perform a cryptograph erase of the data by the destruction of FEKs or KEKs protecting the FEKs as described in FCS_CKM_EXT.4.1</selectable>
                  <selectable>configure the number of failed validation attempts required to trigger corrective behavior,  </selectable>
                  <selectable>configure the corrective behavior to issue in the event of an excessive number of failed validation attempts</selectable>
                  <selectable><assignable>other management functions provided by the TSF</assignable></selectable>
              </selectables>
            </title>
            <note role="application"> The intent of this requirement is to express the management
              capabilities that may be included in the TOE. Several common options are given:<h:br/>
              <h:ul>
                <h:li>If password or passphrase authorization factors are implemented by the TOE, then
                  the appropriate “change” selection must be included, along with FIA_FCT_EXT.1(2) or FIA_FCT_EXT.1(3)
                  from Appendix C.</h:li>
                <h:li>If the TOE provides for a password/passphrase complexity setting, then
                  “configure password/passphrase complexity setting” will be included, and the
                  specifics of the functionality offered can either be written from the requirement
                  as bullets points, or included in the TSS.</h:li>
                <h:li>If the TOE provides configurability of the cryptographic functions (for example,
                  key size of the FEK)—even if the configuration is the form of parameters that may
                  be passed to cryptographic functionality implement on the TOE platform--then
                  “configure cryptographic functionality” will be included, and the specifics of the
                  functionality offered can either be written in this requirement as bullet points,
                  or included in the TSS.</h:li>
                <h:li>If the TOE If the TOE uses stored FEKS or KEKs(the FEK is not directly derived from a password)
                  , then “perform a cryptograph erase of the data by the destruction of FEKs or KEKs protecting the FEKs as described in FCS_CKM_EXT.4.1” will be included.</h:li>
                <h:li>If “other management functions” are assigned, a validation authority must be
                  consulted to ensure the assurance activities and other functionality requirements
                  that may be needed are appropriately specified so that the ST can claim
                  conformance to this EP.</h:li>
              </h:ul>
            </note>
            <aactivity>The assurance activities for this component will be driven by the selections
              made by the ST author. This section describes assurance activities for all possible
              selections in an ST; it should be understood that if a capability is not selected in
              the ST, the noted assurance activity does not need to be performed. The following
              sections are divided up into “Required Activities” and “Conditional Activities” for
              ease of reference. 
              
              As the Application Software PP already includes FMT_SMF.1, the ST author should combine the selections 
              (and assignment, if performed) with those in the FMT_SMF.1 requirement in the Application Software PP to 
              form a single FMT_SMF.1 SFR in the ST. The intent of this requirement is to express the management 
              capabilities that may be included in the TOE. Several common options are given:
              
              If password or passphrase authorization factors are implemented by the TOE, then the appropriate 
              “change” selection must be included, along with FIA_FCT_EXT.1(2) from Appendix C.
              
              If the TOE provides configurability of the cryptographic functions (for example, key size of the FEK)—
              even if the configuration is the form of parameters that may be passed to cryptographic functionality 
              implement on the TOE platform--then “configure cryptographic functionality” will be included, and the specifics 
              of the functionality offered can either be written in this requirement as bullet points, or included in the TSS.
              
              If “other management functions” are assigned, a validation authority must be consulted to ensure the 
              assurance activities and other functionality requirements that may be needed are appropriately 
              specified so that the ST can claim conformance to this EP.
              
              <h:h4>TSS</h:h4>
              <h:b>Conditional Activities:</h:b> The evaluator shall examine the TSS to ensure that it
              describes the sequence of activities that take place from an implementation
              perspective when this activity is performed (for example, how it determines which
              resources are associated with the KEK, the decryption and re-encryption process), and
              ensure that the KEK and FEK are not exposed during this change. <h:br/>
              <h:b>Cryptographic Configuration:</h:b> None for this requirement. <h:br/>
              <h:b>Disable Key Recovery:</h:b> If the TOE supports key recovery, this must be stated in
              the TSS. The TSS shall also describe how to disable this functionality. This includes
              a description of how the recovery material is provided to the recovery holder. The
              guidance for disabling this capability shall be described in the AGD documentation.
                <h:h4>Guidance</h:h4>
              <h:b>Conditional Activities:</h:b> The evaluator shall examine the Operational Guidance to
              ensure that it describes how the password/passphrase-based authorization factor is to
              be changed. <h:br/>
              <h:b>Cryptographic Configuration:</h:b> The evaluator shall determine from the TSS for
              other requirements (FCS_*, FDP_PRT_EXT, FIA_AUT_EXT) what portions of the
              cryptographic functionality are configurable. The evaluator shall then review the AGD
              documentation to determine that there are instructions for manipulating all of the
              claimed mechanisms. <h:h4>Tests</h:h4>
              <h:b>Cryptographic Erase:</h:b> If the TOE uses stored FEKS or KEKs, the evaluator shall 
              examine the key chain to determine that the keys destroyed by a cryptographic erase will result in the data becoming unrecoverable.
              Testing for this activity is performed for other components in this EP. 
            </aactivity>
          </f-element>
        </f-component>
        
        
        
        <f-component id="FMT_MEC_EXT.1" name="Supported Configuration Mechanism">
          <f-element id="FMT_MEC_EXT.1.1">
            <title>The TSF shall 
              <selectables>
                <selectable>invoke the mechanisms recommended by the platform vendor for storing and setting configuration options</selectable>
                <selectable>store and protect configuration options as specified in FCS_COP.1(1)]</selectable>  
              </selectables>.
            </title>
            <note role="application"> The ST author replaces FMT_MEC_EXT.1 in the Application Software PP with this requirement, 
              and performs the appropriate selections.  The ST author ensures all configuration options are "covered" by one of 
              the two selections.  It is allowable to have some configuration stored and protected using platform-provided functions 
              and some stored by the TSF and protected using encryption per FCS_COP.1(1).
            </note>
            <aactivity>The TSS assurance activity in the Application Software PP for FMT_MEC_EXT.1 applies for either selection.  
              Additionally, if "store and protect configuration options as specified in FCS_COP.1(1)" is selected, the evaluator 
              shall ensure that the TSS identifies those options, as well as indicates where the encrypted representation of these options is stored.
              
              The test assurance activites in the Application Software PP for FMT_MEC_EXT.1 apply to all configuration options 
              identified as being stored and set using platform mechanisms.  The following test activity applies to any configuration 
              options identified as being stored and protected using encryption per FCS_COP.1(1).
              
              [Conditional] For all configuration options listed in the TSS as being stored and protected using encryption 
              per FCS_COP.1(1), the evaluator shall examine the contents of the configuration option storage (identified in the TSS) to 
              determine that the options have been encrypted. </aactivity>
          </f-element>
        </f-component>
      </subsection>
      <subsection title="Protection of the TSF (FPT)" id="fpt">
        
      
        <f-component id="FPT_KYP_EXT.1" name="Extended: Protection of Key and Key Material (FPT_KYP_EXT)">
          <f-element id="FPT_KYP_EXT.1.1">
            <title>The TSF shall 
              <selectables>
                <selectable>not store keys in non-volatile memory</selectable>
                <selectable>only store keys in non-volatile memory when
                  <selectables>
                    <selectable>wrapped, as specified in FCS_COP.1(5)</selectable>
                    <selectable>encrypted, as specified in FCS_COP.1(1)</selectable>
                    <selectable>the plaintext key is stored in the underlying platofrm's keystore as specified by FCS_STO_EXT.1.1</selectable>
                    <selectable>the plaintext key is not part of the key chain as specified in FCS_KYC_EXT.1.</selectable>
                    <selectable>the plaintext key will no longer provide access to the encrypted data after initial provisioning</selectable>
                    <selectable>the plaintext key is a key split that is combined as specified in FCS_SMC_EXT.1 and another contribution to the split is
                     <selectables>
                       <selectable>wrapped as specified in FCS_COP.1(5) or encrypted as specified in FCS_COP.1(7)</selectable>
                       <selectable>derived and not stored in non-volatile memory</selectable>
                     </selectables>
                    </selectable>
                    <selectable>the plaintext key is stored on an external storage device for use as an authorization factor.</selectable>
                    <selectable>the plaintext key is used to encrypt a key as specified in FCS_COP.1(7) or wrap a key as specified in FCS_COP.1(5) 
                      that is already encrypted as specified in FCS_COP.1(7) or wrapped as specified in FCS_COP.1(5)</selectable>
                  </selectables>
                </selectable>
                </selectables>.
            </title>
            <note role="application">The plaintext key storage in non-volatile memory is allowed for
              several reasons. If the keys exist within protected memory that is not user accessible
              on the TOE or OE, the only methods that allow it to play a security relevant role for
              protecting the FEK is if it is a key split or providing additional layers of wrapping
              or encryption on keys that have already been protected. </note>
            <aactivity>
              <h:h4>TSS</h:h4> The evaluator shall verify the TSS for a high level description of method
              used to protect keys stored in non-volatile memory.<h:br/> The evaluator shall verify
              the TSS to ensure it describes the storage location of all keys and the protection of
              all keys stored in non-volatile memory. The description of the key chain shall be
              reviewed to ensure FCS_COP.1(5) is followed for the storage of wrapped or encrypted
              keys in non-volatile memory and plaintext keys in non-volatile memory meet one of the
              criteria for storage. <h:h4>Guidance</h:h4> None. <h:h4>Tests</h:h4> None. </aactivity>
          </f-element>
        </f-component>
      </subsection>
    </section>
  </chapter>

    <appendix title="Optional Requirements" id="optional" >
        As indicated in <secref linkend="ccl"/>, the baseline requirements (those that must be
        performed by the <abbr title="Target of Evaluation" linkend="TOE">TOE</abbr>) are contained in the body of this PP.
        Additionally, there are three other types of requirements specified in 
        <appref linkend="optional"/>, <appref linkend="sel-based"/>, and
        <appref linkend="objective"/>.
        The first type (in this Appendix) are requirements that can be included in the <abbr title="Security Target" linkend="ST">ST</abbr>,
        but are not required in order for a TOE to claim conformance to this PP. The second type 
        (in <appref linkend="sel-based"/>)
        are requirements based on selections in the body of the PP: if certain selections are made,
        then additional requirements in that appendix must be included. The third type (in
        <appref linkend="objective"/> are components that are not required in
        order to conform to this PP, but will be
        included in the baseline requirements in future versions of this PP, so adoption by
        vendors is encouraged. Note that the ST author is responsible for ensuring that
        requirements that may be associated with those in 
        <appref linkend="optional"/>, <appref linkend="sel-based"/>, and
        <appref linkend="objective"/>
        but are not listed (e.g., FMT-type requirements) are also included in the ST.
    </appendix>
    
    <appendix title="Selection-Based Requirements" id="sel-based" >
        As indicated in the introduction to this PP, the baseline requirements (those that must be
        performed by the TOE or its underlying platform) are contained in the body of this PP. There
        are additional requirements based on selections in the body of the PP: if certain selections are
        made, then additional requirements below will need to be included.
    </appendix>
    
    <appendix title="Objective Requirements" id="objective">
        This Annex includes requirements that specify security functionality which also addresses
        threats. The requirements are not currently mandated in the body of this PP as they describe
        security functionality not yet widely available in commercial technology. However, these
        requirements may be included in the ST such that the TOE is still conformant to this PP, and
        it is expected that they be included as soon as possible.
    </appendix>

  <appendix id="biblio" title="References">
    <bibliography>
      <entry id="bibCC">
        <tag>CC</tag>
        <description>Common Criteria for Information Technology Security Evaluation - <h:ul>
          <h:li><h:a href="http://www.commoncriteriaportal.org/files/ccfiles/CCPART1V3.1R4.pdf">Part
                1: Introduction and General Model</h:a>, CCMB-2012-09-001, Version 3.1 Revision 4,
              September 2012.</h:li>
          <h:li><h:a href="http://www.commoncriteriaportal.org/files/ccfiles/CCPART2V3.1R4.pdf">Part
                2: Security Functional Components</h:a>, CCMB-2012-09-002, Version 3.1 Revision 4,
              September 2012.</h:li>
          <h:li><h:a href="http://www.commoncriteriaportal.org/files/ccfiles/CCPART3V3.1R4.pdf">Part
                3: Security Assurance Components</h:a>, CCMB-2012-09-003, Version 3.1 Revision 4,
              September 2012.</h:li>
          </h:ul></description>
      </entry>
      <entry id="bibAppPP">
        <tag>AppPP</tag>
        <description>
          <h:a href="https://www.niap-ccevs.org/pp/">Protection Profile for Application Software</h:a>
        </description>
      </entry>
      <entry id="FIPS140-2">
        <tag>FIPS140-2</tag>
        <description> Federal Information Processing Standard Publication (FIPS-PUB) 140-2, Security
          Requirements for Cryptographic Modules, National Institute of Standards and Technology,
          March 19, 2007 </description>
      </entry>
      <entry id="FIPS180-4">
        <tag>FIPS180-4</tag>
        <description> Federal Information Processing Standards Publication (FIPS-PUB) 180-4, Secure
          Hash Standard, March, 2012 </description>
      </entry>
      <entry id="FIPS186-4">
        <tag>FIPS186-4</tag>
        <description> Federal Information Processing Standard Publication (FIPS-PUB) 186-4, Digital
          Signature Standard (DSS), National Institute of Standards and Technology, July 2013
        </description>
      </entry>
      <entry id="FIPS197">
        <tag>FIPS197</tag>
        <description>Federal Information Processing Standards Publication (FIPS-PUB) 197,
          Specification for the Advanced Encryption Standard (AES), November 26, 2001 </description>
      </entry>
      <entry id="FIPS198-1">
        <tag>FIPS198-1</tag>
        <description>Federal Information Processing Standards Publication (FIPS-PUB) 198-1, The
          Keyed-Hash Message Authentication Code (HMAC), July 2008 </description>
      </entry>
      <entry id="SP800-38A">
        <tag>NIST800-38A</tag>
        <description>NIST Special Publication 800-38A, Recommendation for Block Cipher Modes of
          Operation: Methods and Techniques, 2001 Edition </description>
      </entry>
      <entry id="SP800-56A">
        <tag>NIST800-56A</tag>
        <description>NIST Special Publication 800-56A, Recommendation for Pair-Wise Key
          Establishment Schemes Using Discrete Logarithm Cryptography (Revised), March 2007
        </description>
      </entry>
      <entry id="SP800-56B">
        <tag>NIST800-56B</tag>
        <description>NIST Special Publication 800-56B, Recommendation for Pair-Wise Key
          Establishment Schemes Using Integer Factorization Cryptography, August 2009 </description>
      </entry>
      <entry id="SP800-90">
        <tag>NIST800-90</tag>
        <description>NIST Special Publication 800-90, Recommendation for Random Number Generation
          Using Deterministic Random Bit Generators (Revised), March 2007 </description>
      </entry>
      <entry id="SP800-132">
        <tag>NIST800-132</tag>
        <description>NIST Special Publication 800-132, Recommendation for Password-Based Key
          Derivation, December 2010 </description>
      </entry>
      <entry id="SP800-38F">
        <tag>NIST800-38F</tag>
        <description>NIST Special Publication 800-38F,Recommendation for Block Cipher Modes of
          Operation: Methods for Key Wrapping, December 2012 </description>
      </entry>
    </bibliography>
  </appendix>
  <appendix id="acronyms" title="Acronyms">
    <acronyms>
      <entry>
        <term>AES</term>
        <description>Advanced Encryption Standard</description>
      </entry>
      <entry>
        <term>CC</term>
        <description>Common Criteria</description>
      </entry>
      <entry>
        <term>CM</term>
        <description/>
      </entry>
      <entry>
        <term>FAK</term>
        <description>File Authentication Key</description>
      </entry>
      <entry>
        <term>FEK</term>
        <description>File Encryption Key</description>
      </entry>
      <entry>
        <term>DRBG</term>
        <description>Deterministic Random Bit Generator</description>
      </entry>
      <entry>
        <term>EAL</term>
        <description>Evaluation Assurance Level</description>
      </entry>
      <entry>
        <term>ECC</term>
        <description>Elliptic Curve Cryptography</description>
      </entry>
      <entry>
        <term>ECC CDH</term>
        <description>Elliptic Curve Cryptography Cofactor Diffie-Hellman (see NIST SP 800-56A rev 2,
          section 6.2.2.2)</description>
      </entry>
      <entry>
        <term>EP</term>
        <description>Extended Package</description>
      </entry>
      <entry>
        <term>FIPS</term>
        <description>Federal Information Processing Standards</description>
      </entry>
      <entry>
        <term>ISSE</term>
        <description>Information System Security Engineers</description>
      </entry>
      <entry>
        <term>IT</term>
        <description>Information Technology</description>
      </entry>
      <entry>
        <term>KDF</term>
        <description>Key Derivation Function</description>
      </entry>
      <entry>
        <term>KEK</term>
        <description>Key Encryption Key</description>
      </entry>
      <entry>
        <term>PBKDF</term>
        <description>Password-Based Key Derivation Function</description>
      </entry>
      <entry>
        <term>PIN</term>
        <description>Personnel Identification Number</description>
      </entry>
      <entry>
        <term>PKI</term>
        <description>Public Key Infrastructure</description>
      </entry>
      <entry>
        <term>PP</term>
        <description>Protection Profile</description>
      </entry>
      <entry>
        <term>PUB</term>
        <description>Publication</description>
      </entry>
      <entry>
        <term>RBG</term>
        <description>Random Bit Generator </description>
      </entry>
      <entry>
        <term>SAR</term>
        <description>Security Assurance Requirement</description>
      </entry>
      <entry>
        <term>SF</term>
        <description>Security Function</description>
      </entry>
      <entry>
        <term>SFR</term>
        <description>Security Functional Requirement</description>
      </entry>
      <entry>
        <term>ST</term>
        <description>Security Target</description>
      </entry>
      <entry>
        <term>TOE</term>
        <description>Target of Evaluation</description>
      </entry>
      <entry>
        <term>TSF</term>
        <description>TOE Security Functionality</description>
      </entry>
      <entry>
        <term>TSFI</term>
        <description>TSF Interface</description>
      </entry>
      <entry>
        <term>TSS</term>
        <description>TOE Summary Specification </description>
      </entry>
    </acronyms>
  </appendix>
</PP>