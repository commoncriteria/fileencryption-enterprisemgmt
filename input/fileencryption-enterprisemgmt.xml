<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="..\transforms\pp2html.xsl"?>

<?xml-model href="https://raw.githubusercontent.com/commoncriteria/transforms/master/schemas/CCModule.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?>
<Module  target-products="File Encryption Enterprise Management Module Draft" xmlns="https://niap-ccevs.org/cc/v1" xmlns:h="http://www.w3.org/1999/xhtml" name="file encryption enterprise management">  
  <PPReference>
    <ReferenceTable>
      <PPVersion>1.0</PPVersion>
      <PPAuthor>National Information Assurance Partnership</PPAuthor>
      <PPPubDate>2018-06-15</PPPubDate>
     <Keywords>file encryption; encryption</Keywords>
      </ReferenceTable>
  </PPReference>
  <RevisionHistory>
    <entry>
      <version>1.0 DRAFT</version>
      <date>2018-06-15</date>
      <subject>Initial Release</subject>
    </entry>
  </RevisionHistory>
  <chapter title="Introduction" id="int">
    <section title="Overview" id="ppoverview"> This Module Module describes security
      requirements for an encryption management product that is configurable for the data it encrypts and is
      intended to provide a minimal, baseline set of requirements that are targeted at mitigating
      well defined and described threats. However, this Module is not complete in itself, but rather
      extends the Protection Profile for Application Software (<cite linkend="bibAppPP"/>). This
      introduction will describe the features of a compliant Target of Evaluation, and will also
      discuss how this Module is to be used in conjunction with the <cite linkend="bibAppPP"/>. 
    
    The use case for a product conforming to the FE module is to protect data at rest on a device
    that is lost or stolen while powered off without any prior access by an adversary. The use case
    where an adversary obtains a device that is in a powered state and is able to make modifications
    to the environment or the TOE itself (e.g., evil maid attacks) is not addressed by that module. <h:br/>
      
      While that use case is still true for the Enterprise Management Module, this PP-module also
      expands the use case to include protecting the communications between the Enterprise
      Management Server and the client device through the use of a trusted channel. It also expands
      the use case to include the optional abilities of the EM to interact with clients (with proper
      authorization), to direct it to perform sanitation of keys and material on the device, 
      to manage and store parts of the key chain required for decryption on the client, or to issue a
      recovery credential to reset the authentication factor if it has been lost.
      
      The TOE and Its Supporting Environment:
      
      The environment in which the EM functions is expected to exist is on a back end server, not
      on the endpoint system. It is expected to have secure access to a certified LDAP
      (e.g. Active Directory) and access to a certified means of storing key material when not in use.
      The EM shall not have the ability to access the secured stored key material without verification
      of access authority by the LDAP.
      The Operating System environment may make a full range of services available to the
      Enterprise Management Module, including hardware drivers, cryptographic libraries, and
      perhaps other services external to the TOE.
      The EM TOE may include or leverage features and functions within the operational
      environment.
    </section>
    
    <section id="glossary" title="Terms">
      The following sections provide both Common Criteria and technology terms used in this Module. 
      
      <subsection title="Common Criteria Terms">
        <glossary>
          <entry>
            <term>Assurance</term>
            <description> Grounds for confidence that a TOE meets the SFRs [CC1]. </description>
          </entry>
          <entry>
            <term><abbr title="Common Criteria">CC</abbr></term>
            <description>Common Criteria for Information Technology Security
              Evaluation.</description>
          </entry>
          <entry>
            <term>Distributed TOE</term>
            <description>A TOE composed of multiple components operating as a logical whole.</description>
          </entry>
          <entry>
            <term>Operational Environment </term>
            <description> Hardware and software that are outside the TOE boundary that support the
              TOE functionality and security policy, including the host platform, its firmware, and
              the operating system. </description>
          </entry>
          <entry>
            <term><abbr title="Protection Profile">PP</abbr></term>
            <description>An implementation-independent set of security requirements for a category
              of products.</description>
          </entry>
          <entry>
            <term><abbr title="Security Target">ST</abbr></term>
            <description>A set of implementation-dependent security requirements for a specific
              product.</description>
          </entry>
          <entry>
            <term><abbr title="Target of Evaluation">TOE</abbr></term>
            <description>The product under evaluation. In this case, application software and its
              supporting documentation.</description>
          </entry>
          <entry>
            <term><abbr title="TOE Security Functionality">TSF</abbr></term>
            <description>The security functionality of the product under evaluation.</description>
          </entry>
          <entry>
            <term><abbr title="TOE Security Policy">TSP</abbr></term>
            <description>The set of rules that regulate how assets are managed, protected and
              distributed within a TOE.</description>
          </entry>
          <entry>
            <term><abbr title="TOE Summary Specification">TSS</abbr></term>
            <description>A description of how a <abbr linkend="TOE"/> satisfies the SFRs in a <abbr
              linkend="ST"/>. </description>
          </entry>
          <entry>
            <term><abbr title="Security Functional Requirement">SFR</abbr></term>
            <description>A requirement for security enforcement by the <abbr linkend="TOE"/>.
            </description>
          </entry>
          <entry>
            <term><abbr title="Security Assurance Requirement">SAR</abbr></term>
            <description>A requirement to assure the security of the <abbr linkend="TOE"/>.
            </description>
          </entry>
          <entry>
            <term>Target of Evaluation </term>
            <description> A set of software, firmware and/or hardware possibly accompanied by guidance. [CC1]</description>
          </entry>
        </glossary>
      </subsection>
      
      <subsection title="Technical Terms">
        <glossary>
          <entry>
            <term>Authorization factor (AF) </term>
            <description> A value that a user knows, has, or is (e.g. password, token, etc.) submitted 
              to the TOE to establish that the user is in the community authorized to use the hard disk.
              This value is used in the derivation or decryption of the FEK and eventual decryption of the files.
              Note that these values may or may not be used to establish the particular identity of the user.  </description>
          </entry>
          <entry>
            <term>Key Sanitization </term>
            <description> A method of sanitizing encrypted data by securely overwriting the key, as described in the key destruction requirement, that was encrypting the data. 
            </description>
          </entry>
          <entry>
            <term>File/Set of files </term>
            <description> The user data that is selected to be encrypted, which can include
              individual file encryption (with a FEK per file) or a set of files encrypted with a
              single FEK. </description>
          </entry>
          <entry>
            <term>File Authentication Key (FAK) </term>
            <description> The secret value used as input when a keyed hash function is used to
              perform data authentication. </description>
          </entry>
          <entry>
            <term>File Encryption Key (FEK) </term>
            <description> The key that is used by the encryption algorithm to encrypt the selected
              user data on the host machine. </description>
          </entry>
          <entry>
            <term>Host Platform</term>
            <description>The local hardware and software the TOE is running on, this does not include 
              any peripheral devices (e.g. USB devices) that may be connected to the local hardware and software. </description>
          </entry>
          <entry>
            <term>Key Chaining</term>
            <description>The method of using multiple layers of encryption keys to protect data. 
              A top layer key encrypts a lower layer key which encrypts the data; this method can have any number of layers.</description>
          </entry>
          <entry>
            <term>Key Encryption Key (KEK) </term>
            <description> The key that is used to encrypt the FEK or another KEK. </description>
          </entry>
          <entry>
            <term>Keying material </term>
            <description> Key material is commonly known as critical security parameter (CSP) data, and also includes authorization data, nonces, and metadata. </description>
          </entry>
          <entry>
            <term>Key Release Key </term>
            <description> A key used to release another key from storage, it is not used for the direct derivation or decryption of another key. </description>
          </entry>
          <entry>
            <term>Noise Source </term>
            <description> The component of an RBG that contains the non-deterministic,
              entropy-producing activity. </description>
          </entry>
          <entry>
            <term>Non-Volatile Memory</term>
            <description> A type of computer memory that will retain information without power.  </description>
          </entry>
          <entry>
            <term>Powered-Off State </term>
            <description> The device has been shut down. </description>
          </entry>
          <entry>
            <term>Protected Data</term>
            <description> This refers to all files designated by the user for encryption. </description>
          </entry>
          <entry>
            <term>Submask </term>
            <description> A submask is a bit string that can be generated and stored in a number of ways. </description>
          </entry>
        </glossary>
        
      </subsection>
      
    </section>
    <section title="Compliant Targets of Evaluation" id="complianttargets">     
    The target of evaluation for this Module is the Enterprise Management (EM) function of
    an FE solution. The EM function is designed to augment the claims made in the File Encryption Module;
    therefore, this functionality is intended to be evaluated in conjunction with a TOE that also
    claims conformance to that module at minimum.
    The following sections provide an overview of the security functionality of this PP-module.</section>
    
    <section title="Use Cases" id="usecases">
        <usecases>
          <usecase title="Enterprise Encryption Management" id="usecase1">
            <description>The use case for this Module is protecting the communications between the Enterprise
              Management Server and the client device through the use of a trusted channel. Including the optional abilities of the EM to interact with clients (with proper
              authorization), to direct it to perform sanitation of keys and material on the device, 
              to manage and store parts of the key chain required for decryption on the client, or to issue a
              recovery credential to reset the authentication factor if it has been lost. </description>
          </usecase>
        </usecases>
         
    </section>
    
  </chapter>
  <chapter title="Conformance Claims" id="conf">
    <cclaims>
      <cclaim title="Conformance Statement">
        <description>
          <h:p>
            The Protection Profile for Application Software (<cite linkend="bibAppPP"/>)
            defines the baseline Security Functional Requirements (SFRs) and Security Assurance
            Requirements (SARs) for application software products. This <abbr linkend="PP-Module"/> serves to
            extend the ApSo PP baseline with additional SFRs and associated Evaluation Activities
            specific to an enterprise encryption managmenet product.
            Evaluation Activities are the actions that the evaluator
            performs in order to determine a file encryption product's compliance to the SFRs.
          </h:p>
          <h:p>
            This <abbr linkend="PP-Module"/> conforms to Common Criteria <cite linkend="bibCC"/> for Information
            Technology Security Evaluation, Version 3.1, Revision 4. It is CC Part 2 extended and CC
            Part 3 conformant. In order to be conformant to this <abbr linkend="PP-Module"/>, the <abbr
              linkend="ST"/> must include all components in this <abbr linkend="PP-Module"/> and the
            associated ApSo PP that are: <h:ul><h:li>unconditional (which are always required)</h:li>
              <h:li>selection-based (which are required when certain selections are chosen in the
                unconditional requirements)</h:li>
            </h:ul> and may include optional and/or objective components that are desirable but not
            required for conformance. 
          </h:p>
          <h:p>
            In accordance with CC Part 1, dependencies are not included when they are addressed by other SFRs.
            The evaluation activities provide adequate proof that any dependencies are also satisfied.
          </h:p>
        </description>
      </cclaim>
    </cclaims>
  </chapter>
  
  <chapter title="Security Problem Description" id="spd"> The primary asset that is being protected
    is the sensitive user data stored on a system. The threat model thus focuses on a host machine
    that has been compromised by an unauthorized user. This section addresses threats to the TOE
    only. 
    
    <section title="Threats" id="threats"> 
      
      <threats>
        <threat id="T.UNAUTHORIZED_DATA_ACCESS">
          <description>
             An attacker
            accessing the data on the encrypted file(s) by getting access to a protected file(s), attaching it to a host system controlled
            by the attacker and using the key material, or optionally a recovery credential to access the data. The file encryption module addresses
            the primary threat of unauthorized disclosure of recovery material. </description>
          <objective-refer ref="O.KEY_MATERIAL_PROTECTION">
            <rationale>The threat T.UNAUTHORIZED_DATA_ACCESS is countered by O.KEY_MATERIAL_PROTECTION as this
              provides for encyption of keys that protect data.</rationale>
          </objective-refer>
        </threat>
        <threat id="T.UNAUTHORIZED_DATA_ACCESS_SERVER">
          <description>
            An attacker accessing the Management Server by getting access to the management server and generating a recovery key chain for an endpoint. 
            The File Encryption Module addresses the primary threat of unauthorized disclosure of data protected on the endpoint;
            this adds the Management Server to the scope of the threat. </description>
          <objective-refer ref="O.RECOVERY_PROTECTION">
            <rationale>The threat T.UNAUTHORIZED_DATA_ACCESS_SERVER is countered by O.RECOVERY_PROTECTION as this
              provides for protection of recovery information.</rationale>
          </objective-refer>
        </threat>
        <threat id="T.KEYING_MATERIAL_COMPROMISE_SERVER">
          <description>
            Possession of any of the keys, authorization factors, submasks, and random numbers
            or any other values that contribute to the creation of keys or authorization factors could allow an unauthorized user to defeat
            the encryption. This PP-Module considers possession of key material of equal importance to the data itself. Threat agents may
            look for key material in unencrypted storage on the Management Server and in external databases in the operating environment (OE), e.g. SQL database. </description>
          <objective-refer ref="O.KEY_MATERIAL_SERVER">
            <rationale>The threat T.KEYING_MATERIAL_COMPROMISE_SERVER is countered by O.KEY_MATERIAL_SERVER as this
              provides for properly protection of key material on the server.</rationale>
          </objective-refer>
        </threat>
        <threat id="T.MAN_IN_THE_MIDDLE">
          <description>
            An attacker listening on the 
            communication between the Management Server and the Client(s) to obtain the user’s credential, keys, or recovery material.
          </description>
          <objective-refer ref="O.SECURE_CHANNEL">
            <rationale>The threat T.MAN_IN_THE_MIDDLE is countered by O.SECURE_CHANNEL as this
              protects against man in the middles attacks.</rationale>
            </objective-refer>
        </threat>
        <threat id="T.UNAUTHORIZED_ADMINISTRATOR_ACCESS">
          <description>
            An attacker masquerading as an administrator to the Management Server.
          </description>
          <objective-refer ref="O.VERIFIED_ADMIN">
            <rationale>The threat T.UNAUTHORIZED_ADMINISTRATOR_ACCESS is countered by O.VERIFIED_ADMIN as this
              provides methods to verify the administrator.</rationale>
          </objective-refer>
        </threat>
        <threat id="T.UNTRUSTED_COMMUNICATION_CHANNELS">
          <description>
            An attacker targeting the Management Server
            using insecure tunneling protocols or the presence of an unencrypted path to disclose keys, key material, or recovery
            material transferred between the endpoint and the Management Server.
          </description>
          <objective-refer ref="O.TRUSTED_COMMUNICATION_CHANNEL">
            <rationale>The threat T.UNTRUSTED_COMMUNICATION_CHANNELS is countered by O.TRUSTED_COMMUNICATION_CHANNE as this
              provides a trusted channel for server endpoint communications.</rationale>
          </objective-refer>
        </threat>
      </threats>
    </section>
    

      <section title="Assumptions" id="assumptions">
        <assumptions>
         
          <assumption id="A.SECURED_CONFIGURATION">
            <description>The Management Server and the remote endpoints are installed and configured in accordance with their evaluated configuration. </description>
            <objective-refer ref="OE.SECURED_CONFIGURATION">
              <rationale>The operational environment objective OE.SECURED_CONFIGURATION is realized through A.SECURED_CONFIGURATION.</rationale>
              </objective-refer>
          </assumption>
          <assumption id="A.SECURED_ENVIRONMENT">
            <description>Any environmental components required to support the functionality of the Management Server (e.g. underlying operating system, firewall, database) are installed and configured in accordance with its evaluated configuration.</description>
            <objective-refer ref="OE.SECURED_ENVIRONMENT">
              <rationale>The operational environment objective OE.SECURED_ENVIRONMENT is realized through A.SECURED_ENVIRONMENT.</rationale>
            </objective-refer>
          </assumption>
          <assumption id="A.PHYSICAL_SERVER">
            <description>The platform on which the Management Server resides is physically protected in its Operational Environment and not subject to physical attacks that compromise the security and/or interfere with the platform’s correct operation.</description>
            <objective-refer ref="OE.PHYSICAL_SERVER">
              <rationale>The operational environment objective OE.PHYSICAL_SERVER is realized through A.PHYSICAL_SERVER.</rationale>
            </objective-refer>
          </assumption>
          <assumption id="A.ENVIRONMENTAL_STORAGE">
            <description>Any key storage mechanism provided by the Operational Environment is able to provide the same level of security as a TOE-internal storage mechanism that is conformant to this PP-Configuration.</description>
            <objective-refer ref="OE.ENVIRONMENTAL_STORAGE">
              <rationale>The operational environment objective OE.ENVIRONMENTAL_STORAGE is realized through A.ENVIRONMENTAL_STORAGE.</rationale>
            </objective-refer>
          </assumption>
        </assumptions>
      </section>
  
  </chapter>
  <chapter title="Security Objectives" id="obj">The Security Problem described in
      Section 2 will be addressed by a combination of cryptographic capabilities. Compliant TOEs
      will provide security functionality that addresses threats to the TOE and enforces policies
      that are imposed by law and regulation. The following subsections provide a description of the
      security objectives required to meet the threats/policies previously discussed. The
      description of these security objectives are in addition to that described in the <cite
        linkend="bibAppPP"/>.<h:br/> Note: in each subsection below particular security objectives are
      identified (highlighted by O.) and they are matched with the associated security functional
      requirements (SFRs) that provide the mechanisms to satisfy the objectives.<h:br/> The Security
      Objectives are the requirements for the Target of Evaluation (TOE) and for the Operational
      Environment derived from the threats in Section 2. 
      
    <section title="Security Objectives for the TOE" id="objtoe"> 
      <SOs>
        <SO id="O.KEY_MATERIAL_PROTECTION">
          <description>
            <h:b>Protection of Key Material:</h:b> FPT_KYP_EXT.3 requires that the key material, and optionally recovery credentials
            be uniquely associated with the endpoint at a minimum. Additionally, key material may also be associated with a
            specific system or user to prevent an attacker from accessing the data on the endpoint by transfering the data
            in a host with weaker security. A product which distributes keys to meet the requirements of FPT_KYP_EXT.3 will
            additionally prevent an attacker from gaining access to the encrypted data. </description>
          <component-refer ref="FPT_KYP_EXT.3"/>
          <consistency-rationale>
            This objective is consistent with <base-name/>.
          </consistency-rationale>
        </SO>
        <SO id="O.RECOVERY_PROTECTION">
          <description>
            <h:b>Recovery Protection:</h:b> FIA_UAU.1 requires the administrator to be authenticated prior to allowing the administrator
            to manage the product via the remote console. FIA_UID.1 requires the admin to be identified prior to allowing the administrator to manage the
            product via the remote console. FMT_MTD.1 requires that actions which result in changes to key material, user authentication policy and recovery
            are constrained to administrators and specific times. FMT_SMR.2 requires users be assigned roles. FCS_VAL_EXT.2, if selected, requires user
            authentication to be validated by the Operational Environment or the TOE prior to releasing a recovery value. <h:br/>
            
            The Optional capability which may be provided by the TSF would include encryption of data stored on the server, as validated by 
            FCS_COP.1(f); and certificate-based authentication, validated by FIA_X509_EXT.2 and validation, as validated by FIA_X509_EXT.1.
            
          </description>
          <component-refer ref="FIA_UAU.1"/>
          <component-refer ref="FIA_UID.1"/>
          <component-refer ref="FMT_MTD.1"/>
          <component-refer ref="FMT_SMR.2"/>
          <component-refer ref="FCS_COP.1(1)"/>
          <component-refer ref="FCS_VAL_EXT.2"/>
          <component-refer ref="FIA_X509_EXT.1"/>
          <component-refer ref="FIA_X509_EXT.2)"/>
          <consistency-rationale>
            This objective is consistent with <base-name/>.
          </consistency-rationale>
        </SO>
        
        <SO id="O.KEY_MATERIAL_SERVER">
          <description>
            <h:b>Key Material Server:</h:b>
            The keying material that threat agents may attempt to compromise are generated by the TOE as specified by FCS_CKM.1(a) . One or more submasks may be utilized on the endpoint to protect the FEK or a KEK, part of the keychain to protect that is stored on teh server for additional authorization or recovery. The server key chain can be maintained by several methods, including: <h:br/>
            
            •	Key generation [FCS_CKM.1(a)]
            •	Key establishment [FCS_CKM.2]
            •	Key distribution [FCS_CKM.2]
            •	Key derivation [FCS_KDF_EXT.1]
            •	Key attribution [FPT_KYP_EXT.3]
            •	Key combining [FCS_COP.1(b)]
            •	Key derivation [FCS_COP.1(c)]
            •	Key wrapping [FCS_COP.1(d)]
            •	Key transport [FCS_COP.1(e)]
            •	Key combining [FCS_SMC_EXT.1]
            •	Key storage [FPT_KYP_EXT.1, FPT_KYP_EXT.2]
            •	Key encryption [FCS_COP.1(g)]
            •	Salt, Nonce, and IV generation [FCS_SNI_EXT.1]
            
            Key chains may be maintained using asymmetric [FCS_CKM.1(a)] and/or symmetric [FCS_CKM.1(b)]. <h:br/>
            
            These requirements ensure keys are properly generated and protected. If selected, FMT_MOF.1 ensures that
            only administrators can select the encryption algorithms and key sizes. Only administrators can perform management
            functions on the Enterprise Management Server as defined in FMT_SMF.1. <h:br/>
            
            FCS_KYC_EXT.1 extends the requirements of File Encryption Module key chaining to key chains generated or maintained by the Server. <h:br/>
            
            FPT_ITT.1 ensures that keys and key material transported between the EM and the endpoint are protected from disclosure, modification, deletion, substitution, reordering or insertion. <h:br/>
            
            FPT_KYP_EXT.1 ensures unwrapped key material is not stored in non-volatile memory minimizing the exposure of plaintext keys and key material.
            
            The following optional components ensure that key material is not exposed through the communication channel between an Enterprise Server and the endpoint,
            if remote management is supported by the TSF. The requirements for establishing keys are validated by FCS_CKM.2 which relies on one or more of the
            following SFR’s to implement secure communications: <h:br/>
            
            •	FCS_HTTPS_EXT.1, 
            •	PP-Module for VPN Client, 
            •	FCS_SSHS_EXT.1, 
            •	FCS_SSHC_EXT.1, 
            •	FCS_TLSC_EXT.1 (and optionally FCS_TLSC_EXT.3 depending on the claimed ciphersuites), and 
            •	FCS_TLSS_EXT.1 (and optionally FCS_TLSS_EXT.3 depending on the claimed ciphersuites).
            
            The various iterations of FCS_COP.1 as well as FCS_RBG_EXT.1 all validate that the cryptography used to initiate and protect
            the communication channel protocols between the Enterprise Server and the endpoint, if remote management is supported by the TSF. If implemented
            on the server, FCS_CKM.4(a) ensures proper destruction of keys and key material on the server when no longer needed.
            
            In order to ensure that a key is only released to the appropriate endpoint, FCS_KYP_EXT.3 ensures that there is attribution of the endpoint
            or encrypted file(s) and a key. The optional Server requirement FCS_CKM.2 ensures that if a key is communicated between the server and the
            endpoint, keys distributed by the server are given to the correct endpoint for the purpose of delivering a key.
            
          </description>
          <component-refer ref="FIA_AUT_EXT.2"/>
          <component-refer ref="FPT_KYP_EXT.2"/>
          <component-refer ref="FPT_KYP_EXT.3"/>
          <component-refer ref="FCS_SMC_EXT.1"/>
          <component-refer ref="FMT_SMF.1"/>
          <component-refer ref="FPT_ITT.1"/>
          <component-refer ref="FCS_CKM.1(a)"/>
          <component-refer ref="FCS_VAL_EXT.2"/>
          <component-refer ref="FCS_CKM_EXT.4"/>
          <component-refer ref="FCS_RBG_EXT.1"/>
          <component-refer ref="FCS_COP.1(2)"/>
          <component-refer ref="FCS_COP.1(4)"/>
          <component-refer ref="FCS_COP.1(5)"/>
          <component-refer ref="FCS_COP.1(7)"/>
          <component-refer ref="FCS_KDF_EXT.1"/>
          <component-refer ref="FMT_MOF.1"/>
          <consistency-rationale>
            This objective is consistent with <base-name/>.
          </consistency-rationale>
        </SO>
        <SO id="O.SECURE_CHANNEL">
          <description>
            <h:b>Secure Channel:</h:b> : FPT_ITT.1 ensures protection of intra TOE communication from disclosure, modification, 
            reordering, substitution, or deletion If server side key generation is implemented, FCS_CKM.1(a) ensures sufficiently
            strong keys correctly generated on the server to meet the requirements of FTP_TRP.1. Products implementing cryptographic 
            communication protocols between the server and managed endpoints must meet the requirements for the specific protocols as
            defined in any of {FCS_HTTPS_EXT.1, PP-Module for VPN Client, FCS_SSHC_EXT.1, FCS_SSHS_EXT.1, FCS_TLSC_EXT.1, FCS_TLSS_EXT.1}. 
            
            If TLS is supported, then FCS_TLSC_EXT.3 and/or FCS_TLSS_EXT.3 may also apply, depending on the claimed TLS ciphersuites.
            If the EM Server generates signatures to request or verify certificates, FCS_COP.1(a) ensures correct cryptographic
            operation in signature generation process. </description>
          
          <component-refer ref="FPT_ITT.1"/>
          <component-refer ref="FCS_CKM.1(a)"/>
          <component-refer ref="FCS_COP.1(a)"/>
          <consistency-rationale>
            This objective is consistent with <base-name/>.
          </consistency-rationale>
        </SO>
        <SO id="O.VERIFIED_ADMIN">
          <description>
            <h:b>Verified Admin:</h:b> FIA_UAU.1 requires that the administrator be authenticated by the EM. 
            The administrator is required by FIA_UID.1 to successfully authenticate to the EM prior to being permitted to perform management functions on behalf of the administrator.
          </description>
          <component-refer ref="FIA_UAU.1"/>
          <component-refer ref="FIA_UID.1"/>
          <consistency-rationale>
            This objective is consistent with <base-name/>.
          </consistency-rationale>
        </SO>
        
        <SO id="O.TRUSTED_COMMUNICATION_CHANNEL">
          <description>FPT_TRP.1 addresses the threat of disclosure of keys, key material, or recovery material transferred between
            the endpoint or a remote administrator and the Management Server when transmitted over untrusted communication channels
            by requiring use of IPsec, SSH, TLS, and/or TLS/HTTPS protocols when such data passes through those channels.<h:br/>
            
            The selection-based communication protocol SFR’s FCS_HTTPS_EXT.1, PP-Module for VPN Client, FCS_SSHC_EXT.1, and FCS_TLSC_EXT.1
            ensure correct implementation of the protocols required by FTP_TRP.1. If TLS is supported, then FCS_TLSS_EXT.3 may also
            apply, depending on the claimed TLS ciphersuites. FCS_RBG_EXT.1 ensures sufficiently strong keys are generated for 
            the communication protocols previously referenced. FIA_X509_EXT.1, FIA_X509_EXT.2, and FIA_X509_EXT.3 ensure
            the communication channel is established only with a server that is authenticated. FCS_COP.1(a) ensures correct generation of cryptographic signatures. <h:br/>
            
            If the TSF generates password authorization factors, the requirements of FCS_PCC_EXT.1 ensure that the password data is not subjected
            to unauthorized disclosure or brute force attack.
          </description>
          <component-refer ref="FPT_TRP.1"/>
          <component-refer ref="FCS_COP.1(3)"/>
          <component-refer ref="FCS_CKM.1(a)"/>
          <component-refer ref="FCS_RBG_EXT.1"/>
          <component-refer ref="FIA_X509_EXT.1"/>
          <component-refer ref="FIA_X509_EXT.2"/>
          <consistency-rationale>
            This objective is consistent with <base-name/>.
          </consistency-rationale>
        </SO>
      </SOs>
    </section>
    
    <section title="Security Objectives for the Operational Environment" id="objenv"> The
      Operational Environment of the TOE implements technical and procedural measures to assist the
      TOE in correctly providing its security functionality (which is defined by the security
      objectives for the TOE). The security objectives for the Operational Environment consist of a
      set of statements describing the goals that the Operational Environment should achieve.<h:br/>
      This section defines the security objectives that are to be addressed by the IT domain or by
      non-technical or procedural means. The assumptions identified in Section 3 are incorporated as
      security objectives for the environment. 
      
      <SOs>
        <SO id="OE.SECURED_CONFIGURATION">
          <description>The Management Server and remote endpoints are configured in accordance with its associated operational guidance
            so that the level of security that is provided by the TOE is consistent with its evaluated configuration.</description>
          <component-refer ref="FMT_SMF.1"/>
	  <consistency-rationale></consistency-rationale>
        </SO>
        <SO id="OE.SECURED_ENVIRONMENT">
          <description>The components of the Management Server’s underlying platform are configured in accordance with their associated 
            operational guidance so that the TOE is deployed in an environment that is consistent with its evaluated configuration. </description>
          <component-refer ref="FMT_SMF.1 "/>
	  <consistency-rationale></consistency-rationale>
        </SO>
        <SO id="OE.PHYSICAL_SERVER">
          <description>The Operating environment will provide a cryptographic function capability
            that is commensurate with the requirements and capabilities of the TOE.</description>
          <component-refer ref="FCS_KYC_EXT.1"/>
	  <consistency-rationale></consistency-rationale>
        </SO>
        <SO id="OE.ENVIRONMENTAL_STORAGE">
          <description>If the TOE relies on the Operational Environment for key storage, the storage mechanism will provide at least the same 
            level of security as a TOE-internal storage mechanism that is conformant to this PP-Configuration.</description>
          <component-refer ref="FPT_KYP_EXT.2"/>
	  <consistency-rationale></consistency-rationale>
        </SO>
       </SOs>
    </section>
    
    <section title="Security Objectives Rationale" id="SOR">
    </section>
  </chapter>

  <chapter title="Security Requirements" id="req">
    <base-pp 
      product="application"
      name="Application Software" short="ApSo" 
      url="https://www.niap-ccevs.org/Profile/Info.cfm?PPID=394&amp;id=394"
      xmlurl="https://raw.githubusercontent.com/commoncriteria/application/c51970161d3a47fe8a7c23552f372745a638ba7d/input/application.xml">
      <modified-sfrs></modified-sfrs>
      <additional-sfrs>
      <subsection title="Cryptographic Support (FCS)" id="fcs">
        <f-component id="FCS_VAL_EXT.1" name="Extended: Admin Validation">
          <consistency-rationale>
          </consistency-rationale>
          <f-element id="FCS_VAL_EXT.1.1">
            <title>The TSF shall perform validation of the admin by 
              <selectables>
                <selectable>by receiving assertion of the user’s validity from: 
                  <assignable>Operational Environment component responsible for user authentication</assignable></selectable>
                <selectable> validating the 
                  <selectables> 
                  <selectable>submask</selectable>
                  <selectable>intermediate key</selectable>
                </selectables>using the following method(s): 
                  <selectables>
                    <selectable>key wrap as specified in FCS_COP.1(5)</selectable>
                    <selectable>hash the 
                      <selectables>
                        <selectable>submask</selectable>
                        <selectable>intermediate key</selectable>
                      </selectables>as specified in FCS_COP.1.1(2) as specified the Application Software PP
                      and compare it to a stored hashed </selectable> 
                    <selectable>decrypt a known value using the 
                      <selectables>
                        <selectable>submask</selectable>
                        <selectable>intermediate key</selectable>
                      </selectables> as specified in FCS_COP.1(1) and compare it against a stored known value]</selectable>
                  </selectables> </selectable>
              </selectables>
              
            </title>
          </f-element>
          
            <f-element id="FCS_VAL_EXT.1.2">
              <title>The TSF shall require validation of the user prior to permitting the actions described in FMT_MTD.1.1 and FMT_SMF.1.1.</title>
            </f-element>
            
            <f-element id="FCS_VAL_EXT.1.3">
              <title>The TSF shall 
                <selectables linebreak="yes">
                  <selectable>institute a delay such that only <assignable>ST author specified number or configurable range of attempts</assignable> 
                    validation attempts can be made within a 24 hour period, </selectable>
                  <selectable>block validation after <assignable>ST author specified number or configurable range of attempts</assignable> 
                    of consecutive failed validation attempts</selectable>
                </selectables>
              </title>
          
          <note role="application">The EM Module performs validation of any administrator credential on the management server, as described in FIA_AUT_EXT.2.1, 
            used to log in to the EM in accordance with this SFR.</note>
            <aactivity>
              <TSS/>
              
              The evaluator shall examine the TSS to review a high-level description if multiple submasks are used within the TOE,
              how the submasks are validated (e.g., each submask validated before combining, once combined validation takes place, what OE component is being leveraged).  
              
              The evaluator shall examine the TSS to determine that funcatoins described in FMT_MTD.1.1 and FMT_SMF.1.1 are only accisible to an adminitrator after authentication.
              
              
              <Guidance/>If the validation functionality is configurable, the evaluator shall examine the operational guidance
              to ensure it describes how to configure the TOE to ensure the limits regarding validation attempts can be established. 
              
              <Tests/>The evaluator shall perform the following tests:
              
              Test 1: The evaluator shall determine the limit on the average rate of the number of consecutive failed authorization attempts.
              The evaluator will test the TOE by entering that number of incorrect authorization factors in consecutive attempts to access the
              protected data. If the limit mechanism includes any “lockout” period, the time period tested should include at least one such
              period. Then the evaluator will verify that the TOE behaves as described in the TSS. 
              
              Test 2: For each validated authorization factor, ensure that when the user provides an incorrect authorization factor,
              the TOE prevents the access administrators.
            </aactivity>
            
            </f-element>
        </f-component>
        
        <f-component id="FCS_VAL_EXT.2" name="Extended: User Validation">
          <consistency-rationale>
          </consistency-rationale>
          <f-element id="FCS_VAL_EXT.2.1">
            <title>The TSF shall perform validation of the admin by 
              <selectables>
                <selectable>by receiving assertion of the user’s validity from: 
                  <assignable>Operational Environment component responsible for user authentication</assignable></selectable>
                <selectable> validating the 
                  <selectables> 
                    <selectable>submask</selectable>
                    <selectable>intermediate key</selectable>
                  </selectables>using the following method(s): 
                  <selectables>
                    <selectable>key wrap as specified in FCS_COP.1(5)</selectable>
                    <selectable>hash the 
                      <selectables>
                        <selectable>submask</selectable>
                        <selectable>intermediate key</selectable>
                      </selectables>as specified in FCS_COP.1.1(2) as specified the Application Software PP
                      and compare it to a stored hashed </selectable> 
                    <selectable>decrypt a known value using the 
                      <selectables>
                        <selectable>submask</selectable>
                        <selectable>intermediate key</selectable>
                      </selectables> as specified in FCS_COP.1(1) and compare it against a stored known value]</selectable>
                  </selectables> </selectable>
              </selectables>
            </title>
          </f-element>
          
          <f-element id="FCS_VAL_EXT.2.2">
            <title>The TSF shall require validation of the user prior to transmitting submasks, FEKS, or keys to decrypt FEKs to the endpoint.</title>
          </f-element>
          
          <f-element id="FCS_VAL_EXT.2.3">
            <title>The TSF shall 
                <selectables linebreak="yes">
                  <selectable>
                    <selectables>
                      <selectable>direct the endpoint to perform key sanitization</selectable>
                      <selectable>perform a key sanitization of a key required by the endpoint</selectable>
                    </selectables> of FEK(s) or an intermediate key upon 
                    <assignable>ST author specified number or configurable range of attempts</assignable>] consecutive failed validation attempts</selectable>
                  <selectable>institute a delay such that only <assignable>ST author specified number or configurable range of attempts</assignable> 
                    validation attempts can be made within a 24 hour period, </selectable>
                  <selectable>block validation after <assignable>ST author specified number or configurable range of attempts</assignable> 
                    of consecutive failed validation attempts</selectable>
                  <selectable>terminate the session after <assignable>ST author specified number or configurable range of attempts</assignable> 
                    consecutive failed validation attempts</selectable>
                </selectables>
              
            </title>
            
            <note role="application">This references the validation of a endpoint user to the server.  These activities are performed by the server.</note>
            
          <aactivity>
            <TSS/>
            The evaluator shall examine the TSS to determine which component of the Operational Environment is used to assert the User’s identity.
            The evaluator shall examine the TSS to determine how the TOE responds to an assertion by the Operational Environment. The evaluator shall examine the
            TSS to verify that it describes how validation is performed. The evaluator shall verify the TSS ensures that the validation process does not expose
            any material that might compromise key material or expose protected data.
              
              
            <Guidance/>The evaluator shall examine the operational guidance to ensure it describes how to configure the TOE and Operating Environment to enable the OE
            to provide User identity assertions to the TOE. 
            
            (conditional) If the number of User authentication attempts is configurable in the TOE, the examiner shall examine the operational guidance to ensure it describes
            how to configure the TOE. 
            
              
            <Tests/>
            The evaluator shall perform the following tests:
            
            Test 1: The evaluator shall determine the limit on the average rate of the number of consecutive failed authorization attempts. The evaluator will test the TOE by
            entering that number of incorrect authorization factors in consecutive attempts to access the protected data. If the limit mechanism includes any “lockout” period,
            the time period tested should include at least one such period. Then the evaluator will verify that the TOE behaves as described in the TSS.
            
            Test 2: For each validated authorization factor, ensure that when the user provides an incorrect authorization factor, the TOE prevents FEKs or keys that decrypt FEKs
            from being forwarded to the endpoint.
            
          </aactivity>
            
          </f-element>
        </f-component>
        
        
      
       
      
        <f-component id="FCS_COP.1(5)" name="Cryptographic operation (Key Wrapping)">
          <consistency-rationale>
          </consistency-rationale>
          <f-element id="FCS_COP.1.1(5)">
            <title>
              <h:b>Refinement:</h:b> The application shall 
              <selectables>
                <selectable>not perform key wrapping</selectable>
                <selectable>use platform-provided functionality to perform Key Wrapping</selectable>
                <selectable>implement functionality to perform Key Wrapping in accordance with a specified cryptographic algorithm [AES] in the following modes
                  <selectables linebreak="yes">
                    <selectable>Key Wrap</selectable>
                    <selectable>Key Wrap with Padding</selectable>
                    <selectable>GMC mode</selectable>
                    <selectable>CCM mode</selectable>
                  </selectables> and the cryptographic key size 
                  <selectables>
                    <selectable>128 bits (AES)</selectable>
                    <selectable>256 bits (AES)</selectable>
                  </selectables> that meet the following: 
                  <selectables linebreak="yes">
                    <selectable>“NIST SP 800-38C”</selectable>
                    <selectable>“NIST SP 800-38D”</selectable>
                    <selectable>“NIST SP 800-38F”</selectable>
                    <selectable>no other standards</selectable>
                  </selectables>
                </selectable>
              </selectables> 
            </title>
            <note role="application">
              This applies to any key wrapping occuring on the enterprise server.
              This requirement is used in the body of the ST if the ST author chooses to
              use key wrapping in the key chaining approach that is specified in FCS_KYC_EXT.1.</note>
            <aactivity>
              <TSS/>
              <h:h4>Conditional:</h:h4> If not perform key wrapping was selected, then the evaluator shall only examine the TSS to verify no key wrapping is performed. <h:br/>
              <h:h4>Conditional:</h:h4> If use platform provided functionality was selected, then the evaluator shall examine the TSS to verify that it
              describes how the FEK encryption/decryption is invoked. <h:br/>
              <h:h4>Conditional:</h:h4> If impliment functionality was selected, The evaluator shall check that the TSS includes
              a description of encryption function(s) used for key wrapping. The evaluator should check that this description of the
              selected encryption function includes the key sizes and modes of operations as specified in the selections above.
              The evaluator shall check that the TSS describes the means by which the TOE satisfies constraints on algorithm parameters
              included in the selections made for ‘cryptographic algorithm’ and ‘list of standards’. 
              
              The evaluator shall examine the TSS to ensure that the points at which key wrapping and decryption occurs are described,
              and that the complete data path for key wrapping is described. The evaluator checks that this description is consistent
              with the relevant parts of the TSS.
              
              Assessment of the complete data path for key wrapping includes confirming that the TSS describes the data flow from the
              device’s host interface to the device’s non-volatile memory storing the data. 
              
              
              <h:br/>
              <Guidance/> If multiple encryption modes are supported, the evaluator examines the guidance documentation
              to determine that the method of choosing a specific mode/key size is described.
              
              <Tests/>
              <h:h4>Conditional:</h:h4> If not perform key wrapping was selected, no testing is performed.<h:br/>
              
              The assurance activity tests specified for AES in GCM mode in the underlying Application Software PP shall be performed in the case that "GCM" is selected in the requirement.
              
              If AES Key Wrap is used to decrypt/encrypt the key, the evaluator shall examine the TSS to determine that it specifies that the implementation conforms to SP 800-38F with the appropriate (with or without padding) Key Wrap section using AES. 
              The evaluator shall also perform the verification procedures outlined in the testing methodology, "The Key Wrap Validation System." (http://csrc.nist.gov/groups/STM/cavp/documents/mac/KWVS.pdf)
              
              AES-CCM Tests
              These tests are intended to be equivalent to those described in the NIST document, “The CCM Validation System (CCMVS),” updated 9 Jan 2012, found at http://csrc.nist.gov/groups/STM/cavp/documents/mac/CCMVS.pdf.
              
              It is not recommended that evaluators use values obtained from static sources such as 
              http://csrc.nist.gov/groups/STM/cavp/documents/mac/ccmtestvectors.zip
              or use values not generated expressly to exercise the AES-CCM implementation.
              
              The evaluator shall test the generation-encryption and decryption-verification
              functionality of AES-CCM for the following input parameter and tag lengths:
              Keys: All supported and selected key sizes (e.g., 128, 256 bits).
              Associated Data: Two or three values for associated data length: The minimum (≥ 0 bytes) and maximum (≤ 32 bytes) supported associated data lengths, and 2^16 (65536) bytes, if supported.
              Payload: Two values for payload length: The minimum (≥ 0 bytes) and maximum (≤ 32 bytes) supported payload lengths.
              Nonces: All supported nonce lengths (7, 8, 9, 10, 11, 12, 13) in bytes.
              Tag: All supported tag lengths (4, 6, 8, 10, 12, 14, 16) in bytes.
              
              The testing for CCM consists of five tests. To determine correctness in each of the below tests, the evaluator shall compare the ciphertext with the result of encryption of the same inputs with a known good implementation.
              
              Variable Associated Data Test
              For each supported key size and associated data length, and any supported payload length, nonce length, and tag length, the evaluator shall supply one key value, one nonce value, and 10 pairs of associated data and payload values, and obtain the resulting ciphertext.
              
              Variable Payload Text
              For each supported key size and payload length, and any supported associated data length, nonce length, and tag length, the evaluator shall supply one key value, one nonce value, and 10 pairs of associated data and payload values, and obtain the resulting ciphertext.
              
              Variable Nonce Test
              For each supported key size and nonce length, and any supported associated data length, payload length, and tag length, the evaluator shall supply one key value, one nonce value, and 10 pairs of associated data and payload values, and obtain the resulting ciphertext.
              
              Variable Tag Test
              For each supported key size and tag length, and any supported associated data length, payload length, and nonce length, the evaluator shall supply one key value, one nonce value, and 10 pairs of associated data and payload values, and obtain the resulting ciphertext.
              
              Decryption-Verification Process Test
              To test the decryption-verification functionality of AES-CCM, for each combination of supported associated data length, payload length, nonce length, and tag length, the evaluator shall supply a key value and 15 sets of input plus ciphertext, and obtain the decrypted payload. Ten of the 15 input sets supplied should fail verification and five should pass.
              
            </aactivity>
          </f-element>
        </f-component>
        
        
        <f-component id="FCS_COP.1(7)" name="Cryptographic operation (Key Encryption)">
          <consistency-rationale>
          </consistency-rationale>
          <f-element id="FCS_COP.1.1(7)">
            <title>
              <h:b>Refinement:</h:b> The TSF shall 
              <selectables>
                <selectable>not perform key encryption</selectable>
                <selectable>use platform-provided functionality to perform Key Wrapping</selectable>
                <selectable>perform [key encryption and decryption] in accordance with a specified cryptographic algorithm [AES used in CBC mode] and cryptographic key sizes 
                  <selectables linebreak="yes">
                    <selectable>128</selectable>
                    <selectable>256</selectable>
                  </selectables> bits] that meet the following:
                  [AES as specified in SP 800-38A.
                </selectable>
              </selectables>
            </title>
            <note role="application">: 
              This applies to any key encryption occuring on the entperise server.
              This requirement is used in the body of the ST if the ST author chooses to
              use AES encryption/decryption for protecting the keys as part of the key chaining approach
              that is specified in FCS_KYC_EXT.1.</note>
            <aactivity>
              <TSS/>
              
              <h:h4>Conditional:</h:h4> If not perform key encryption was selected, then the evaluator shall only examine the TSS to verify no key wrapping is performed. <h:br/>
              <h:h4>Requirement met by the platform</h:h4> If the platform provides the FEK
              encryption/decryption, then the evaluator shall examine the TSS to verify that it
              describes how the FEK encryption/decryption is invoked. <h:br/>
              <h:h4>Requirement met by the TOE</h:h4> The evaluator shall verify the TSS includes a description of the key size used for
              encryption and the mode used for the key encryption <h:br/>
              <Guidance/> None. 
              <Tests/> 
              
              <h:h4>Conditional:</h:h4> If not perform key wrapping was selected, no testing is performed.<h:br/>
              The assurance activity tests specified for AES in CBC mode in the underlying Application Software PP shall be performed in the case that "CBC" is selected in the requirement.
            </aactivity>
          </f-element>
        </f-component>
        
        <f-component id="FCS_KDF_EXT.1" name="Cryptographic operation (Key Derivation)">
          <consistency-rationale>
          </consistency-rationale>
          <f-element id="FCS_KDF_EXT.1.1">
            <title>
              <h:b>Refinement:</h:b> The TSF shall <selectables>
                <selectable>not derive keys</selectable>
                <selectable>accept
                  <selectables>
                    <selectable>a RNG generated submask as specified in FCS_RBG_EXT.1</selectable>
                    <selectable>a conditioned password</selectable>
                    <selectable>an imported submask</selectable>
                  </selectables> to derive an intermediate key, as defined in [selection:
                  <selectables>
                    <selectable>NIST SP 800-108 
                      <selectables>
                        <selectable>KDF in Counter Mode</selectable>
                        <selectable>KDF in Feedback Mode</selectable>
                        <selectable>KDF in Double-Pipeline Iteration Mode</selectable>
                      </selectables>
                    </selectable>
                    <selectable>NIST SP 800-132</selectable>
                  </selectables> using the keyed-hash functions specified in FCS_COP.1(c), such that the output is at least of
                  equivalent security strength (in number of bits) to the FEK(s).
                </selectable>
              </selectables> 
              
            </title>
            <note role="application">: 
              This applies to any key derviation occuring on the enterprise server.
              This requirement establishes acceptable methods for generating a new random key or an
              existing submask to create a new key along the key chain.</note>
            <aactivity>
              <TSS/>
              <h:h4>Conditional:</h:h4> If not perform key derivation was selected, then the evaluator shall only examine the TSS to verify no key derivation is performed. <h:br/>
              
              The evaluator shall verify the TSS includes a description of the key derivation
              function and shall verify the key derivation uses an approved derivation mode and
              key expansion algorithm according to SP 800-108 and SP 800-132. <h:br/>
              
              <h:h4>KMD</h:h4>The evaluator shall examine the vendor’s KMD to ensure that all keys used are derived using an approved method and a description of how and when the keys are derived,
              including the input values.  The evaluator shall confirm the input values are from the sources listed in the requirement.  
              The evaluator will confirm the output is of equivelent strength to the FEK(s) it is protecting.
              
              <Guidance/> None. 
              
              <Tests/> None. 
            </aactivity>
          </f-element>
        </f-component>
        
        <f-component id="FCS_COP.1(8)" name="Cryptographic operation (Key Transport)">
          <consistency-rationale>
          </consistency-rationale>
          <f-element id="FCS_COP.1.1(8)">
            <title>
              <h:b>Refinement:</h:b> The TSF shall  
              <selectables>
                <selectable>not perform key transport</selectable>
                <selectable>perform [key transport] in accordance with a
                  3 specified cryptographic algorithm [RSA in the following modes 
                  <selectables>
                    <selectable>KTS-OAEP</selectable>
                    <selectable>KTS4-KEM-KWS</selectable>
                  </selectables> and the cryptographic key size 
                  <selectables>
                    <selectable>2048</selectable>
                    <selectable>3072</selectable>
                  </selectables>bits that meet the following: [NIST SP 800-56B, Revision 1].</selectable>
              </selectables>
            </title>
            <note role="application">:  This requirement is used in the body of the ST if the ST author chooses to
              use key transport in the key chaining approach that is specified in FCS_KYC_EXT.1.
            </note>
            <aactivity>
              <TSS/>
              <h:h4>Conditional:</h:h4> If not perform key transport was selected, then the evaluator shall only examine the TSS to verify no key transport is performed. <h:br/>
              
              The evaluator shall verify the TSS provides a high level description of the RSA
              scheme and the cryptographic key size that is being used, and that the asymmetric
              algorithm being used for key transport is RSA. If more than one scheme/key size are
              allowed, then the evaluator shall make sure and test all combinations of scheme and
              key size. There may be more than one key size to specify – an RSA modulus size
              (and/or encryption exponent size), an AES key size, hash sizes, MAC key/MAC tag
              size.
              If the KTS-OAEP scheme was selected, the evaluator shall verify that the TSS
              identifies the hash function, the mask generating function, the random bit generator,
              the encryption primitive and decryption primitive.
              If the KTS-KEM-KWS scheme was selected, the evaluator shall verify that the TSS
              identifies the key derivation method, the AES-based key wrapping method, the secret
              value encapsulation technique, and the random number generator. <h:br/>
              <Guidance/> None. 
              <Tests/>
              For each supported key transport schema, the evaluator shall initiate at least 25
              sessions that require key transport with an independently developed remote instance
              of a key transport entity, using known RSA key-pairs. The evaluator shall observe
              traffic passed from the sender-side and to the receiver-side of the TOE, and shall
              perform the following tests, specific to which key transport scheme was employed.
              If the KTS-OAEP scheme was selected, the evaluator shall perform the following
              tests:
              1. The evaluator shall inspect each cipher text, C, produced by the RSA-OAEP
              encryption operation of the TOE and make sure it is the correct length, either
              256 or 384 bytes depending on RSA key size. The evaluator shall also feed into
              the TOE’s RSA-OEAP decryption operation some cipher texts that are the
              wrong length and verify that the erroneous input is detected and that the
              decryption operation exits with an error code.
              2. The evaluator shall convert each cipher text, C, produced by the RSA-OAEP
              encryption operation of the TOE to the correct cipher text integer, c, and use the
              decryption primitive to compute em = RSADP((n,d),c) and convert em to the
              encoded message EM. The evaluator shall then check that the first byte of EM
              is 0x00. The evaluator shall also feed into the TOE’s RSA-OEAP decryption
              operation some cipher texts where the first byte of EM was set to a value other
              than 0x00, and verify that the erroneous input is detected and that the decryption
              operation exits with an error code.
              3. The evaluator shall decrypt each cipher text, C, produced by the RSA-OAEP
              encryption operation of the TOE using RSADP, and perform the OAEP
              decoding operation (described in NIST SP 800-56B section 7.2.2.4) to recover
              HA’ || X. For each HA’, the evalutor shall take the corresponding A and the
              specified hash algorithm and verify that HA' = Hash(A). The evaluator
              should[shall?] also force the TOE to perform some RSA-OAEP decryptions
              where the A value is passed incorrectly, and the evaluator shall verify
              that an error is detected.
              4. The evaluator shall check the format of the ‘X’ string recovered in OAEP.Test.3
              to ensure that the format is of the form PS || 01 || K, where PS consists of zero or
              more consecutive 0x00 bytes and K is the transported keying material. The
              evaluator shall also feed into the TOE’s RSA-OEAP decryption
              operation some cipher texts for which the resulting ‘X’ strings do not have the
              correct format (i.e., the leftmost non-zero byte is not 0x01). These incorrectly 
              formatted ‘X’ variables should[shall?] be detected by the RSA-OEAP decrypt
              function.
              5. The evaluator shall trigger all detectable decryption errors and validate that the
              returned error codes are the same and that no information is given back to the
              sender on which type of error occurred. The evaluator shall also validate that no
              intermediate results from the TOE’s receiver-side operations are revealed to the
              sender.
              If the KTS-KEM-KWS scheme was selected, the evaluator shall perform the
              following tests:
              1. The evaluator shall inspect each cipher text, C, produced by RSA-KEM-KWS
              encryption operation of the TOE and make sure the length (in bytes) of the
              cipher text, cLen, is greater than nLen (the length, in bytes, of the modulus of
              the RSA public key) and that cLen - nLen is consistent with the byte lengths
              supported by the key wrapping algorithm. The evaluator shall feed into the
              RSA-KEM-KWS decryption operation a cipher text of unsupported length and
              verify that an error is detected and that the decryption process stops.
              2. The evaluator shall separate the cipher text, C, produced by the sender-side of
              the TOE into its C0 and C1 components and use the RSA decryption primitive to
              recover the secret value, Z, from C0. The evaluator shall check that the
              unsigned integer represented by Z is greater than 1 and less than n-1, where n is
              the modulus of the RSA public key. The evaluator shall construct examples
              where the cipher text is created with a secret value Z = 1 and make sure the
              RSA-KEM-KWS decryption process detects the error. Similarly, the evaluator
              shall construct examples where the cipher text is created with a secret value Z =
              n – 1 and make sure the RSA-KEM-KWS decryption process detects the error.
              3. The evaluator shall attempt to successfully recover the secret value Z, derive the
              key wrapping key, KWK, and unwrap the KWA-cipher text following the RSAKEM-KWS
              decryption process given in NISP SP 800-56B section 7.2.3.4. If the
              key-wrapping algorithm is AES-CCM, the evaluator shall verify that the value
              of any (unwrapped) associated data, A, that was passed with the wrapped keying
              material is correct The evaluator shall feed into the TOE’s RSA-KEM-KWS
              decryption operation examples of incorrect cipher text and verify that a
              decryption error is detected. If the key-wrapping algorithm is AES-CCM, the
              evaluator shall attempt at least one decryption where the wrong value of A is
              given to the RSA-KEM-KWS decryption operation and verify that a decryption
              error is detected. Similarly, if the key-wrapping algorithm is AES-CCM, the
              evaluator shall attempt at least one decryption where the wrong nonce is given to
              the RSA-KEM-KWS decryption operation and verify that a decryption error is
              detected.
              4. The evaluator shall trigger all detectable decryption errors and validate that the
              resulting error codes are the same and that no information is given back to the
              sender on which type of error occurred. The evaluator shall also validate that no
              intermediate results from the TOE’s receiver-side operations (in particular, no Z
              values) are revealed to the sender.</aactivity>
          </f-element>
        </f-component>
        
        <f-component id="FCS_IV_EXT.1" name="Extended: Initialization Vector Generation">
          <consistency-rationale>
          </consistency-rationale>
          <f-element id="FCS_IV_EXT.1.1 ">
            <title>The application shall <selectables>
              <selectable>implement platform-provided functionality to generate IVs</selectable>
              <selectable>generate IVs in the following manner<selectables>
                <selectable>CBC: IVs shall be non-repeating and unpredictable;</selectable>
                <selectable>CCM: Nonce shall be non-repeating and unpredictable;</selectable>
                <selectable>XTS: No IV. Tweak values shall be non-negative integers, assigned consecutively,
                  and starting at an arbitrary non-negative integer;</selectable>
                <selectable>GCM: IV shall be non-repeating. The number of invocations of GCM shall not exceed
                  2^32 for a given secret key].</selectable>
              </selectables></selectable>
            </selectables> </title>
            <note role="application">This applies to any IV generation occuring on the enterprise server.</note>
            <aactivity>
              <TSS/>
              The evaluator shall ensure the TSS describes how nonces are created uniquely and how IVs and tweaks are handled (based on the AES mode).
              The evaluator shall confirm that the nonces are unique and the IVs and tweaks meet the stated requirements.
              
              <Guidance/>None.
              
              <Tests/>None.
            </aactivity>
          </f-element>
        </f-component>
        
        <f-component id="FCS_SMC_EXT.1" name="Submask Combining ">
          <consistency-rationale>
          </consistency-rationale>
          <f-element id="FCS_SMC_EXT.1.1 ">
            <title>The TSF shall 
              <selectables>
                <selectable>not perform submask combining</selectable>
                <selectable>combine submasks using the following method <selectables>
                  <selectable>exclusive OR (XOR)</selectable>
                  <selectable>SHA-256</selectable>
                  <selectable>SHA-384</selectable>
                  <selectable>SHA-512</selectable>
                  <selectable>HMAC-SHA-256</selectable>
                  <selectable>HMAC-SHA-384</selectable>
                  <selectable>HMAC-SHA-512</selectable>
                </selectables> to generate an intermediary key</selectable>
              </selectables></title>
            <note role="application">This applies to any submark combining occuring on the enteprise server.
              This requirement specifies the way that a product may combine the
              various submasks by using either an XOR or an approved SHA-hash. </note>
            <aactivity>
              <TSS/>
              <h:h4>Conditional:</h:h4> If not perform submask combining was selected, then the evaluator shall only examine the TSS to verify no submask combining is performed. <h:br/>
              
              If keys are XORed together to form an intermediate key, the TSS section
              shall identify how this is performed (e.g., if there are ordering requirements, checks
              performed, etc.). The evaluator shall also confirm that the TSS describes how the length
              of the output produced is at least the same as that of the FEK. 
              <Guidance/>None.
              <Tests/>None.
            </aactivity>
          </f-element>
          
        </f-component>
        
        <f-component id="FCS_CKM_EXT.4" name="Extended: Cryptographic Key Destruction">
          <consistency-rationale>
          </consistency-rationale>
          <f-element id="FCS_CKM_EXT.4.1">
            <title>The TSF shall destroy cryptographic keys in accordance with a specified cryptographic key destruction method 
              <selectables linebreak="yes">
                <selectable> For volatile memory, the destruction shall be executed by a
                  <selectables>
                    <selectable>single overwrite consitting of 
                      <selectables>
                        <selectable>a pseudo-random pattern using the TSF's RBG</selectable>
                        <selectable>zeros</selectable>
                        <selectable>ones</selectable>
                        <selectable>new value of a key</selectable>
                        <selectable><assignable>any value that does not contain any CSP</assignable></selectable>
                      </selectables>
                    </selectable>
                    <selectable>removal of power to the memory</selectable>
                    <selectable>destruction of reference to the key directly followed by a request for garbage collection</selectable>
                  </selectables>
                </selectable>
                <selectable> For non-volatile memory that consists of the invocation of an interface provided by the underlying platform that
                  <selectables>
                    <selectable>logically addresses the storage locatoin of the key and performs a
                      <selectables>
                        <selectable>single</selectable>
                        <selectable><assignable>ST author defined multi-pass</assignable></selectable>
                      </selectables>
                      overwrite consisting of 
                      <selectables>
                        <selectable>a pseudo-random pattern using the TSF's RBG</selectable>
                        <selectable>zeros</selectable>
                        <selectable>ones</selectable>
                        <selectable>new value of a key</selectable>
                        <selectable><assignable>any value that does not contain any CSP</assignable></selectable>
                      </selectables>
                    </selectable>
                    <selectable>instructs the underlying platform to destory the abstraction the represents the key</selectable>
                  </selectables>
                  
                </selectable>
              </selectables>
            </title>
            <note role="application"> This requirement covers the destruction of keys on the enterprise server.
              The interface referenced in the requirement could take different forms, 
              the most likely of which is an application programming interface to an OS kernel. There may be 
              various levels of abstraction visible. For instance, in a given implementation, selection a, the 
              application may have access to the file system details and may be able to logically address 
              specific memory locations. In another implementation, selection b, the application may simply 
              have a handle to a resource and can only ask the platform to delete the resource, as may be the 
              case with a platforms secure key store. Selection b should only be used for the most restricted access. 
              The level of detail to which the TOE has access will be reflected in the TSS section of the ST.
              
              Several selections allow assignment of a ‘value that does not contain any CSP’. This means that 
              the TOE uses some other specified data not drawn from a source that may contain key material or 
              reveal information about key material, and not being any of the particular values listed as other 
              selection options. The point of the phrase ‘does not contain any CSP’ is to ensure that the 
              overwritten data is carefully selected, and not taken from a general ‘pool’ that might contain 
              current or residual data that itself requires confidentiality protection. </note>
            
            <aactivity>
              <TSS/><h:h4> or KMD (Key Management Description may be used if necessary details describe proprietary information)</h:h4> 
              The evaluator examines the TSS to ensure it describes how the keys are managed in volatile memory. 
              This description includes details of how each identified key is introduced into volatile memory (e.g. by derivation 
              from user input, or by unwrapping a wrapped key stored in non-volatile memory) and how they are overwritten.
              
              The evaluator shall check to ensure the TSS lists each type of key that is stored in in non-volatile memory, and 
              identifies how the TOE interacts with the underlying platform to manage keys (e.g., store, retrieve, destroy). 
              The description includes details on the method of how the TOE interacts with the platform, including an identification 
              and description of the interfaces it uses to manage keys (e.g., file system APIs, platform key store APIs).
              
              The evaluator examines the interface description for each different media type to ensure that the 
              interface supports the selection(s) and description in the TSS.
              
              If the ST makes use of the open assignment and fills in the type of pattern that is used, the evaluator 
              examines the TSS to ensure it describes how that pattern is obtained and used. The evaluator shall 
              verify that the pattern does not contain any CSPs.
              
              The evaluator shall check that the TSS identifies any configurations or 
              circumstances that may not strictly conform to the key destruction requirement.
              
              <Guidance/> There are a variety of concerns that may prevent or delay key destruction in some cases.
              
              The evaluator shall check that the guidance documentation identifies configurations or circumstances that may 
              not strictly conform to the key destruction requirement, and that this description is consistent with the 
              relevant parts of the TSS and any other relevant Required Supplementary Information.
              
              The evaluator shall check that the guidance documentation provides guidance on situations where key 
              destruction may be delayed at the physical layer and how such situations can be avoided or mitigated if possible.
              
              Some examples of what is expected to be in the documentation are provided here. 
              
              When the TOE does not have full access to the physical memory, it is possible that the storage may be implementing 
              wear-leveling and garbage collection. This may create additional copies of the key that are logically inaccessible 
              but persist physically. In this case, to mitigate this the drive should support the TRIM command and implements 
              garbage collection to destroy these persistent copies when not actively engaged in other tasks.
              
              Drive vendors implement garbage collection in a variety of different ways, as such there is a variable amount of time 
              until data is truly removed from these solutions. There is a risk that data may persist for a longer amount of time 
              if it is contained in a block with other data not ready for erasure. To reduce this risk, the operating system and 
              file system of the OE should support TRIM, instructing the non-volatile memory to erase copies via garbage collection 
              upon their deletion. If a RAID array is being used, only set-ups that support TRIM are utilized. If the drive is 
              connected via PCI-Express, the operating system supports TRIM over that channel.
              
              The drive should be healthy and contains minimal corrupted data and should be end of lifed before a significant 
              amount of damage to drive health occurs, this minimizes the risk that small amounts of 
              potentially recoverable data may remain in damaged areas of the drive.
              
              <Tests/>
              These tests are only for key destruction provided by the application, test 2 does not apply to any keys using the selection "new value of a key": 
              <testlist>
                <test>Applied to each key held as in volatile memory and subject to destruction by overwrite by the 
                  TOE (whether or not the value is subsequently encrypted for storage in volatile or non-volatile memory). 
                  In the case where the only selection made for the key destruction method was removal of power, then this test is unnecessary. 
                  
                  The evaluator shall:
                  
                  Record the value of the key in the TOE subject to clearing.
                  
                  Cause the TOE to perform a normal cryptographic processing with the key from Step #1.
                  
                  Cause the TOE to clear the key.
                  
                  Cause the TOE to stop the execution but not exit.
                  
                  Cause the platform to dump the entire memory of the TOE or platform into a binary file.
                  
                  Search the content of the binary file created in Step #5 for instances of the known key value from Step #1.
                  
                  Steps 1-6 ensure that the complete key does not exist anywhere in volatile memory. If a copy is found, then the test fails.</test>
                
                <test>[Contitional] If new value of a key is selected this test does not apply. 
                  Applied to each key held in non-volatile memory and subject to destruction by the TOE. 
                  The evaluator shall use special tools (as needed), provided by the TOE developer if necessary, to ensure the tests function as intended.
                  
                  Identify the purpose of the key and what access should fail when it is deleted. (e.g. the data encryption key being deleted would cause data decryption to fail.)
                  
                  Cause the TOE to clear the key.
                  
                  Have the TOE attempt the functionality that the cleared key would be necessary for.
                  
                  The test succeeds if step 3 fails.</test>
                
                <test>Applied to each key held in non-volatile memory and subject to destruction by overwrite by the TOE. The evaluator shall use a tool that provides a logical view of the media (e.g., MBR file system):
                  
                  Record the value of the key in the TOE subject to clearing.
                  
                  Cause the TOE to perform a normal cryptographic processing with the key from Step #1.
                  
                  Cause the TOE to clear the key.
                  
                  Search the logical view that the key was stored in for instances of the known key value from Step #1. If a copy is found, then the test fails. </test>
                
                <test>Applied to each key held in non-volatile memory and subject to destruction by overwrite by the TOE. The evaluator shall use a tool that provides a logical view of the media:
                  
                  Record the logical storage location of the key in the TOE subject to clearing.
                  
                  Cause the TOE to perform a normal cryptographic processing with the key from Step #1.
                  
                  Cause the TOE to clear the key.
                  
                  Read the logical storage location in Step #1 of non-volatile memory to ensure the appropriate pattern is utilized.
                  
                  The test succeeds if correct pattern is used to overwrite the key in the memory location. If the pattern is not found the test fails.</test>
              </testlist>
            </aactivity>
          </f-element>
          
          <f-element id="FCS_CKM_EXT.4.1(a)">
            <title>The TSF shall destroy all keys and key material when no longer needed.</title>
            
            <note role="application">Application Note: Keys, including intermediate keys and key material that are no longer
              needed are destroyed by using an approved method, FCS_CKM_EXT.4.1. Examples of keys are
              intermediate keys, submasks. There may be instances where keys or key material
              that are contained in persistent storage are no longer needed and require destruction. 
              Base on their implementation, vendors will explain when certain keys are no longer needed. There
              are multiple situations in which key material is no longer necessary, for example, a wrapped
              key may need to be destroyed when a password is changed. However, there are instances
              when keys are allowed to remain in memory, for example, a device identification key. If a
              PIN was used for a SmartCard and managed by the TOE, ensuring that the PIN was properly destroyed shall be addressed.
            </note>
            <aactivity>
              <TSS/>              
              The evaluator shall verify the TSS  includes a key lifecycle, that includes a
              description where key material reside, how the key material is used, how it is
              determined that keys and key material are no longer needed, and how the material is
              destroyed once it is not needed and that the documentation in the follows
              FCS_CKM_EXT.4.1 for the destruction.
              
              
              <Guidance/> None.
              
              <Tests/> None.
              
            </aactivity>
          </f-element>
        </f-component>
        
        
        
        
        
        <f-component id="FCS_KYC_EXT.1" name="Key Chaining and Key Storage (Management Server)">
          <consistency-rationale>
          </consistency-rationale>
          <f-element id="FCS_KYC_EXT.1.1">
            <title> The TSF shall maintain a key chain of intermediate keys originating from one or more initial
                  <selectables>
                    <selectable>submask(s)</selectable>
                    <selectable>recovery value(s)</selectable>
                  </selectables> to the final value returned to the endpoint
                 using the following method(s): 
                  <selectables linebreak="yes">
                    <selectable>utilization of the platform key storage</selectable>
                    <selectable>utilization of platform key storage that performs key wrap with a
                      TSF provided key</selectable>
                    <selectable id="USEKEYDER">implement key derivation as specified in FCS_KDF_EXT.1</selectable>
                    <selectable id="USEKEYWRA">implement key wrapping as specified in FCS_COP.1(5)</selectable>
                    <selectable id="USEKEYCOM">implement key combining as specified in FCS_SMC_EXT.1</selectable>
                    <selectable id="USEKEYENC">implement key encryption as specified in FCS_COP.1(7)</selectable>
                    <selectable id="USEKEYTRA">implement key transport as specified in FCS_COP.1(8)</selectable>
                  </selectables> 
                  while maintaining an effective strength of 
                    <selectables>
                      <selectable>
                        <selectables>
                          <selectable>128 bits</selectable>
                          <selectable>256 bits</selectable>
                        </selectables> for symmetric keys;
                      </selectable>
                      <selectable>
                        <selectables>
                          <selectable>112 bits</selectable>
                          <selectable>128 bits</selectable>
                          <selectable>192 bits</selectable>
                          <selectable>256 bits</selectable>
                        </selectables> for asymmetric keys;
                      </selectable>
                    </selectables> 
                  commensurate with the strength of the FEK.              
            </title>
            <note role="application">Key Chaining is the method of using multiple layers of
              encryption keys to ultimately secure the a final key. The number of intermediate keys will
              vary. The ST Author should clearly indicate which portions of the key chain are created and 
              maintained by the enterprise server and which are created and maintained by the AA.</note>
            <aactivity>
              <TSS/>
              The evaluator shall verify the TSS contains a high-level description of the key sizes
              that it supports key outputs of no fewer 128 bits for products that support only AES128,
              and no fewer than 256 bits for products that support AES-256.
              The evaluator shall verify the TSS contains a description of the controls preventing a key 
              from being provided to the endpoint before validation has occurred.
              
              The evaluator shall verify the TSS includes a description of the key
              chain used to protect encryption keys associated with endpoints. 
              The description of the key chains shall be reviewed to ensure it maintains
              a chain of keys using the methods listed in the SFR. 
              The evaluator shall ensure the chain of keys is maintained from
              the authorization factor or recovery value to the value returned to the endpoint.
              The evaluator shall examine the TSS to ensure that it describes how the key chain
              process functions, such that it does not expose any material that might compromise any
              key in the chain. This description must include a diagram illustrating the key chain implemented and
              detail where all keys and keying material is stored or what it is derived from. The
              evaluator shall examine the key chain to ensure that at no point the chain could be
              broken without a cryptographic exhaust, the initial authorization value, recovery value
              or a compromise of the TOE server and the effective strength of the keys are maintained
              throughout the key chain.

              
              <Guidance/>
              If there are configurations to enable or disable use of enterprise server, which modify
              the key chain, they shall be described.
              If there are configurations on to enable recovery mechanisms, they shall be described.
              
              <Tests/> None.
              
              </aactivity>
          </f-element>
        </f-component>
        
        
        
          
         
        
        
        
        
        
        
        
        
        
        
        
        
      
      
      
        
              
      </subsection>
      <subsection title="Identification and Authentication (FIA)" id="fia">
        
        <f-component id="FIA_AUT_EXT.2" name="Server Administrator Authorization">
          <consistency-rationale>
          </consistency-rationale>
          <f-element id="FIA_AUT_EXT.2.1">
            <title>The application shall 
              <selectables>
                <selectable>by receiving assertion of the user’s validity from: 
                  <assignable>Operational Environment component responsible for user authentication</assignable></selectable>
                <selectable>provide  authorization</selectable>
              </selectables> based on 
              <selectables>
                <selectable id="USEPAS"> a password authorization factor conditioned as defined in FCS_CKM.1(A)</selectable>
                <selectable> an external Smartcard factor that is at least the same bit-length as the FEK(s), and is protecting a submask that is 
                  <selectables>
                    <selectable>generated by the TOE (using the RBG as specified in FCS_RBG_EXT.1)</selectable>
                    <selectable>generated by the Host Platform</selectable>
                  </selectables> protected using RSA with key size 
                  <selectables>
                    <selectable>2048 bits</selectable>
                    <selectable>3072 bits</selectable>
                    <selectable>4096 bits</selectable>
                  </selectables> with user presence proved by presentation of the smartcard and 
                  <selectables>
                    <selectable>none</selectable>
                    <selectable>an OE defined PIN</selectable>
                    <selectable>a configurable PIN</selectable>
                  </selectables>
                </selectable>
                <selectable>an external USB token factor that is at least the same security strength as the FEK(s),
                  and is providing a submask generated by the 
                  <selectables>
                    <selectable>TOE, using the RBG as specified in FCS_RBG_EXT.1</selectable>
                    <selectable>Host Platform</selectable>
                  </selectables>
                </selectable>
              </selectables>
            </title>
            <note role="application"> 
              This applies to the authorization of administartors on the enteprise server.
              
              FCS_RBG_EXT.1 is in the Application Software Protection Profile.
              
              This requirement specifies what authorization factors the TOE accepts
              from the user. A password entered by the user is one authorization factor that the TOE must 
              be able to condition, as specified in FCS_CKM.1(A). Another option is a smart card
              authorization factor, with the differentiating feature being how the value is generated – either
              by the TOE’s RBG or by the platform. An external USB token may also be used, with the
              submask value generated either by the TOE’s RBG or by the platform.
              The TOE may accept any number of authorization factors, and these are categorized as
              “submasks”. The ST author selects the authorization factors they support, and there may be
              multiple methods for a selection.
              Use of multiple authorization factors is preferable; if more than one authorization factor is
              used, the submasks produced must be combined using FCS_SMC_EXT.1.
            </note>
            <aactivity>The assurance activities for this component will be driven by the selections
              made by the ST author. This section describes assurance activities for all possible
              selections in an ST; it should be understood that if a capability is not selected in
              the ST, the noted assurance activity does not need to be performed. 
              
              <TSS/> The
              evaluator shall examine the TSS to ensure that it describes how user authentication is
              performed. The evaluator shall verify that the authorization methods listed in the TSS
              are specified and included in the requirements in the ST. <h:br/>
              <h:b>Requirement met by the TOE</h:b> <h:br/> The evaluator shall first examine the TSS to ensure that the authorization
              factors specified in the ST are described. For password-based factors the
              examination of the TSS section is performed as part of FCS)CKM.1(A)
              Evaluation Activities. Additionally in this case, the evaluator shall verify that
              the operational guidance discusses the characteristics of external authorization
              factors (e.g., how the authorization factor must be generated; format(s) or
              standards that the authorization factor must meet) that are able to be used by
              the TOE.
              If other authorization factors are specified, then for each factor, the TSS specifies
              how the factors are input into the TOE.<h:br/>
              <h:b>Requirement met by the OE</h:b><h:br/> The evaluator shall examine the TSS to
              ensure a description is included for how the TOE is invoking the OE
              functionality and how it is getting an authorization value that has appropriate
              entropy. 
              
              <Guidance/>The evaluator shall verify that the AGD guidance includes instructions for all of the
              authorization factors. The AGD will discuss the characteristics of external
              authorization factors (e.g., how the authorization factor is generated; format(s) or
              standards that the authorization factor must meet, configuration of the TPM device
              used) that are able to be used by the TOE.
              <Tests/>The evaluator shall ensure that authorization using each selected
              method is tested during the course of the evaluation, setting up the method as
              described in the operational guidance and ensuring that authorization is successful and 
              that failure to provide an authorization factor results in denial to access to plaintext data..
              
              [conditional]: If there is more than one authorization factor, ensure that failure
              to supply a required authorization factor does not result in access to the decrypted
              plaintext data.
            </aactivity>
          </f-element>
        </f-component>
        
        <f-component id="FIA_UAU.1" name="Timing of Authentication">
          <consistency-rationale>
          </consistency-rationale>
          <f-element id="FIA_UAU.1.1">
            <title>The TSF shall allow 
              <assignable>list of TSF-mediated actions</assignable>
              on behalf of the administrator to be performed before the administrator is authenticated.
            </title>
          </f-element>
            <f-element id="FIA_UAU.1.2">
           <title>The TSF shal require each administrator to be successfully authenticated before allowing any other TSF-mediated actions on behlaf of that administractor.</title>
            <note role="application"> This requirement defines the timing administrator capabilities on the enterprise server.
            </note>
            <aactivity>
              
              <TSS/> The evaluator shall examine the TSS to determine that it describes the list of actions that are performed on behalf
              of the administrator prior to login of the administrator. The evaluator shall examine the TSS to determine that it describes the list
              of actions that require administrator authentication.
              
              <Guidance/>	The evaluator shall examine the guidance documentation to determine that any necessary preparatory steps 
              (e.g., establishing credential material such as pre- shared keys, tunnels, certificates, etc.) to logging in are described.
              For each supported login method, the evaluator shall ensure the guidance documentation provides clear instructions for successfully
              logging on. If configuration is necessary to ensure the services provided before login are limited, the evaluator shall determine
              that the guidance documentation provides sufficient instruction on limiting the allowed services.
              
              
              <Tests/>	The evaluator shall perform the following tests:
              <testlist>
                <test>Test 1: The evaluator shall verify that the list of actions allowed without administrator login completes 
                  successfully without requiring administrator login and make sure this list is consistent with the TSS. </test>
                
                <test>Test 2: The evaluator shall verify that attempting any other action requires successful entry of an administrator credential. </test>
                
                <test>Test 3: The evaluator shall use the guidance documentation to configure the appropriate credential supported for the login method.
                For that credential/login method, the evaluator shall show that providing correct I&amp;A information results in the ability to access the system,
                while providing incorrect information results in denial of access.</test>
                
                <test>Test 4: The evaluator shall configure the services allowed (if any) according to the guidance documentation, and then determine
                  the services available to an external remote entity. The evaluator shall determine that the list of services available is limited to those specified in the requirement. </test>
                
              </testlist>
            </aactivity>
          </f-element>
        </f-component>
        
        <f-component id="FIA_UID.1" name="Timing of Identification">
          <consistency-rationale>
          </consistency-rationale>
          <f-element id="FIA_UID.1.1">
            <title>The TSF shall allow 
              <assignable>list of TSF-mediated actions</assignable>
              on behalf of the administrator to be performed before the administrator is identified.
            </title>
          </f-element>
          <f-element id="FIA_UAU.1.2">
            <title>The TSF shal require each administrator to be successfully identified before allowing any other TSF-mediated actions on behlaf of that administractor.</title>
            <note role="application"> This requirement defines the timing administrator capabilities on the enterprise server.
            </note>
            <aactivity>
              
              <TSS/> The evaluator shall examine the TSS to determine that it describes the list of actions that are performed on behalf of the administrator
              prior to identification of the administrator.
              
              <Guidance/> The evaluator shall examine the guidance documentation to determine that any necessary preparatory
              steps for creating and configuring administrator accounts are described.
              
              
              <Tests/> The evaluator shall perform the following tests:
              <testlist>
                <test>Test 1: The evaluator shall verify that the list of actions allowed without administrator identification completes successfully without
                  requiring the administrator to be identified and make sure this list is consistent with the TSS. </test>
                
                <test>Test 2: The evaluator shall verify that attempting any other action requires successful entry of an administrator
                  account name and successful entry of the administrator account credential.  </test>
                
                
              </testlist>
            </aactivity>
          </f-element>
        </f-component>
        
        <f-component id="FIA_REC_EXT.1" name="Recovery Support">
          <consistency-rationale>
          </consistency-rationale>
          <f-element id="FIA_REC_EXT.1.1">
            <title>The TSF shall support the following recovery mechanisms 
              <selectables>
                <selectable id="CR">Challenge Response Recovery as defined in FIA_CHR_EXT.1</selectable>
                <selectable>None.</selectable>
              </selectables>
              
            </title>
          
            
          </f-element>
          <f-element id="FIA_REC_EXT.1.2">
            <title>The TSF shall 
              <selectables>
                <selectable>provide the ability to enable and disable the use of recovery credentials.</selectable>
              <selectable>not support recovery</selectable>
            </selectables></title>
            <note role="application"> This requirement defines the recovery options supported between the endpoint(s) and the enterprise server.  This does not prevent the OE from providing recovery if the OE is managing the authentication of the users.
              
            </note>
          
          <aactivity>
              
            <TSS/> The evaluator shall examine the TSS to determine that types of supported recovery
            credential are specified.
              
            <Guidance/> The evaluator shall confirm that the guidance documentation contains instructions for
            turning off the ability of the server to return a recovery credential is specified.
              
              
            <Tests/> The evaluator shall disable the ability of a server to return a recovery credential. The
            evaluator should then attempt to obtain the recovery credential and this should fail.
            </aactivity>
            
          </f-element>
        </f-component>
        
        
        
        
        
        
        
        
      </subsection>
      <subsection title="Security Management (FMT)" id="fmt"> 
        
        
        
        
        <f-component id="FMT_MTD.1" name="Management of TSF Data">
          <consistency-rationale>
          </consistency-rationale>
          <f-element id="FMT_MTD.1.1">
            <title>The TSF shall restrict the ability to 
              <selectables>
                <selectable>change default</selectable>
                <selectable>query</selectable>
                <selectable>modify</selectable>
                <selectable>delete</selectable>
                <selectable>clear</selectable>
                <selectable><assignable>other operations</assignable></selectable>
              </selectables> the [encryption keys and intermediate values] to [administrators] at the following times: 
              <selectables>
                <selectable>never</selectable>
                <selectable>during initial provisioning</selectable>
                <selectable>during recovery</selectable>
              </selectables>
            </title>
            <note role="application"> These restrictions apply to modifications on the enterprise server.
            </note>
            <aactivity>
              <TSS/>
              The evaluator shall examine the TSS to determine that, for each administrative function identified in the guidance documentation;
              those that are available to the administrator are identified. For each of these functions, the evaluator shall also confirm that
              the TSS details when changes may be made to the encryption keys and/or intermediate values.
              
              
              <Guidance/>The evaluator shall verify that the guidance document describes what operations on the encryption keys and intermediate
              values are allowed to the administrator at what times.
              
              <Tests/> The evaluator shall perform the following tests:
              
              <testlist>
                <test>Test 1: The evaluator shall try to perform at least one of the related actions without prior authentication as administrator 
                  (either by authentication as a user with no administrator privileges or without user authentication at all – depending on the configuration 
                  of the TOE). This test should fail.</test>
                
                <test>Test 2: The evaluator shall try to perform at least one of the related actions with prior authentication as administrator. This test should pass.</test>
                
                <test>Test 3: The evaluator shall try to perform at least one of the actions at the times that are not permitted. This test should fail.</test>
                
                <test>Test 4: The evaluator shall try to perform at least one of the actions at the times are permitted. This test should pass.</test>
              </testlist>
            </aactivity>
          </f-element>
        </f-component>
        
        <f-component id="FMT_SMF.1" name="Specification of Management Functions (Management Server)">
          <consistency-rationale>
          </consistency-rationale>
          <f-element id="FMT_SMF.1.1">
            <title>The TSF shall be capable of performing the following management functions: 
              <selectables linebreak="yes">
                <selectable>register new user</selectable>
                <selectable>revoke registration of user</selectable>
                <selectable>initiate key generation</selectable>
                <selectable>initiate key escrow</selectable>
                <selectable>initiate key zeroization</selectable>
                <selectable>initiate key recovery</selectable>
                <selectable>set encryption policy (supported algorithms and key sizes)</selectable>
                <selectable>change administrator passwords</selectable>
                <selectable>change user passwords</selectable>
                <selectable>change recovery credentials</selectable>
                <selectable>define administrators of the TOE</selectable>
                <selectable>enable/disable use of recovery credential</selectable>
                <selectable>configure number of failed authentication attempts before issuing a key destruction of the FEK(s)</selectable>
                <selectable>configure the number of authentication attempts that can be made within a 24 hour period</selectable>
                <selectable>configure the number of failed authentication attempts required to begin blocking subsequent attempts</selectable>
                <selectable><assignable>ability to enable or disable one or more functions defined in the File Encryption Module]</assignable></selectable>
                <selectable><assignable>ability to perform one or more functions defined in the File Encryption Module</assignable></selectable>
                <selectable><assignable>ability to authorize whether or not users can perform one or more functions defined in the File Encryption Module</assignable></selectable>
              </selectables>
            </title>
            <note role="application"> This SFR refers specifically to the management functions that can be performed by the Management Server. 
              Functions that are performed by the rest of the TOE are addressed by the FMT_SMF.1 SFR in the File Encryption Module. The final two assignments
              provide the ST author the ability to indicate when File Encyrption module functionality (such as configuration of power saving states) can be configured by the Management Server.
              
              The TSF’s ability to initiate key generation, escrow, zeroization, and/or recovery may be accomplished either by the TOE performing those
              functions or by the TOE issuing a request to a remote client to perform the functions. The ST author shall indicate which case is provided by the TSF.
              If the TOE performs any of the cryptographic functions that are selected as being initiated in this SFR, the ST author shall include the equivalent
              FCS SFRs from the File Encryption Module as part of the TOE, specifically indicating that these functions are provided by the Management Server component of the TOE.
              
              If the TSF supports the use of a recovery credential, the ST author shall include the ‘enable/disable use of recovery credential’ selection.
            </note>
            
            <aactivity>
              <TSS/>
              The evaluator shall examine the TSS to ensure that it describes which of the selections are provided by the TOE.
              Additionally, the TSS shall describe which of the configurable selections can be disabled on the Enterprise Management Server.
              The evaluator shall examine the TSS to ensure that it describes whether the TOE provides the ability to initiate key generation, 
              escrow, zeroization and/or recovery or whether it requests the client to perform those functions.
              
              
              <Guidance/>The evaluator shall examine the Guidance Documents to ensure that, if supported, configuration of the following options is described,
              including any reliance on the Operational Environment if applicable:
              
              •	Register new user
              •	Revoke registration of an user
              •	Initiate key generation
              •	Initiate key escrow
              •	Initiate key recovery
              •	Initiate key zeroization
              •	Set encryption policy (supported algorithms and key sizes)
              •	Change Administrator passwords
              •	Change user passwords
              •	Change Recovery Credentials
              •	Define Administrators of the TOE
              •	Enable/Disable the use of recovery credentials (end users)
              •	Configure the number of failed authentication attempts before issuing a key destructoin of the FEK(s)
              •	Configure the number of authentication attempts that can be made in a 24 hour period
              •	Configure the number of failed authentication attempts required to begin blocking subsequent attempts
              •	The ability to enable/disable one or more functions defined in the File Encryption module
              •	The ability to authorize whether or not users can perform one or more of the functions in the File Encryption Module.
              
              
              <Tests/> The evaluator shall perform the following tests for each claimed management function:
              
              <testlist>
                <test>Test 1: The evaluator shall configure the management server and two users according to the guidance documents.
                  The evaluator shall register the users with the management server. The evaluator shall verify that the users
                  are identified by the management server as defined in the guidance documents. This test shall pass.</test>
                
                <test>Test 2: The evaluator shall disconnect the second user from the network. The evaluator shall revoke the registration of the second user
                  in the management server. The evaluator shall attempt to connect the second user to the network and verify the endpoint fails to connect or is
                  displayed as revoked in the console.</test>
                
                <test>Test 3: The evaluator shall verify that the TOE performs the actions (e.g. generate key) and
                  sends the result to the user's client. The user's client shall perform the actions necessary to accept the updated configuration (e.g. encrypt the data
                  with the new key, update the encryption algorithm key size or mode and re-encrypt).</test>
                
                <test>Test 4: For each item that is initiated by the TOE but performed on the endpoint, the evaluator shall verify that the TOE requests the
                  user's client to perform the action (generate a key and encrypt the data, zeroize a key). </test>
                
                <test>Test 5: For each method of changing a credential, the evaluator shall first provision the initial authorization factor(s) in the Enterprise Server,
                  and then verify all authorization values supported allow the user access to the encrypted data on the user's client. Then the evaluator shall exercise
                  the management functions to change the authorization factor values to a new one on the Enterprise Server. Then he or she will verify that the user's client
                  denies access to the user’s encrypted data when he or she uses the old or original authorization factor values to gain access.  </test>
                
                <test>Test 6: The evaluator shall add two administrators to the administrator group in the Enterprise Server and provision authorization
                  factor(s) for each administrator. The evaluator shall verify that both administrators can log into the Enterprise Server using the provided authorization factors.
                  The evaluator shall then exercise the management functions to change the authorization factor values for the first administrator to a new one on the Enterprise Server.
                  Then he or she will verify that the Enterprise Server denies the first administrator access to the Management Console when the first administrator logs in with the old
                  or original authorization factor to gain access. The evaluator shall also verify that the second administrator is still able to log in to the Enterprise Server with
                  their original authorization factor. </test>
                
                <test>Test 7: The evaluator shall verify that the second administrator from Test 2 can configure each of the supported authorization attempts configurations 
                  and shall verify that the user is denied access to the encrypted data. </test>
                
                <test>Test 8: If the TOE provides the capability to disable management of any capability allowed in the EM Module, the evaluator shall devise a test that
                  ensures that each capability which can be disabled has been or can be disabled following guidance provided by the vendor. </test>
                
                <test>Test 9: If the TOE provides the capability to manage capabilities in place of the File Encryption Clients, where those administrative capabilities are then disabled in the File Encryption Clients,
                  the evaluator shall devise a test that ensures that each capability which can be disabled in the File Encryption Cleitns and can be subsequently managed by the EM is tested as follows:
                  
                  Disable the administrative capability in a File Encryption Client and enable it in the EM
                  
                  Verify that the administration of the capability in the EM is successfully
                </test>
                
              </testlist>
            </aactivity>
          </f-element>
        </f-component>
        
        <f-component id="FMT_SMR.2" name="Restrictions on Security Roles">
          <consistency-rationale>
          </consistency-rationale>
          <f-element id="FMT_SMR.2.1">
            <title>The TSF shall maintain the roles [administrator, user]
            </title>
            
          </f-element>
          
          <f-element id="FMT_SMR.2.2">
            <title>The TSF shall be able to associate users with roles.</title>
          </f-element>
          
          <f-element id="FMT_SMR.2.3">
            <title>The TSF shall ensure that the conditions 
              <selectables>
                <selectable>the administrator role shall be able to administer the Management Server locally, </selectable>
                <selectable>the administrator role shall be able to administer the Management Server remotely, </selectable>
                <selectable>the administrator role shall be able to administer the endpoint(s) locally, </selectable>
                <selectable>the administrator role shall be able to administer the endpoint(s) remotely </selectable>
              </selectables>
              are satisfied.
            </title>
            
            <note role="application"> The intent of this SFR is to define a mechanism to distinguish administrators 
              (who have the ability to configure the TSF and its data) from users (individuals in the enterprise who have FEs on their systems).
              
              The TSF does not need to provide roles that are explicitly called ‘administrator’ or ‘user’; the ST shall logically define the administrator
              as a combination of one or more roles that are provided by the TOE. A user as defined by this PP-Module may be either a user that is 
              specifically assigned an unprivileged role by the TSF or it may be characterized by an individual that lacks an administrator account on the TOE.
              
              The TSF may optionally provide the ability to rely on an external authentication mechanism to identify users in the case of a user requesting distribution
              of a recovery credential. In this situation, the TOE’s reliance on the Operational Environment is functionally equivalent to the TSF
              maintaining the user role as defined by FMT_SMR.2.1.
              
            </note>
            <aactivity>
              <TSS/>
              The evaluator shall examine that the TSS details how Administrators are authenticated and identified by all TOE components
              
              <Guidance/>
              The evaluator shall review the guidance documentation to ensure that it contains instructions for administering the TOE both locally and remotely,
              including any configuration that needs to be performed on the client for remote administration.
              
              <Tests/> The evaluator shall perform the following tests:
              
              In the course of performing the testing activities for the evaluation, the evaluator shall use all supported interfaces, although it is not necessary to repeat
              each test involving an administrative action with each interface. The evaluator shall ensure, however, that each supported method of administering the TOE that
              conforms to the requirements of this PP-module be tested; for instance, if the TOE can be administered through a local hardware interface; SSH; and TLS/HTTPS; then all
              three methods of administration must be exercised during the evaluation team’s test activities.<h:br/>
              
              
            </aactivity>
          </f-element>
        </f-component>
        
        <f-component id="FMT_MOF.1" name="Server Management Functions Behavior">
          <consistency-rationale>
          </consistency-rationale>
          <f-element id="FMT_MOF.1.1">
            <title>The TSF shall restrict the ability to 
              <selectables>
                <selectable>determine the behaviour of</selectable>
                <selectable>disable</selectable>
                <selectable>enable</selectable>
                <selectable>modify the behaviour of</selectable>
              </selectables>
              the functions 
              <selectables>
                <selectable>encryption algorithms used</selectable>
                <selectable>key sizes used</selectable>
              </selectables> to [administrators].
            </title>
         
            
            <note role="application"> The intent of this SFR is to define a mechanism to distinguish administrators 
              (who have the ability to configure the TSF and its data) from users (individuals in the enterprise who have FEs on their systems).
              
              The TSF does not need to provide roles that are explicitly called ‘administrator’ or ‘user’; the ST shall logically define the administrator
              as a combination of one or more roles that are provided by the TOE. A user as defined by this PP-Module may be either a user that is 
              specifically assigned an unprivileged role by the TSF or it may be characterized by an individual that lacks an administrator account on the TOE.
              
              The TSF may optionally provide the ability to rely on an external authentication mechanism to identify users in the case of a user requesting distribution
              of a recovery credential. In this situation, the TOE’s reliance on the Operational Environment is functionally equivalent to the TSF
              maintaining the user role as defined by FMT_SMR.2.1.
              
            </note>
            <aactivity>
              <TSS/>
              The evaluator shall examine that the TSS details how Administrators are authenticated and identified by all TOE components. 
              The evaluator shall examine that authentication and identification of Administrators cannot be compromised for any TOE component in this case.
              
              
              <Guidance/>
              The evaluator shall review the guidance documentation to ensure that it contains instructions for administering the TOE both locally and remotely,
              including any configuration that needs to be performed on the client for remote administration.
              
              <Tests/> The evaluator shall perform the following tests:
              
              In the course of performing the testing activities for the evaluation, the evaluator shall use all supported interfaces, although it is not necessary to repeat
              each test involving an administrative action with each interface. The evaluator shall ensure, however, that each supported method of administering the TOE that
              conforms to the requirements of this PP-Module be tested; for instance, if the TOE can be administered through a local hardware interface; SSH; and TLS/HTTPS; then all
              three methods of administration must be exercised during the evaluation team’s test activities.<h:br/>
              
              
            </aactivity>
          </f-element>
        </f-component>
        
        
      </subsection>
      <subsection title="Protection of the TSF (FPT)" id="fpt">
        <f-component id="FPT_KYP_EXT.2" name="Extended: Protection of Server Key and Key Material ">
          <consistency-rationale>
          </consistency-rationale>
          <f-element id="FPT_KYP_EXT.2.1">
            <title>The TSF shall only store keys in non-volatile memory when
                  <selectables>
                    <selectable>wrapped, as specified in FCS_COP.1(5)</selectable>
                    <selectable>encrypted, as specified in FCS_COP.1(1)</selectable>
                    <selectable>the plaintext key is stored in the underlying platofrm's keystore as specified by FCS_STO_EXT.1.1</selectable>
                    <selectable>the plaintext key is stored in a SQL database in the Operational Environment</selectable>
                    <selectable>the plaintext key is not part of the key chain as specified in FCS_KYC_EXT.1.</selectable>
                    <selectable>the plaintext key will no longer provide access to the encrypted data after initial provisioning</selectable>
                    <selectable>the plaintext key is a key split that is combined as specified in FCS_SMC_EXT.1 and another contribution to the split is
                      <selectables>
                        <selectable>wrapped as specified in FCS_COP.1(5) or encrypted as specified in FCS_COP.1(7)</selectable>
                        <selectable>derived and not stored in non-volatile memory</selectable>
                      </selectables>
                    </selectable>
                    <selectable>the plaintext key is stored on an external storage device for use as an authorization factor.</selectable>
                    <selectable>the plaintext key is used to encrypt a key as specified in FCS_COP.1(7) or wrap a key as specified in FCS_COP.1(5) 
                      that is already encrypted as specified in FCS_COP.1(7) or wrapped as specified in FCS_COP.1(5)</selectable>
                  </selectables>
            </title>
            <note role="application">This details the key storage requierments for the enteprise server.
              The plaintext key storage in non-volatile memory is allowed for
              several reasons. If the keys exist within protected memory that is not user accessible
              on the TOE or OE, the only methods that allow it to play a security relevant role for
              protecting the FEK is if it is a key split or providing additional layers of wrapping
              or encryption on keys that have already been protected. </note>
            <aactivity>
              <TSS/><h:h4> or KMD (Key Management Description may be used if necessary details describe proprietary information)
              </h:h4> The evaluator shall verify the TSS contains a high level description of method(s)
              used to protect keys stored in non-volatile memory.<h:br/> The evaluator shall verify
              the TSS to ensure it describes the storage location of all keys and the protection of
              all keys stored in non-volatile memory. The description of the key chain shall be
              reviewed to ensure FCS_COP.1(5) is followed for the storage of wrapped or encrypted
              keys in non-volatile memory and plaintext keys in non-volatile memory meet one of the
              criteria for storage. 
              <Guidance/> None. 
              <Tests/> None. </aactivity>
          </f-element>
        </f-component>
        
        <f-component id="FPT_KYP_EXT.3" name="Extended: Attribution of Key and Key Material">
          <consistency-rationale>
          </consistency-rationale>
            <f-element id="FPT_KYP_EXT.3.1">
              <title>The TSF shall maintain an association between stored endpoint keys and [user identity, 
                <selectables>
                  <selectable>remote endpoints</selectable>
                  <selectable>recovery credential</selectable>
                  <selectable>system identity</selectable>
                  <selectable>no other subjects</selectable>
                </selectables>
              </title>
              <note role="application">The intent of this SFR is that at minimum, keys are associated with the users for which it was explicitly created by the TSF.
                If the TOE has the ability to maintain a key chain for a user, this SFR is intended to require an association between the key chain and a user through 
                the user account name(s) that are authorized to use it. 
                
                Likewise, if the TOE supports the use of a recovery credential, this SFR is intended to require an association between user and the recovery credential
                used to recover that data. </note>
            </f-element>
            
            <f-element id="FPT_KYP_EXT.3.2">
              <title>The TSF shall provide the ability to register remote endpoints by [assignment: exchange of mutually identifying information that allows for an association to be made].
               </title>
              <note role="Application">The ST author will complete the assignment with information on the method used by the Management Server portion
                of the TOE to establish the association with the endpoint portion of the TOE described in FPT_KYP_EXT.3.1.
              </note>
            </f-element>
            
            <f-element id="FPT_KYP_EXT.3.3">
              <title>The TSF shall provide the ability to revoke the registration of remote endpoints by [assignment: method of removing and/or exchanging information
                that prevents further communications between the TOE and the endpoint].</title>
            </f-element>
            
            
            <f-element id="FPT_KYP_EXT.3.4">
              <title>The TSF shall transmit any secure or private cryptographic information that is transferred between the TOE and a remote endpoint in order
                to establish or disestablish an association using a communications channel with a security strength at least as great as the strength of the
                information being transmitted.</title>
              <note>The channel used to transmit this data is defined in FPT_ITT.1.</note>
            
            
           
              <aactivity>
                
                <TSS/> The evaluator shall examine the TSS to verify that it describes the method by which an association is maintained and verify it matches the selections.
                
                <Guidance/> The evaluator shall verify the guidance documentation provides instructions on how to configure the association, if any configuration is necessary.
                
                <Tests/> For each method of association, the evaluator shall change the configuration so that the associate is broken and verify that enterprise functions do not work.
              
              </aactivity>
            </f-element>
          </f-component>
      
        <f-component id="FPT_ITT.1" name="Basic Internal TSF Data Transfer Protection">
          <consistency-rationale>
          </consistency-rationale>
          <f-element id="FPT_ITT.1.1">
            <title>The TSF shall protect TSF data from [disclosure, modification] when it is transmitted between separate parts
              of the TOE through the use of 
              <selectables>
                <selectable id="IPSEC">IPsec by including the PP-Module for VPN Client</selectable>
                <selectable id="SSH">SSH as defined in FCS_SSH_EXT.1 in the Application Software Protection Profile</selectable>
                <selectable id="TLS">TLS as defined in the TLS Package</selectable>
                <selectable id="HTTPS">HTTPS as defined in FCS_HTTPS_EXT.1 Application Software Protection Profile</selectable>
              </selectables>
            </title>
            <note role="application">This SFR is intended to define protected communications between the Management Server and the endpoints. <h:br/>
              
              The TSF may rely on the Operational Environment to provide the cryptographic functionality that is used to
              establish these trusted communications. If the TOE implements its own cryptographic capability to perform this function,
              the ST author must claim the applicable SFRs for cryptographic primitives and certificate validation as well as the supported cryptographic protocol(s).
            </note>
            <aactivity>
              <TSS/>	The evaluator shall examine the TSS to determine that, for all communications between components of a distributed TOE,
              each communications mechanism is identified in terms of the allowed protocols and intra-TOE configurations for that IT entity. The evaluator
              shall also confirm that all protocols listed in the TSS for these inter-component communications are specified and included in the requirements in the ST.
              
              
              <Guidance/>	The evaluator shall confirm that the guidance documentation contains instructions for establishing the relevant allowed  
              communication channels and protocols between each pair of authorized TOE components, and that it contains instructions to reestablish a connection should a connection be unintentionally broken. 
              
              <Tests/>
              The evaluator shall perform the following tests:
              <testlist>
                <test>Test 1: The evaluator shall ensure that communications using each supported protocol between each pair of authorized TOE components is
                  tested during the course of the evaluation, setting up the connections as described in the guidance documentation and ensuring that communication is successful. 
                </test>
                <test>Test 2: The evaluator shall ensure, for each communication channel with an endpoint or server, the channel data is not sent in plaintext.
                </test>
                <test>Test 3: The evaluator shall, for each protocol associated with each authorized IT entity tested during Test 1, physically interrupt the connection.
                  The evaluator shall ensure that when physical connectivity is restored, communications are appropriately protected. 
                </test>
              </testlist>
              Further assurance activities are associated with the specific protocols.
              
            
            </aactivity>
          </f-element>
        </f-component>
        
        <f-component id="FPT_TRP.1" name="Trusted Path">
          <consistency-rationale>
          </consistency-rationale>
          <f-element id="FPT_TRP.1.1">
            <title>The TSF shall be capable of using 
              <selectables>
                <selectable id="IPSEC">IPsec by including the PP-Module for VPN Client</selectable>
                <selectable id="SSH">SSH as defined in FCS_SSH_EXT.1 in the Application Software Protection Profile</selectable>
                <selectable id="TLS">TLS as defined in the TLS Package</selectable>
                <selectable id="HTTPS">HTTPS as defined in FCS_HTTPS_EXT.1 Application Software Protection Profile</selectable>
              </selectables>
              to provide a communication path between itself and authorized remote administrators that is logically distinct from other communication paths
              and provides assured identification of its end points and protection of the communicated data from [modification, disclosure].
            </title>
          </f-element>
          
          <f-element id="FPT_TRP.1.2">
            <title>The TSF shall permit remote administrators to initiate communication via the trusted path.
            </title>
          </f-element>
          
          <f-element id="FPT_TRP.1.3">
            <title>The TSF shall require the use of the trusted path for initial administrator authentication and all remote administration actions.
          </title>
            
            <note role="application">
              This SFR is intended to define protected communications between the Management Server and remote endpoints.
              The TSF may rely on the Operational Environment to provide the cryptographic functionality that is used to establish the trusted path.
              If the TOE implements its own cryptographic capability to perform this function, the ST author must claim the applicable SFRs for cryptographic primitives
              and certificate validation as well as the supported cryptographic protocol(s).
              
            </note>
            
            <aactivity>
              <TSS/>	The evaluator shall examine the TSS to determine that the methods of remote TOE administration are indicated,
              along with how those communications are protected. The evaluator shall also confirm that all protocols listed in the TSS in support
              of TOE administration are consistent with those specified in the requirement, and are included in the requirements in the ST.
              
              <Guidance/>	The evaluator shall confirm that the guidance documentation contains instructions for establishing the remote administrative sessions for each supported method.
              
              <Tests/>
              The evaluator shall perform the following tests:
              <testlist>
                <test>Test 1: The evaluators shall ensure that communications using each specified (in the guidance documentation) remote administration method are tested during
                  the course of the evaluation, setting up the connections as described in the guidance documentation and ensuring that communication is successful.
                </test>
                <test>Test 2: For each protocol that the TOE can initiate as defined in the requirement, the evaluator shall follow the guidance documentation to ensure
                  that in fact the communication channel can be initiated from the TOE. 
                </test>
                <test>Test 3: The evaluator shall ensure, for each communication channel with an authorized IT entity, the channel data is not sent in plaintext.
                </test>
                <test>Test 4: The evaluator shall ensure that, for each protocol associated with each authorized IT entity tested during test 1, the connection is physically interrupted.
                  The evaluator shall ensure that when physical connectivity is restored, communications are appropriately protected.
                </test>
              </testlist>
              Further assurance activities are associated with the specific protocols.
              
              
            </aactivity>
          </f-element>
        </f-component>
        
      </subsection></additional-sfrs>
      <con-toe></con-toe>
      <con-sec-prob></con-sec-prob>
      <con-obj></con-obj>
      <con-op-en></con-op-en>
    </base-pp>
    <man-sfrs></man-sfrs>
    <opt-sfrs></opt-sfrs>
    <sel-sfrs>
      <f-component id="FCS_CKM.1(A)" name="Extended: Cryptographic key generation (Password/Passphrase conditioning)"> 
        <selection-depends req="FIA_AUT_EXT.2.1" ids="USEPAS"/>
        <consistency-rationale>
        </consistency-rationale>
        <f-element id="FCS_CKM.1.1(A)">
          <title>
            <h:b>Refinement:</h:b>The TSF shall support a password/passphrase of up to 
            [assignment: maximum password size, positive integer of 64 or more] 
            characters used to generate a password authorization factor.
          </title>
        </f-element>
        <f-element id="FCS_CKM.1.2(A)">
          <title>
            <h:b>Refinement:</h:b> The TSF shall allow passwords to be composed of any combination of upper case characters,
            lower case characters, numbers, and the following special characters: “!”, “@”, “#”, “$”, “%”, “^”, “&amp;”, “*”, “(“, and “)”,
            and [selection: [assignment: other supported special characters], no other characters].</title>
        </f-element>
        <f-element id="FCS_CKM.1.3(A)">
          <title>
            <h:b>Refinement:</h:b> The TSF shall perform [Password-based Key Derivation
            Functions] in accordance with a specified cryptographic algorithm [HMAC- <selectables>
              <selectable>SHA-256</selectable>
              <selectable>SHA-384</selectable>
              <selectable>SHA-512</selectable>
            </selectables> ], with [assignment: positive integer of 4096 or more] iterations, and
            output cryptographic key sizes <selectables>
              <selectable>128</selectable>
              <selectable>256</selectable>
            </selectables> that meet the following: [NIST SP 800-132]. 
          </title>
        </f-element>
        <f-element id="FCS_CKM.1.4(A)">
          <title>
            <h:b>Refinement:</h:b> The TSF shall not accept passwords less than [selection: a value settable by the administrator, 
            [assignment: minimum password length accepted by the TOE, must be >= 1]] and greater than the maximum password length 
            defined in FCS_CKM_EXT.1.1(A).</title>
        </f-element>
        <f-element id="FCS_CKM.1.5(A)">
          <title>The TSF shall generate all salts using a RBG that meets FCS_RBG_EXT.1 (from the AS PP) and with entropy 
            corresponding to the security strength selected for PBKDF in FCS_CKM_EXT.1.3(A).</title>
          
          <note role="application"> 
            This applies to passwords on the enterprise server.
            
            The password/passphrase is represented on the host machine as a sequence of characters whose 
            encoding depends on the TOE and the underlying OS. This sequence must be conditioned into a string of bits that is to be used as a KEK that is the same size as the FEK.
            
            For FCS_CKM_EXT.1.1(A), the ST author assigns the maximum size of the password/passphrase it supports; it must support at least 64 characters.
            
            For FCS_CKM_EXT.1.2(A), the ST author assigns any other supported characters; if there are no other supported characters, 
            they should select “no other characters”.
            
            For FCS_CKM_EXT.1.3(A), the ST author selects the parameters based on the PBKDF used by the TSF. The key cryptographic
            key sizes in are made to correspond to the KEK key sizes selected in FCS_CKM_EXT.1.
            
            The password/passphrase must be conditioned into a string of bits that forms the submask to be used as input into the
            KEK. Conditioning is performed using one of the identified hash functions in accordance with the process described in
            NIST SP 800-132. SP 800-132 requires the use of a pseudo-random function (PRF) consisting of HMAC with an approved hash function.
            
            Appendix A of SP 800-132 recommends setting the iteration count in order to increase the computation needed to derive
            a key from a password and, therefore, increase the workload of performing a password recovery attack. However, for this EP,
            a minimum iteration count of 4096 is required in order to ensure that twelve bits of security is added to the password/passphrase value.
            A significantly higher value is recommended to ensure optimal security.
            
            For FCS_CKM_EXT.1.4(A) If the minimum password length is settable, then ST author chooses “a value settable by the administrator
            for this component, as well as the “configure password/passphrase complexity setting” item for FMT_SMF.1.1. If the minimum length
            is not settable, the ST author fills in the assignment with the minimum length the password must be (zero-length passwords are not allowed for compliant TOEs).  </note>
          <aactivity>
            <TSS/> FCS_CKM_1.1(A): There are two aspects of this component that require
            evaluation: passwords/passphrases of the length specified in the requirement (at least
            64 characters) are supported, and that the characters that are input are subject to the
            selected conditioning function. These activities are separately addressed in the text
            below. 
            
            <h:br/>Support for minimum length:The evaluator shall check to ensure that the 
            TSS describes the allowable ranges for password/passphrase lengths, and that at least 64 characters may be specified by the user.
            
            
            <h:br/>Support for character set: The evaluator shall check to ensure that the 
            TSS describes the allowable character set and that it contains the characters listed in the SFR.
            
            <h:br/>Support for PBKDF: The evaluator shall examine the TSS to ensure
            that the formation of all KEKs or FEKs (as decided in the FCS_CKM_EXT.1 selection) is
            described and that the key sizes match that described by the ST author. <h:br/>The
            evaluator shall check that the TSS describes the method by which the password/passphrase
            is first encoded and then fed to the SHA algorithm. The settings for the algorithm
            (padding, blocking, etc.) shall be described, and the evaluator shall verify that these
            are supported by the selections in this component as well as the selections concerning
            the hash function itself. The evaluator shall verify that the TSS contains a description
            of how the output of the hash function is used to form the submask that will be input
            into the function and is the same length as the KEK as specified in FCS_CKM_EXT.4.
            <h:br/>For the NIST SP 800-132-based conditioning of the password/passphrase, the required
            assurance activities will be performed when doing the assurance activities for the
            appropriate requirements (FCS_COP.1.1(4)). If any manipulation of the key is performed
            in forming the submask that will be used to form the FEK or KEK, that process shall be
            described in the TSS. <h:br/>No explicit testing of the formation of the submask from the
            input password is required. 
            
            <h:br/> FCS_CKM_1.2(A): The ST author shall provide a
            description in the TSS regarding the salt generation. The evaluator shall confirm that
            the salt is generated using an RBG described in FCS_RBG_EXT.1 (from the <cite
              linkend="bibAppPP"/>). 
            
            <Guidance/>
            <h:b>Support for minimum length:</h:b> The evaluators shall check the Operational Guidance 
            to determine that there are instructions on how to generate large passwords/passphrases, and
            instructions on how to configure the password/passphrase length (and optional complexity settings)
            to provide entropy commensurate with the keys that the authorization factor is protecting.  
            
            <Tests/> Support for Password/Passphrase characteristics: In addition to the analysis above, 
            the evaluator shall also perform the following tests on a TOE configured according to the Operational Guidance: <testlist>
              <test>Ensure that the TOE supports passwords/passphrases of a minimum length of 64 characters. </test>
              <test>Ensure that the TOE does not accept more than the maximum number of characters specified in FCS_CKM_EXT.1.1(A). </test>
              <test> Ensure that the TOE does not accept less than the minimum number of characters specified in FCS_CKM_EXT.1.4(A).
                If the minimum length is settable by the administrator, the evaluator determines the minimum length or lengths to test.</test>
              <test> Ensure that the TOE supports passwords consisting of all characters listed in FCS_CKM_EXT.1.2(A).</test>
            </testlist>
            <h:b>Conditioning:</h:b> No explicit testing of the formation of the authorization factor
            from the input password/passphrase is required.  </aactivity>
        </f-element>
      </f-component>
      
      <f-component id="FIA_CHR_EXT.1" name="Challenge Response Recovery Credential">
        <selection-depends req="FCS_REC_EXT.1.1"  ids="CR"/>
        <consistency-rationale>
        </consistency-rationale>
        <f-element id="FIA_CHR_EXT.1.1">
          <title>The TSF shall only generate a response if it is able to access recovery information for 
            <selectables>
              <selectable>the user requesting the recovery</selectable>
              <selectable>the user requesting recovery and the device for which the recovery was requested</selectable>
            </selectables>.
          </title>
          <note role="application"> This requires that the TSF has the ability to attribute key chain information to the appropriate user(s).
          </note>
        </f-element>
        
        <f-element id="FIA_CHR_EXT.1.2">
          <title>The response shall only work for the user to whom it was generated.
          </title>
          <note role="application"> This mechanism is intended to provide a recovery method for a user who has forgotten their
            authentication factor and is unable to access their encrypted data on a system that is fully functional.
          </note>
        </f-element>
        
        <f-element id="FIA_CHR_EXT.1.3">
          <title>The response shall only be used during the same session in which the request was generated.
          </title>
          <note role="application"> The intent of this requirement is to limit the attack surface of the recovery credential
            mechanism by preventing the use of the credential following a reboot of the device.
          </note>
        </f-element>
        
        <f-element id="FIA_CHR_EXT.1.4">
          <title>The TSF shall generate an ephemeral response that has at least as many potential values as a corresponding password or PIN.
          </title>
        </f-element>
        
        <f-element id="FIA_CHR_EXT.1.5">
          <title>The TSF shall allow a maximum of <assignable>integer value</assignable> of response entry attempts per boot cycle.
          </title>
        </f-element>
        
        <f-element id="FIA_CHR_EXT.1.6">
          <title>The TSF shall perform remediation as defined in FCS_VAL_EXT.2.3 for failed challenge recovery attempts.
          </title>
          
          <aactivity>
            
            <TSS/> The evaluator shall examine the TSS to determine that the methods for requesting a Recovery credential are specified. 
            The TSS shall also describe the methods used to verify user requesting the Recovery credential. 
            The evaluator shall also verify that the TSS contains the estimation of the strength of the ephemeral response and that it has at least 
            as many potential values as a corresponding password or PIN.
            
            <Guidance/> The evaluator shall confirm that the guidance documentation contains instructions for enforcing verification
            of the user for which the Recovery credential is requested. The guidance shall also describe configuring of the limit for
            consecutive failed validation attempts if this value is configurable.
            
            
            <Tests/> The evaluator shall ensure that a response is only generated if the user for which 
            recovery is requested are verified as specified in TSS. The evaluator shall also ensure that the response is applicable only on 
            behalf of the requesting user with the constraints specified for consecutive failed authentication attempts. <h:br/>
            
            The term “managed” below is used to refer a user or device which is registered on the server, i.e.
            their identity can be successfully verified by either administrator or TSF.
            The “unmanaged” presumes that the user/device cannot be successfully verified. <h:br/>
            
            The evaluator shall perform the following tests: <h:br/>
            
            <testlist>
              <test>Test 1: The evaluator shall configure the Challenge/Response recovery to validate the user. 
                The evaluator shall then issue a challenge on behalf of a managed user and ensure that TSF successfully generates the response.</test>
              <test>Test 2: The evaluator shall configure Challenge/Response recovery to validate the user. 
                The evaluator shall then issue a challenge on behalf of managed User A and attempt to use it as an unmanaged User B to obtain a response. This should fail. </test>
               <test>Test 3: The evaluator shall issue a challenge on behalf of a managed user and ensure that 
                the response received successfully will log the user in on that device.</test>
              <test>Test 4: The evaluator shall attempt to reuse the response of User A with User B on the same system and it should fail.</test>
              <test>Test 5: The evaluator shall issue a challenge on behalf of a managed user from a managed system, 
                reboot the system [system terminates the session] and enter the response. This should fail.</test>
              <test>Test 6: The evaluator shall issue a challenge on behalf of a managed user and attempt to enter an 
                incorrect response on the system the number of times described in the Guidance Documents. The observed behavior shall 
                conform to the assignments/selections in FIA_CHR_EXT.1.5 and FIA_CHR_EXT.1.6.</test>
            </testlist>
            
          </aactivity>
          
        </f-element>
      </f-component>
    </sel-sfrs>
    <obj-sfrs></obj-sfrs>
  </chapter>
      
              


    <bibliography>
      <entry id="bibCC">
        <tag>CC</tag>
        <description>Common Criteria for Information Technology Security Evaluation - <h:ul>
          <h:li><h:a href="http://www.commoncriteriaportal.org/files/ccfiles/CCPART1V3.1R4.pdf">Part
                1: Introduction and General Model</h:a>, CCMB-2012-09-001, Version 3.1 Revision 4,
              September 2012.</h:li>
          <h:li><h:a href="http://www.commoncriteriaportal.org/files/ccfiles/CCPART2V3.1R4.pdf">Part
                2: Security Functional Components</h:a>, CCMB-2012-09-002, Version 3.1 Revision 4,
              September 2012.</h:li>
          <h:li><h:a href="http://www.commoncriteriaportal.org/files/ccfiles/CCPART3V3.1R4.pdf">Part
                3: Security Assurance Components</h:a>, CCMB-2012-09-003, Version 3.1 Revision 4,
              September 2012.</h:li>
          </h:ul></description>
      </entry>
      <entry id="bibAppPP">
        <tag>AppPP</tag>
        <description>
          <h:a href="https://www.niap-ccevs.org/pp/">Protection Profile for Application Software</h:a>
        </description>
      </entry>
      <entry id="FIPS140-2">
        <tag>FIPS140-2</tag>
        <description> Federal Information Processing Standard Publication (FIPS-PUB) 140-2, Security
          Requirements for Cryptographic Modules, National Institute of Standards and Technology,
          March 19, 2007 </description>
      </entry>
      <entry id="FIPS180-4">
        <tag>FIPS180-4</tag>
        <description> Federal Information Processing Standards Publication (FIPS-PUB) 180-4, Secure
          Hash Standard, March, 2012 </description>
      </entry>
      <entry id="FIPS186-4">
        <tag>FIPS186-4</tag>
        <description> Federal Information Processing Standard Publication (FIPS-PUB) 186-4, Digital
          Signature Standard (DSS), National Institute of Standards and Technology, July 2013
        </description>
      </entry>
      <entry id="FIPS197">
        <tag>FIPS197</tag>
        <description>Federal Information Processing Standards Publication (FIPS-PUB) 197,
          Specification for the Advanced Encryption Standard (AES), November 26, 2001 </description>
      </entry>
      <entry id="FIPS198-1">
        <tag>FIPS198-1</tag>
        <description>Federal Information Processing Standards Publication (FIPS-PUB) 198-1, The
          Keyed-Hash Message Authentication Code (HMAC), July 2008 </description>
      </entry>
      <entry id="SP800-38A">
        <tag>NIST800-38A</tag>
        <description>NIST Special Publication 800-38A, Recommendation for Block Cipher Modes of
          Operation: Methods and Techniques, 2001 Edition </description>
      </entry>
      <entry id="SP800-56A">
        <tag>NIST800-56A</tag>
        <description>NIST Special Publication 800-56A, Recommendation for Pair-Wise Key
          Establishment Schemes Using Discrete Logarithm Cryptography (Revised), March 2007
        </description>
      </entry>
      <entry id="SP800-56B">
        <tag>NIST800-56B</tag>
        <description>NIST Special Publication 800-56B, Recommendation for Pair-Wise Key
          Establishment Schemes Using Integer Factorization Cryptography, August 2009 </description>
      </entry>
      <entry id="SP800-90">
        <tag>NIST800-90</tag>
        <description>NIST Special Publication 800-90, Recommendation for Random Number Generation
          Using Deterministic Random Bit Generators (Revised), March 2007 </description>
      </entry>
      <entry id="SP800-132">
        <tag>NIST800-132</tag>
        <description>NIST Special Publication 800-132, Recommendation for Password-Based Key
          Derivation, December 2010 </description>
      </entry>
      <entry id="SP800-38F">
        <tag>NIST800-38F</tag>
        <description>NIST Special Publication 800-38F,Recommendation for Block Cipher Modes of
          Operation: Methods for Key Wrapping, December 2012 </description>
      </entry>
    </bibliography>
  
    <acronyms>
      <entry>
        <term>AES</term>
        <description>Advanced Encryption Standard</description>
      </entry>
      <entry>
        <term>CC</term>
        <description>Common Criteria</description>
      </entry>
      <entry>
        <term>CM</term>
        <description/>
      </entry>
      <entry>
        <term>FAK</term>
        <description>File Authentication Key</description>
      </entry>
      <entry>
        <term>FEK</term>
        <description>File Encryption Key</description>
      </entry>
      <entry>
        <term>DRBG</term>
        <description>Deterministic Random Bit Generator</description>
      </entry>
      <entry>
        <term>EAL</term>
        <description>Evaluation Assurance Level</description>
      </entry>
      <entry>
        <term>ECC</term>
        <description>Elliptic Curve Cryptography</description>
      </entry>
      <entry>
        <term>ECC CDH</term>
        <description>Elliptic Curve Cryptography Cofactor Diffie-Hellman (see NIST SP 800-56A rev 2,
          section 6.2.2.2)</description>
      </entry>
      <entry>
        <term>FIPS</term>
        <description>Federal Information Processing Standards</description>
      </entry>
      <entry>
        <term>ISSE</term>
        <description>Information System Security Engineers</description>
      </entry>
      <entry>
        <term>IT</term>
        <description>Information Technology</description>
      </entry>
      <entry>
        <term>KDF</term>
        <description>Key Derivation Function</description>
      </entry>
      <entry>
        <term>KEK</term>
        <description>Key Encryption Key</description>
      </entry>
      <entry>
        <term>PBKDF</term>
        <description>Password-Based Key Derivation Function</description>
      </entry>
      <entry>
        <term>PIN</term>
        <description>Personnel Identification Number</description>
      </entry>
      <entry>
        <term>PKI</term>
        <description>Public Key Infrastructure</description>
      </entry>
      <entry>
        <term>PP</term>
        <description>Protection Profile</description>
      </entry>
      <entry>
        <term>PUB</term>
        <description>Publication</description>
      </entry>
      <entry>
        <term>RBG</term>
        <description>Random Bit Generator </description>
      </entry>
      <entry>
        <term>SAR</term>
        <description>Security Assurance Requirement</description>
      </entry>
      <entry>
        <term>SF</term>
        <description>Security Function</description>
      </entry>
      <entry>
        <term>SFR</term>
        <description>Security Functional Requirement</description>
      </entry>
      <entry>
        <term>ST</term>
        <description>Security Target</description>
      </entry>
      <entry>
        <term>TOE</term>
        <description>Target of Evaluation</description>
      </entry>
      <entry>
        <term>TSF</term>
        <description>TOE Security Functionality</description>
      </entry>
      <entry>
        <term>TSFI</term>
        <description>TSF Interface</description>
      </entry>
      <entry>
        <term>TSS</term>
        <description>TOE Summary Specification </description>
      </entry>
    </acronyms>
</Module>
