<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="..\transforms\pp2html.xsl"?>

<?xml-model href="https://github.com/commoncriteria/transforms/raw/master/schemas/CCProtectionProfile.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?>

<!-- fixes
    
    -  <threats> tag has no attributes
    
    - every <threat> AND every <assumption> tag must have an objective-refer tag. I did not know what to set these to, so I put in a dummy
    tag for each threat. These need to be fixed. Each one is prefaced with a comment that says HERE so whoever fixes these
    can search for that comment
    <objective-refer ref="O.APPLY_POLICY">
         <rationale>???
        </rationale>
    </objective-refer>
    
    - every SO tag needs a <component-refer ref="..."/> tag. These were in [] so I just moved them into component-refer tags
    
    - for <SO id="O.FEK_SECURITY">, there are to component-refers that are selectable, but you cannot do selectables in
    the <SO> tag. I don't know how to fix this so I put them in a comment for someone to figure out how to fix.
    
    - <SO id="O.AUTHORIZATION, O.PROTECT_DATA"> this is not allowed, you can't have two in one. I separated them but
    do not know the content for O.AUTHORIZATION so that needs to be fixed
    
    - moved the optional requirements under the threshhold requirements and out of the appendix, but there are some headers
    there that probably need to be removed; the sections in the optional requirements appendix no longer make sense
    
    - sel-based requirements - moved them to be under the threshhold requirements, but I had to guess at the correct
    req for the tag. These need to be checked and fixed.
    
    - in the sel-based requirements appendix, there are a bunch 
    
    - in the bibliography, the id attributes had a - in them, so I changed those ids.
    
    -->

<PP xmlns="http://common-criteria.rhcloud.com/ns/cc" name="File Encryption" xmlns:htm="http://www.w3.org/1999/xhtml">
    <PPReference title="PP Reference" id="ID003">
        <ReferenceTable>
            <PPTitle>Extended Package for File Encryption</PPTitle>
            <PPVersion>1.0</PPVersion>
            <PPAuthor>National Information Assurance Partnership</PPAuthor>
            <PPPubDate>2017-5-17</PPPubDate>
            <PPCertificationID>unassigned</PPCertificationID>
            <CCVersion>Version 2.0</CCVersion>
            <Keywords>file encryption; encryption</Keywords>
            <entry>
                <name>Registration</name>
                <description>National Information Assurance Partnership</description>
            </entry>
        </ReferenceTable>
    </PPReference>
    <RevisionHistory role="draft">
        <entry>
            <version>v 0.1</version>
            <date>2014-07-25</date>
            <subject>Initial Release</subject>
        </entry>
        <entry>
            <version>v 1.0</version>
            <date>2014-11-10</date>
            <subject>Public release, incorporating comments received</subject>
        </entry>
        <entry>
            <version>v 2.0</version>
            <date>2017-05-15</date>
            <subject>Inluding TRRTs, Enterprise management</subject>
        </entry>
    </RevisionHistory>
    <RevisionHistory role="final">
        <entry>
            <version>v 0.1</version>
            <date>2014-07-25</date>
            <subject>Initial Release</subject>
        </entry>
        <entry>
            <version>v 1.0</version>
            <date>2014-11-10</date>
            <subject>Public release, incorporating comments received</subject>
        </entry>
         <entry>
            <version>v 2.0</version>
            <date>2017-05-17</date>
            <subject>Inluding TRRTs, Enterprise management</subject>
        </entry>
    </RevisionHistory>

    <chapter title="Introduction" id="int">
        <section title="Overview" id="ppoverview"> This Extended Package (EP) describes security
            requirements for an encryption product that is configurable for the data it encrypts and
            is intended to provide a minimal, baseline set of requirements that are targeted at
            mitigating well defined and described threats. However, this EP is not complete in
            itself, but rather extends the Protection Profile for Application Software <cite
                linkend="bibAppPP"/>. This introduction will describe the features of a compliant
            Target of Evaluation, and will also discuss how this EP is to be used in conjunction
            with the <cite linkend="bibAppPP"/>. 
        </section>
        <section id="glossary" title="Terms">The following sections provide both Common Criteria and
            technology terms used in this Extended Package. 
                <glossary>
                    <entry>
                        <term><abbr title="Common Criteria">CC</abbr></term>
                        <description>Common Criteria for Information Technology Security
                            Evaluation.</description>
                    </entry>
                    <entry>
                        <term><abbr title="Extended Package">EP</abbr></term>
                        <description>An implementation-independent set of security requirements for
                            a category of products, which extends those in a Protection
                            Profile.</description>
                    </entry>
                    <entry>
                        <term><abbr title="Protection Profile">PP</abbr></term>
                        <description>An implementation-independent set of security requirements for
                            a category of products.</description>
                    </entry>
                    <entry>
                        <term><abbr title="Security Target">ST</abbr></term>
                        <description>A set of implementation-dependent security requirements for a
                            specific product.</description>
                    </entry>
                    <entry>
                        <term><abbr title="Target of Evaluation">TOE</abbr></term>
                        <description>The product under evaluation. In this case, application
                            software and its supporting documentation.</description>
                    </entry>
                    <entry>
                        <term><abbr title="TOE Security Functionality">TSF</abbr></term>
                        <description>The security functionality of the product under
                            evaluation.</description>
                    </entry>
                    <entry>
                        <term><abbr title="TOE Security Policy">TSP</abbr></term>
                        <description>The set of rules that regulate how assets are managed,
                            protected and distributed within a TOE.</description>
                    </entry>
                    <entry>
                        <term><abbr title="TOE Summary Specification">TSS</abbr></term>
                        <description>A description of how a <abbr linkend="TOE"/> satisfies the SFRs
                            in a <abbr linkend="ST"/>. </description>
                    </entry>
                    <entry>
                        <term><abbr title="Security Functional Requirement">SFR</abbr></term>
                        <description>A requirement for security enforcement by the <abbr
                                linkend="TOE"/>. </description>
                    </entry>
                    <entry>
                        <term><abbr title="Security Assurance Requirement">SAR</abbr></term>
                        <description>A requirement to assure the security of the <abbr linkend="TOE"
                            />. </description>
                    </entry>
                </glossary>
            
                <glossary>
                    <entry>
                        <term>Administrator</term>
                        <description> Authorized Users with higher privileges and typically handle
                            configuration and management functions, such as configuring and updating
                            the TOE. </description>
                    </entry>
                    <entry>
                        <term>Authorization factor (AF) </term>
                        <description> a value submitted by the user, present on the host, or present
                            on a separate protected hardware physical device used to establish that
                            the user (and potentially the host) is in the community authorized to
                            use the TOE. The authorization factors are used to generate the KEK.
                            Note that these AFs are not used to establish the particular identity of
                            the user. </description>
                    </entry>
                    <entry>
                        <term>Authorized User </term>
                        <description> a user who has been provided Authorization factors by the
                            administrator to use the TOE. </description>
                    </entry>
                    <entry>
                        <term>Data Encryption </term>
                        <description> the process of encrypting all user data written to volatile
                            memory. </description>
                    </entry>
                    <entry>
                        <term>Deterministic Random Bit Generator (DRBG)</term>
                        <description> a cryptographic algorithm that produces a sequence of bits
                            from a secret initial seed value. Without knowledge of the seed value,
                            the output sequence should be unpredictable up to the security level of
                            the DRBG. </description>
                    </entry>
                    <entry>
                        <term>Entropy Source </term>
                        <description> this cryptographic function provides a seed for a random bit
                            generator by accumulating the outputs from one or more noise sources.
                            The functionality includes a measure of the minimum work required to
                            guess a given output and tests to ensure that the noise sources are
                            operating properly. </description>
                    </entry>
                    <entry>
                        <term>File/Set of files </term>
                        <description> the user data that is selected to be encrypted, which can
                            include individual file encryption (with a FEK per file) or a set of
                            files encrypted with a single FEK. </description>
                    </entry>
                    <entry>
                        <term>File Authentication Key (FAK) </term>
                        <description> the secret value used as input when a keyed hash function is
                            used to perform data authentication. </description>
                    </entry>
                    <entry>
                        <term>File Encryption Key (FEK) </term>
                        <description> the key that is used by the encryption algorithm to encrypt
                            the selected user data on the host machine. </description>
                    </entry>
                    <entry>
                        <term>Key Encryption Key (KEK) </term>
                        <description> the key that is used to encrypt the FEK. </description>
                    </entry>
                    <entry>
                        <term>Keying material </term>
                        <description> the KEK, FEK, authorization factors and random numbers or any
                            other values from which keys are derived. </description>
                    </entry>
                    <entry>
                        <term>Noise Source </term>
                        <description> the component of an RBG that contains the non-deterministic,
                            entropy-producing activity. </description>
                    </entry>
                    <entry>
                        <term>Operational Environment </term>
                        <description> hardware and software that are outside the TOE boundary that
                            support the TOE functionality and security policy, including the host
                            platform, its firmware, and the operating system. </description>
                    </entry>
                    <entry>
                        <term>Passphrase</term>
                        <description> A long string of characters that may be used for authorization
                            to the data on the device. </description>
                    </entry>
                    <entry>
                        <term>Password </term>
                        <description> A short string of characters used for authorization to the
                            data on the device. </description>
                    </entry>
                    <entry>
                        <term>Primary Key Chain</term>
                        <description> The direct key chain from the authorization factor to the FEK.
                        </description>
                    </entry>
                    <entry>
                        <term>Random Bit Generator (RBG) </term>
                        <description> a cryptographic function composed of an entropy source and
                            DRBG that is invoked for random bits needed to produce keying material
                        </description>
                    </entry>
                    <entry>
                        <term>Sensitive Data </term>
                        <description> Any data of which the compromise with respect to loss, misuse,
                            or unauthorized access to or modification of could adversely affect the
                            interest of the TOE user. </description>
                    </entry>
                    <entry>
                        <term>Shutdown </term>
                        <description> power down or unintentional loss of power of the TOE or host
                            platform. </description>
                    </entry>
                    <entry>
                        <term>Supplemental Key Chain </term>
                        <description> Other key chains that add protection or functionality without
                            compromising the security of the primary key chain. </description>
                    </entry>
                    <entry>
                        <term>System files </term>
                        <description> Files that reside on the host machine that are used in the
                            operation of the file encryption software. </description>
                    </entry>
                    <entry>
                        <term>Temporary File - </term>
                        <description> a file created by an application for short term storage of
                            sensitive data. </description>
                    </entry>
                    <entry>
                        <term>Trusted Host </term>
                        <description> Source/destination host configured and maintained to provide
                            the TOE with appropriate IT security commensurate with the value of the
                            user data protected by the TOE. </description>
                    </entry>
                    <entry>
                        <term>Unauthorized User </term>
                        <description> a user who has not been authorized to use the TOE and decrypt
                            encrypted user data. </description>
                    </entry>
                    <entry>
                        <term>User Data </term>
                        <description> All data that originate on the host, or is derived from data
                            that originate on the host, excluding system files and signed firmware
                            updates from the TOE manufacturer. </description>
                    </entry>
                    <entry>
                        <term>Volatile memory </term>
                        <description> memory that loses its content when power is turned off.
                        </description>
                    </entry>
                    <entry>
                        <term>Zeroize</term>
                        <description> this term is used to make a distinction between dereferencing
                            a memory location and actively overwriting it with a constant. Keying
                            material needs to be overwritten when it is no longer needed.
                        </description>
                    </entry>
                </glossary>
            
        </section>
        <section title="Compliant Targets of Evaluation" id="complianttargets"> This EP specifically
            addresses encryption of a set of data. This EP addresses the primary threat that an
            unauthorized user will obtain access to a host machine containing encrypted information
            and be able to extract the sensitive data through the process of decryption. The Target
            of Evaluation (TOE) defined in this EP is an encryption product that will inherently
            encrypt all of that data that the user selects to encrypt. For ease of explanation,
            "file" will frequently be used to refer to the object that is encrypted (however, it
            could be any number of things - folders, volumes, containers, etc.).<htm:br/> There are two
            use cases for this EP. First, the traditional ability to encrypt files and power down
            the machine and know the data is securely protected. Second, the ability to encrypt a
            file on a machine and then send the encrypted file securely using a non-encrypted data
            in transit method. </section>
        <section title="Use Cases" id="usecases">
            <subsection title="Usage and Major Security Features of the Target of Evaluation (TOE)"
                id="usagetoe"> File encryption is the process of encrypting individual files or sets
                of files (or volumes, or containers, etc.) on an end user device and permitting
                access to the encrypted data only after proper authentication is provided.
                Encryption products that conform to this EP must render information inaccessible to
                anyone (or, in the case of other software on the machine, anything) that does not
                have the proper authentication credential. For the purposes of this EP, "set of
                files" describes implementations that use one encryption key to encrypt more than
                one file. <htm:br/> The foremost security objective of file encryption is to force an
                adversary to perform a cryptographic exhaust against a prohibitively large key
                space. Note that this can be achieved only if the authorized user of the file
                encryption product follows good security practices and does not store an
                authorization factor in the clear. <htm:br/> Technology is changing at a rapid rate and
                the definition of mobile devices and traditional laptop/PC devices is quickly
                merging. Requirements will diverge slightly for Mobile vs Laptop/PC and the
                Assurance Activities will describe any differences. For this EP, the following table
                will be used to explain the general principles for several key concepts, including
                power state and memory management.<htm:br/>
                <htm:table>
                    <htm:tr class="header">
                        <htm:TH>Topic</htm:TH>
                        <htm:TH>Mobile</htm:TH>
                        <htm:TH>Laptop/PC</htm:TH>
                    </htm:tr>
                    <htm:tr>
                        <htm:td>Memory Management - when the TOE is running</htm:td>
                        <htm:td>The TOE must initiate the request to clear the cryptographic keys and
                            plaintext data, but the TOE Platform will handle the actual instruction
                            through memory management queue. <cite linkend="bibAppPP"/> or <cite linkend="bibMDF"/>
                            (The assurance is dependent on the TOE Platform to perform the action of
                            clearing the plaintext data and cryptographic keys.)</htm:td>
                        <htm:td>The TOE is responsible for handling the clearing of cryptographic keys
                            and plaintext in volatile memory by overwrite or zeroization. (Risk:
                            Non-volatile memory (page files) may still contain the original
                            plaintext data and keys. Reboot is required to ensure that this memory
                            space has been wiped. This risk can be minimized by following good
                            operational practices.) </htm:td>
                    </htm:tr>
                    <htm:tr>
                        <htm:td>Memory Management - when the TOE application cleanly closes</htm:td>
                        <htm:td>The TOE must initiate the request to clear the cryptographic keys and
                            plaintext data, but the TOE Platform will handle the actual instruction
                            through memory management queue. <cite linkend="bibAppPP"/> or <cite linkend="bibMDF"/>
                            (The assurance is dependent on the TOE Platform to perform the action of
                            clearing the plaintext data and cryptographic keys.)</htm:td>
                        <htm:td>The TOE's application memory space is gone and all volatile memory
                            associated with the application no longer exists. All plaintext data and
                            plaintext keys have been destroyed. (Risk: Non-volatile memory (page
                            files) may still contain the original plaintext data and keys. Reboot is
                            required to ensure that this memory space has been wiped. This risk can
                            be minimized by following good operational practices.) </htm:td>
                    </htm:tr>
                    <htm:tr>
                        <htm:td>Memory Management - Lockscreen</htm:td>
                        <htm:td>If the TOE is running and a plaintext document is displayed on the
                            screen the user's data is not protected.</htm:td>
                        <htm:td>Lockscreen/Standby/Hibernate happen invisibly to the TOE, therefore if a
                            plaintext document is displayed on the desktop during one of these
                            events, the user's data is assumed to be not protected. </htm:td>
                    </htm:tr>
                    <htm:tr>
                        <htm:td>Memory Management - unintentional shutdown</htm:td>
                        <htm:td>If the TOE is running and a plaintext document is displayed on the
                            screen and an unintentional shutdown occurs, there is a chance that
                            temporary files may still exist but all volatile memory will be
                            destroyed over time (pending cold boot attack).</htm:td>
                        <htm:td>If the TOE is running and a plaintext document is displayed on the
                            desktop and an unintentional shutdown occurs, there is a chance that
                            temporary files may still exist but all volatile memory will be
                            destroyed.</htm:td>
                    </htm:tr>
                </htm:table> When the user is finished working with sensitive data from an encrypted
                file, the file encryption product must re-encrypt this data and is responsible for
                removing all keying materials and any plaintext data from the encryption product's
                volatile memory or any temporary files (non-volatile memory) it creates during the
                decryption/encryption process. This functionality can be met by a combination of the
                TOE and the Operational Environment. <htm:br/> The data that is to be secured by the
                encryption product is encrypted using a File Encryption Key (FEK). A file encryptor
                may have zero or more Key Encryption Keys (KEKs) that protect (encrypt) the FEK. The
                number of keys and the types of keys may vary, but the design should follow one of
                the following models:<htm:br/>
                <htm:ol>
                    <htm:li>Condition a Password/Passphrase directly into a FEK</htm:li>
                    <htm:li>Condition a Password/Passphrase into a KEK that is used to encrypt the
                        randomly generated FEK directly or through a chaining of more than one KEK
                        (these KEKs would be randomly generated).</htm:li>
                    <htm:li>Use a software certificate or an external token (e.g. smartcard with a RSA
                        or ECC key pair) to protect the randomly generated FEK. The external token
                        will later be referred to as an "external entity" in this EP, and contains
                        "external authorization factors."</htm:li>
                </htm:ol> From a terminology standpoint, a KEK is either a symmetric key (as in case 2)
                or an asymmetric key pair (as in case 3), and is used for both encryption and
                decryption of the FEK. If a distinction needs to be made between the public key
                (which encrypts the FEK) and the private key (which decrypts the FEK), this is done
                in the requirements and the assurance activities below.<htm:br/> Secure design and use
                of a file encryption product must be addressed on multiple levels. From a
                software-design standpoint, the product must employ strong cryptography, robust
                error handling, and ensure complete deletion of all keying materials and plaintext
                data stored in its volatile memory and/or non-volatile memory (platform dependent).
                From a system standpoint, the product may need to be configured to interact with
                other hardware or software (smart cards, cryptographic libraries, etc.) that are
                required on the machine. Finally, from a user standpoint, the product must be simple
                enough to operate to prevent the user from simply not encrypting their files, and
                must include instructions to promote secure operational usage. If any of these
                perspectives are ignored, then secure use of the file encryption product is
                compromised. Therefore, this EP addresses both the cryptography and implementation
                requirements necessary to design a secure product, as well as the user and
                configuration guidance necessary to securely operate the file encryption software
                (for example, how to disable hibernation).<htm:br/> The TOE may be capable of supporting
                multiple users with different authorization factors, such that different users are
                able to use the same platform and not be able to read each other's encrypted files.
                The TOE may also support the ability for users to share an encrypted file without
                sharing an authorization factor, but this is not required.<htm:br/> The vendor is
                required to provide configuration guidance (AGD_PRE, AGD_OPE) to correctly install
                and administer the TOE for every operational environment supported (for example, for
                every OS supported by the product).<htm:br/> Some products support the use of a recovery
                key that can be used to recover the encrypted data if the FEK is lost. This
                functionality must be configurable so it can be turned off and cannot diminish the
                overall strength of the FEK.<htm:br/>
                <htm:b>Authorization</htm:b> One or more authorization factors must be established before
                data can be encrypted. This authorization factor(s) must be presented to the file
                encryption product in order for the user to request that the product decrypt the
                data. Authorization factors may be uniquely associated with individual users or may
                be associated with a community of users. The TOE is not required to support multiple
                types of authorization factors (e.g., both passphrases and external authorization
                factors). If the ST author defines additional authorization factors, they must be
                fully documented and cannot diminish the strength of the passphrase and/or external
                token authorization factors. <htm:br/> All compliant TOEs must provide (or support, in
                the case of an external authorization factor) at least one of the following
                authorization factor options and be able to support the configuration of: <htm:br/>
                <htm:ul>
                    <htm:li>A password/passphrase that supports at least a 64 character space, </htm:li>
                    <htm:li>An external token (e.g. smartcard) or software capability (on the host, for
                        instance) containing a software certificate for the user with RSA or ECC key
                        pairs may be used.<htm:br/> The implementation of this capability is largely
                        outside the TOE boundary (depending on the particulars of the
                        implementation); however, the TOE must interface with the external entity;
                        be able to specify the use of RSA or ECC CDH to protect the FEK (even if
                        this specification is implicit rather than explicit); and be able to provide
                        information to the external entity in order to unlock the private key (if
                        required by the external entity). The computations involving the private key
                        are performed by the cryptographic capability of the external entity. </htm:li>
                </htm:ul> The password/passphrase authorization factors must be conditioned such that
                they are at least the same size (bit length) as the key they are protecting.<htm:br/> A
                password/passphrase authentication factor with low entropy reduces the overall
                algorithm strength. While this EP does not dictate how these authentication factors
                are created, a good operational practice is for an administrator to generate the
                password or passphrase to ensure sufficient entropy. Once the password/passphrase is
                entered by the user, it is conditioned by the TOE prior to being provided as an
                encryption key. Passphrases are preferred over passwords, since it is easier for
                users to remember and type in a sequence of words than recall a password and type in
                a long string of random characters. The requirements in Appendix C for the selected
                authorization factors should be included in the ST. <htm:b>Encryption</htm:b> One or more
                authorization factors must be established or entered before data can be encrypted or
                decrypted, respectively. Entry of an incorrect authorization factor should not
                result in the user seeing an improperly decrypted file. Entry of a correct or
                incorrect authorization factor should not aid an attacker in guessing the KEK or
                FEK.<htm:br/> If the cryptography used to generate, handle, and protect keys or
                authorization factors is sufficiently robust and if the implementation has no
                critical mistakes, the only option for an adversary who obtains the encrypted
                information without the authorization factors or KEK must be to exhaust the
                encryption key space of the KEK or FEK for data decryption. Note that if passwords
                are used, a password might offer less strength than exhausting over the potential
                number of keys for the data encryption algorithm (AES). Furthermore, if the password
                is the only authorization factor unknown to the adversary, then the key space is the
                minimum of the work needed to exhaust the KEK or FEK or to exhaust the number of
                possible passwords. As a consequence, the next generation of this EP may require
                support for more robust authorization factors.<htm:br/> If external authorization
                factors are used, the external device generally requires some factor (such as a PIN
                or password) to unlock the private key. In these cases, the PIN or password may have
                a similar smaller exhaust space than the KEK or FEK, and this should be taken into
                account when choosing a product that is conformant to this EP.<htm:br/> The data being
                secured by the file encryption product must be encrypted using a FEK. If the FEK is
                protected by the KEK, the FEK will be generated using a Deterministic Random Bit
                Generator (DRBG) that meets the requirements of FCS_RBG_EXT.1 (from the <cite
                    linkend="bibAppPP"/>). The DRBG comprises an entropy source and the DRBG
                algorithm. A properly seeded DRBG provides enough entropy to be of equal or greater
                value than the exhaust space of the KEK.<htm:br/>
                <htm:b>Administration</htm:b> The base requirements of the TOE do not require the TOE to
                maintain an administrative role (the notion of an administrator of the TOE is that
                there exists a subset of the users of the TOE that have greater "trust" than the
                general user population and who have specific responsibilities). Typically,
                administrators possess privilege to invoke functionality on the TOE that is not
                available to general users. For file encryption products, however, once the product
                is installed there should be little need for administrative involvement.
                    <htm:b>Authorized Users</htm:b> Authorized users are expected to adhere to the user
                guidance to minimize the risk of compromised data. Authorization is determined by
                possessing and providing the TOE the correct authorization factor(s) to enable the
                file encryption product"s functionality. It is the responsibility of the authorized
                users of the host machine to secure and protect the host machine and authorization
                factors for the TOE while it is officially in their possession. Authorized users
                will not leave/store unprotected authorization factors (e.g., passwords,
                passphrases) in written or digital form on or around the host machine. The user will
                be provided appropriate guidance to maintain a secure TOE. <htm:b>Data Authentication
                    (optional)</htm:b> Because modification of ciphertext data for certain modes of
                encryption will enable unidentified plaintext manipulation, care must be taken by
                the TOE to mitigate against forged or maliciously modified ciphertext data. The EP
                defines requirements for how the TOE must provide data authentication services,
                allowing the TOE to implement authenticated block cipher, keyed hash function or
                asymmetric signing features. Depending on the implementation, the TOE will be
                responsible for meeting at least one of the aforementioned requirements. In all
                cases, unsuccessful authentication of the data should not allow the user to see the
                decrypted ciphertext and notification should be provided to the user if such an
                event were to occur.<htm:br/> A keyed hashing service may also be used to accomplish
                data authentication. This will involve using an approved keyed hashing service in
                accordance with FCS_COP.1(4) and proper protection of the File Authentication Key
                (FAK); the FAK being the secret value used as input to the keyed hash function. FAKs
                should be numerically different from the FEK, but will be protected in all of the
                same manners as the FEK. The primary requirement dictating implementation of data
                authentication using a keyed hash function is FDP_AUT_EXT.2.<htm:br/> Lastly, asymmetric
                signing in conjunction with a secure hash function may be used to authenticate the
                data. The implementation must use an approved signing algorithm in accordance with
                FCS_COP.1(2) (from the <cite linkend="bibAppPP"/>) and an approved secure hashing
                function in accordance with FCS_COP.1(3) (from the <cite linkend="bibAppPP"/>). The
                primary requirement addressing data authentication via asymmetric signing is
                FDP_AUT_EXT.3. </subsection>
            <subsection title="The TOE and Its Supporting Environment" id="supenv"> Since the TOE is
                purely a software solution, it must rely on the TOE Operational Environment (system
                hardware, firmware, and operating system) for its execution domain and its proper
                usage. The vendor is expected to provide sufficient installation and configuration
                instructions (for each platform listed in the ST) to identify an Operational
                Environment with the necessary features and to provide instructions for how to
                configure it correctly and securely. <htm:br/> The EP contains requirements (Section 4)
                that must be met by either the TOE or the platform on which it operates. A
                "platform" is defined as a separate entity whose functions may be used by the TOE,
                but is not part of the TOE. A third-party library used by the TOE is not considered
                part of the TOE's "platform", but (for instance) cryptographic functionality that is
                built into an Operating System on which the TOE executes can be considered part of
                the platform. <htm:br/> Likewise, an external entity (such as a smartcard) that performs
                cryptographic operations with respect to the FEK would also be considered a part of
                the "TOE Platform."<htm:br/> Requirements that can be satisfied by either the TOE or the
                platform are identified in Section 4.3. The ST author will make the appropriate
                selection based on where that element is implemented. It is allowable for some
                elements in a component to be implemented by the TOE, while other elements in that
                same component may be implemented by the platform; in these cases, further guidance
                is given in the application notes and assurance activities.<htm:br/> In some cases, the
                TOE vendor will have to provide specific configuration guidance for the Operational
                Environment to enable the TOE to meet its security objectives. These include:<htm:br/>
                For non-mobile systems:<htm:br/>
                <htm:ul>
                    <htm:li>Instructions for how to configure the operational environment so that the
                        system powers down completely after a period of user inactivity for every
                        operating system that the product supports;</htm:li>
                    <htm:li>Instructions for how to disable power managed state (e.g., hibernate/sleep)
                        capabilities </htm:li>
                </htm:ul> For mobile systems:<htm:br/>
                <htm:ul>
                    <htm:li>Instructions for how to configure the operational environment to provide
                        necessary behavior in support of TOE functionality when transition to a
                        locked state after inactivity period and manually engaging the lock
                        functionality.</htm:li>
                    <htm:li>Instructions on how to configure the operational environment such that it is
                        compliant with the Mobile Device Fundamentals Protection Profile.</htm:li>
                </htm:ul> It should be noted that if the TOE possesses the capability to correctly
                protect information in one or more of an underlying platform's power managed modes,
                they can use the FDP_PM_EXT.1 requirement in Appendix B.<htm:br/> Authorized users of
                the TOE are those users possessing valid authorization factors for the TOE. While
                some of these functions specified in the EP might be considered "administrative"
                functions for other types of TOEs, for file encryption products it is the
                expectation that all of these functions can be performed by the end user of the
                software. </subsection>
        </section>
    </chapter>
    <chapter title="Conformance Claims" id="conf">
        <cclaims>
            <cclaim id="Conformance Statement">
                <description> The Protection Profile for Application Software <cite linkend="bibAppPP"/> defines
                    the baseline Security Functional Requirements (SFRs) and Security Assurance
                    Requirements (SARs) for application software products. This EP serves to extend
                    the App PP baseline with additional SFRs and associated Assurance Activities
                    specific to an email client. Assurance Activities are the actions that the
                    evaluator performs in order to determine an email client's compliance to the
                    SFRs.<htm:br/> This EP conforms to Common Criteria <cite linkend="bibCC"/> for
                    Information Technology Security Evaluation, Version 3.1, Revision 4. It is CC
                    Part 2 extended and CC Part 3 conformant. In order to be conformant to this EP,
                    the ST must include all components in this EP and the associated App PP that
                    are: <htm:ul><htm:li>unconditional (which are always required)</htm:li>
                        <htm:li>selection-based (which are required when certain selections are chosen
                            in the unconditional requirements)</htm:li>
                    </htm:ul> and may include optional and/or objective components that are desirable
                    but not required for conformance. </description>
            </cclaim>
        </cclaims>
        <section title="How to Use This Extended Package" id="howto"> As an EP of the <cite
                linkend="bibAppPP"/>, it is expected that the content of both this EP and the <cite
                linkend="bibAppPP"/> be appropriately combined in the context of each
            product-specific Security Target. This EP has been specifically defined such that there
            should be no difficulty or ambiguity in so doing. An ST must identify the applicable
            versions of the <cite linkend="bibAppPP"/> (see http://www.niap-ccevs.org/pp/ for the
            current version) and this EP in its conformance claims. When requirements are referenced
            from the <cite linkend="bibAppPP"/>, a short notation is included. </section>
    </chapter>
    <chapter title="Security Problem Description" id="spd"> The primary asset that is being
        protected is the sensitive user data stored on a system. The threat model thus focuses on a
        host machine that has been compromised by an unauthorized user. This section addresses
        threats to the TOE only. 
        <section title="Threats" id="threats"> A threat consists of a
            threat agent, an asset, and an adverse action of that threat agent on that asset. The
            model in this EP only addresses risks that arise from the host machine being compromised
            by an unauthorized user.<htm:br/> For this EP, the TOE is not expected to defend against all
            threats related to malicious software that may reside in user data files. For instance,
            the TOE is not responsible for detecting malware in the data selected by the user for
            encryption (that is a responsibility of the host environment). Once the file encryption
            product is operational in a host system, the threats against the data from potentially
            malicious software on the host are also not in the threat model of this EP. For example,
            there are no requirements in this EP addressing a malicious host capturing a
            password-based authorization factor, nor a malicious process reading the memory of an
            application program that is operating on a decrypted file.<htm:br/> Note that this EP does
            not repeat the threats identified in the <cite linkend="bibAppPP"/>, though they all
            apply given the conformance and hence dependence of this EP on the <cite
                linkend="bibAppPP"/>. Note also that while the <cite linkend="bibAppPP"/> contains
            only threats to the ability of the TOE to provide its security functions, this EP
            focuses on threats to resources in the operational environment. Together the threats of
            the AS PP and those defined in this EP define the comprehensive set of security threats
            addressed by a file encryption TOE. 
            <threats>
                <threat id="T.KEYING_MATERIAL_COMPROMISE">
                    <description>
                        <htm:b>Compromise of Keying Material:</htm:b> Attacks against the encryption product
                        could take several forms; for example, if there is a weakness in the random
                        number generation mixing algorithm or the data sources used in random number
                        generation are guessable, then the output may be guessable as well. If an
                        attacker can guess the output of the pseudorandom number generator (PRNG) at
                        the time an encryption key is made, then the output may be used to recreate
                        the keying material and decrypt the protected files. As the encryption
                        program runs, it will store a variety of information in memory. Some of this
                        information, such as random bit generation (RBG) inputs, RBG output, copies
                        of the plaintext file, and other keying material, could be very valuable to
                        an attacker who wishes to decrypt an encrypted file. If the encryption
                        product does not wipe these memory spaces appropriately, an attacker may be
                        able to recreate the encryption key and access encrypted files.
                    </description>
                    <!-- HERE -->
                    <objective-refer ref="O.KEY_MATERIAL_PROTECTION">
                        <rationale>The threat T.KEYING_MATERIAL_COMPROMISE is countered by O.KEY_MATERIAL_PROTECTION as this
                            provides protection of key material.
                        </rationale>
                    </objective-refer>
                </threat>
                <threat id="T.KEYSPACE_EXHAUST">
                    <description>
                        <htm:b>Brute Force Attack:</htm:b> The protection of the data involves encrypting
                        said data assuming an attacker may have significant computing resources at
                        their disposal. Several ciphers have already been broken through brute-force
                        attacks because the length of the keys used in those ciphers was too short
                        to provide protection against a concerted computing effort to discover those
                        keys. Because protection of the data may rely on a chaining of keys and
                        encryption mechanisms, there are many opportunities for brute force attacks
                        against each potential key in the chain, such that the weakest link in the
                        chain of factors/keys will determine the overall strength against a brute
                        force attack. </description>
                    <!-- HERE -->
                    <objective-refer ref="O.APPLY_POLICY">
                        <rationale>???
                        </rationale>
                    </objective-refer>
                </threat>
                <threat id="T.PLAINTEXT_COMPROMISE">
                    <description>
                        <htm:b>Plaintext Compromise:</htm:b> Unlike full disk encryption, selectable
                        encryption products also need to protect against data leaks to other
                        applications on the machine. Many file creators and editors store temporary
                        files as the user is working on a file, and restore files if the machine
                        experiences an interrupt while a file is open. Any of these files, if not
                        properly protected or deleted, could leak information about a protected file
                        to an attacker. Other applications might also access volatile or
                        non-volatile memory released by the file encryption product, and the
                        software used to create files prior to encryption may retain information
                        about the file even after it has been encrypted. As the user creates and
                        saves a new document, the plaintext will be stored on the machine's hard
                        drive. An attacker could then search for the plaintext of the sensitive,
                        encrypted information. An attacker may not even have to access the encrypted
                        file for the protected information to be compromised. When the user wishes
                        to encrypt the document, this plaintext file should be replaced with the new
                        encrypted version. For non-mobile devices, it is expected that if the
                        volatile and/or non-volatile memory space where the plaintext file was
                        stored is merely released back to the machine without being first wiped
                        clean of the data that was stored there, then the information the user
                        wishes to protect will still be accessible. While protection of the
                        encryption algorithm itself is vital, memory must also be properly managed
                        by the file encryption product or the TOE platform in order for security to
                        remain intact. For mobile devices, it is assumed that the File Encryption
                        product will not be responsible for providing memory management cleanup and
                        the environment's platform has met the Mobile Device Fundamentals Protection
                        Profile.<htm:br/> Additionally, some encryption products offer to create backup
                        files. These files are meant to be used in the event an encrypted file
                        becomes corrupted and incapable of being decrypted. Each backup file is a
                        valuable resource to protect information that the user cannot afford to
                        lose; however, it also may provide another route for an attacker to access
                        the encrypted information. If the backup file is insufficiently protected,
                        then the attacker may choose to attempt to break into it, rather than the
                        copy of the encrypted file that the user would typically access.
                    </description>
                    <!-- HERE -->
                    <objective-refer ref="O.APPLY_POLICY">
                        <rationale>???
                        </rationale>
                    </objective-refer>
                </threat>
                <threat id="T.TSF_FAILURE">
                    <description>
                        <htm:b>TSF Failure:</htm:b> Security mechanisms of the TOE generally build up from a
                        primitive set of mechanisms (e.g., memory management, privileged modes of
                        process execution) to more complex sets of mechanisms. Failure of the
                        primitive mechanisms could lead to a compromise in more complex mechanisms,
                        resulting in a compromise of the TSF. </description>
                    <!-- HERE -->
                    <objective-refer ref="O.APPLY_POLICY">
                        <rationale>???
                        </rationale>
                    </objective-refer>
                </threat>
                <threat id="T.UNAUTHORIZED_DATA_ACCESS">
                    <description>
                        <htm:b>Unauthorized Data Access:</htm:b> The central functionality of the TOE is the
                        protection of resources under its control through encryption. In a shared
                        resource environment, users on a system may have access to
                        administrative-level tools that are capable of over-riding a system's access
                        control protections. Further, if the system were to be lost or the system's
                        storage device stolen, the attacker could then look directly at the storage
                        device using low-level forensic tools in an attempt to access data for which
                        they are not authorized. However, the need to protect the data in these
                        scenarios should not interfere with the data-owner's (or another user that
                        has been granted access to those data) ability to read or manipulate the
                        data. </description>
                    <!-- HERE -->
                    <objective-refer ref="O.APPLY_POLICY">
                        <rationale>???
                        </rationale>
                    </objective-refer>
                </threat>
                <threat id="T.UNSAFE_AUTHFACTOR_VERIFICATION">
                    <description>
                        <htm:b>Flawed Authentication Factor Verification:</htm:b> When a user enters an
                        authorization factor, the TOE is required to ensure that the authorization
                        factor is valid prior to providing any data to the user; the purpose of
                        verification is to ensure the FEK is correctly derived. If the data is
                        decrypted with an incorrectly derived FEK (the FEK is conditioned from the
                        password/passphrase or is decrypted by the KEK), then unpredictable data
                        will be provided to the user. If verification is not performed in a secure
                        manner, keying material or user data may be exposed or weakened.
                    </description>
                    <!-- HERE -->
                    <objective-refer ref="O.APPLY_POLICY">
                        <rationale>???
                        </rationale>
                    </objective-refer>
                </threat>
                <threat id="T.PLAINTEXT_DATA_SPOOFING">
                    <description>
                        <htm:b>Data Spoofing (optional):</htm:b> For certain modes of encryption, it is
                        possible for a malicious person to modify ciphertext data to force
                        unintended modification to the underlying plaintext data, without the user
                        being notified. There are various failures that may occur on the part of the
                        TOE, to include: failure to verify the integrity of the data prior to
                        decryption, failure to provide integrity on the sensitive data, failure to
                        use a cryptographic or secure hashing code and failure to differentiate the
                        File Authentication Key (FAK) from the FEK; the FAK is any secret value used
                        as input to a keyed hashing function or as part of an asymmetric
                        authentication process. </description>
                    <!-- HERE -->
                    <objective-refer ref="O.APPLY_POLICY">
                        <rationale>???
                        </rationale>
                    </objective-refer>
                </threat>
            </threats>
        </section>
            <section title="Assumptions" id="assumptions">
                <assumptions>
                    <assumption id="A.AUTHORIZED_USER">
                        <description>Authorized users of the host machine are well-trained, not
                            actively working against the protection of the data, and will follow all
                            provided guidance.</description>
                        <!-- HERE -->
                        <objective-refer ref="O.APPLY_POLICY">
                            <rationale>???
                            </rationale>
                        </objective-refer>
                    </assumption>
                    <assumption id="A.AUTH_FACTOR">
                        <description>An authorized user will be responsible for ensuring that all
                            externally derived authorization factors have sufficient strength and
                            entropy to reflect the sensitivity of the data being protected. This can
                            apply to password- or passphrase-based, ECC CDH, and RSA authorization
                            factors.</description>
                        <!-- HERE -->
                        <objective-refer ref="O.APPLY_POLICY">
                            <rationale>???
                            </rationale>
                        </objective-refer>
                    </assumption>
                    <assumption id="A.EXTERNAL_FEK_PROTECTION">
                        <description>External entities that implement ECC CDH or RSA that are used
                            to encrypt and decrypt a FEK have the following characteristics:
                            <htm:br/>meet National requirements for the cryptographic mechanisms
                            implemented; <htm:br/>require authentication via a pin or other mechanisms
                            prior to allowing access to protected information (the decrypted FEK, or
                            the private key); <htm:br/>implement anti-hammer provisions where
                            appropriate (for example, when a pin is the authentication factor).
                        </description>
                        <!-- HERE -->
                        <objective-refer ref="O.APPLY_POLICY">
                            <rationale>???
                            </rationale>
                        </objective-refer>
                    </assumption>
                    <assumption id="A.SHUTDOWN">
                        <description>An authorized user will not leave the machine in a mode where
                            sensitive information persists in non-volatile storage (e.g., power it
                            down or enter a power managed state, such as a "hibernation
                            mode").</description>
                        <!-- HERE -->
                        <objective-refer ref="O.APPLY_POLICY">
                            <rationale>???
                            </rationale>
                        </objective-refer>
                    </assumption>
                    <assumption id="A.STRONG_OE_CRYPTO">
                        <description>All cryptography implemented in the Operational Environment and
                            used by the TOE will meet the requirements listed in Appendix C of this
                            EP. This includes generation of external token authorization factors by
                            a RBG.</description>
                        <!-- HERE -->
                        <objective-refer ref="O.APPLY_POLICY">
                            <rationale>???
                            </rationale>
                        </objective-refer>
                    </assumption>
                    <assumption id="A.PLATFORM_STATE">
                        <description>The platform on which the TOE resides is free of malware that
                            could interfere with the correct operation of the product.</description>
                        <!-- HERE -->
                        <objective-refer ref="O.APPLY_POLICY">
                            <rationale>???
                            </rationale>
                        </objective-refer>
                    </assumption>
                    <assumption id="A.AUTHORIZED_CONFIGURATION">
                        <description>Access and ability to modify the cryptographic configuration
                            files may be done only by authorized users.</description>
                        <!-- HERE -->
                        <objective-refer ref="O.APPLY_POLICY">
                            <rationale>???
                            </rationale>
                        </objective-refer>
                    </assumption>
                    <assumption id="A.KEK_SECURITY">
                        <description>The KEK will be derived from a strong entropy source, attaining
                            equal or greater bit strength to that of the block cipher it is used
                            in.</description>
                        <!-- HERE -->
                        <objective-refer ref="O.APPLY_POLICY">
                            <rationale>???
                            </rationale>
                        </objective-refer>
                    </assumption>
                    <assumption id="A.FILE_INTEGRITY ">
                        <description>When the file is in transit, it is not modified, otherwise if
                            that possibility exists, the appropriate selections in Appendix B are
                            chosen for Data Authentication.</description>
                        <!-- HERE -->
                        <objective-refer ref="O.APPLY_POLICY">
                            <rationale>???
                            </rationale>
                        </objective-refer>
                    </assumption>
                </assumptions>
            </section>
            <section title="Organizational Security Policy" id="orgpolicy"> There are no additional
                OSPs for the File Encryption product.</section>

    </chapter>
    <chapter title="Security Objectives" id="obj">
        <section title="Security Objectives for the TOE" id="objtoe"> The Security Problem described
            in Section 2 will be addressed by a combination of cryptographic capabilities. Compliant
            TOEs will provide security functionality that addresses threats to the TOE and enforces
            policies that are imposed by law and regulation. The following subsections provide a
            description of the security objectives required to meet the threats/policies previously
            discussed. The description of these security objectives are in addition to that
            described in the <cite linkend="bibAppPP"/>.<htm:br/> Note: in each subsection below
            particular security objectives are identified (highlighted by O.) and they are matched
            with the associated security functional requirements (SFRs) that provide the mechanisms
            to satisfy the objectives.<htm:br/> The Security Objectives are the requirements for the
            Target of Evaluation (TOE) and for the Operational Environment derived from the threats
            in Section 2. <SOs>
                <SO id="O.KEY_MATERIAL_PROTECTION">
                    <description>
                        <htm:b>Protection of Key Material:</htm:b> The TOE must ensure that plaintext key
                        material used in performing its operations is cleared once it is no longer
                        needed. Key material must be identified; its use and intermediate storage
                        areas must also be identified; and then those storage areas must be cleared
                        in a timely manner and without interruptions. For example, authorization
                        factors are only needed until the KEK is formed; at that point, volatile
                        memory areas containing the authorization factors should be cleared.<htm:br/>
                        </description>
                    <!-- HERE --><component-refer ref="FCS_CKM_EXT.4"/>
                    <!-- HERE --><component-refer ref="FDP_PRT_EXT.1"/>
                    <!-- HERE --><component-refer ref="optional: FDP_PM_EXT.1"/>
                </SO>
                <SO id="O.FEK_SECURITY">
                    <description>
                        <htm:b>Encryption Using a Strong FEK and KEK:</htm:b> In order to ensure that brute
                        force attacks are infeasible, the TOE must ensure that the cryptographic
                        strength of the keys and authorization factors used to generate and protect
                        the keys is sufficient to withstand attacks in the near-to-mid-term future.
                        Password/passphrase complexity and conditioning requirements are also levied
                        to help ensure that a brute force attack against these authorization factors
                        (when used) has a similar level of resistance.<htm:br/> [(selectable: FCS_CKM.1, FCS_CKM_EXT.1,
                        FCS_COP.1(4)] </description>
                    <!-- HERE --><component-refer ref="FCS_CKM_EXT.2"/>
                    <!-- HERE --><component-refer ref="FMT_SMF.1"/>
                    <!-- HERE --><component-refer ref="FCS_COP.1(1)"/>
                    <!-- HERE --><component-refer ref="FCS_COP.1(5)"/>
                    <!-- HERE --><component-refer ref="FCS_IV_EXT.1"/>
                    <!-- HERE --><component-refer ref="FPT_FEK_EXT.1"/>
                    <!-- HERE --><component-refer ref="optional: FCS_COP.1(6)"/>
                    <!-- HERE CANNOT do a selectable here, so I don't know how to add those last two
                        (selectable: FCS_CKM.1, FCS_CKM_EXT.1, FCS_COP.1(4), this is my best attempt
                        --> 
                    <component-refer ref="(selectable: FCS_CKM.1, FCS_CKM_EXT.1,FCS_COP.1(4)"/>
                </SO>
                <SO id="O.WIPE_MEMORY">
                    <description>
                        <htm:b>Removal of Plaintext Data:</htm:b> To address the threat of unencrypted
                        copies of data being left in non-volatile memory or temporary files where it
                        may be accessed by an unauthorized user, the TOE will ensure that plaintext
                        data it creates is securely erased when no longer needed. The TOE's
                        responsibility is to utilize the appropriate TOE platform method for secure
                        erasure, but the TOE is not responsible for verifying that the secure
                        erasure occurred as this will be the responsibility of the TOE platform.
                        <htm:br/> </description>
                    <!-- HERE --><component-refer ref="FDP_PRT_EXT.1"/>
                    <!-- HERE --><component-refer ref="(optional: FDP_PRT_EXT.2)"/>
                </SO>
                <!--HERE -->
                <SO id="O.AUTHORIZATION">
                    <description></description>
                    <component-refer ref=""></component-refer>
                </SO>
                <SO id="O.PROTECT_DATA">
                    <description>
                        <htm:b>Protection of Data:</htm:b> The TOE will encrypt data to protect the data
                        from unauthorized access. Encrypting the file or set of files will protect
                        the user data even when low-level tools that bypass operating system
                        protections such as discretionary and mandatory access controls are
                        available to an attacker. Users that are authorized to access the data must
                        provide authorization factors to the TOE in order for the data to be
                        decrypted and provided to the user.<htm:br/> </description>
                    <!-- HERE --><component-refer ref="FCS_CKM_EXT.1"/>
                    <!-- HERE --><component-refer ref="FDP_PRT_EXT.1"/>
                    <!-- HERE --><component-refer ref="FCS_COP.1(1)"/>
                    <!-- HERE --><component-refer ref="optional: FDP_AUT_EXT.2"/>
                    <!-- HERE --><component-refer ref="optional: FDP_AUT_EXT.3"/>
                    <!-- HERE --><component-refer ref="(selectable: FCS_KM_EXT.1, FCS_COP.1(4), FCS_CKM_EXT.1(A)"/>
                    
                </SO>
                <SO id="O.SAFE_AUTHFACTOR_VERIFICATION">
                    <description>
                        <htm:b>Safe Authentication Factor Verification:</htm:b> In order to avoid exposing
                        information that would allow an attacker to compromise or weaken any factors
                        in the chain keys generated or protected by the authorization factors, the
                        TOE will verify the valid authorization factor prior to the FEK being used
                        to decrypt the data being protected.<htm:br/></description>
                    <!-- HERE --><component-refer ref="FIA_AUT_EXT.1"/>
                    <!-- HERE --><component-refer ref="selectable:
                        FIA_FCT_EXT.1(1), FIA_FCT_EXT.1(2)"/>
                </SO>
                <SO id="O.DATA_AUTHENTICATION">
                    <description>
                        <htm:b>Data Authentication:</htm:b> For certain encryption modes, it is feasible to
                        maliciously modify the ciphertext data to cause unintended modifications to
                        plaintext data, without user notification. The TOE may provide a method for
                        authenticating the sensitive data and using an approved data authentication
                        method.<htm:br/></description>
                    <!-- HERE --><component-refer ref="FCS_CKM_EXT.4"/>
                    <!-- HERE --><component-refer ref="optional: FDP_AUT_EXT.1"/>
                    <!-- HERE --><component-refer ref="optional: FDP_AUT_EXT.2"/>
                    <!-- HERE --><component-refer ref="optional: FDP_AUT_EXT.3"/>
                    <!-- HERE --><component-refer ref="optional: FCS_CKM_EXT.5"/>
                </SO>
                <SO id="O.CORRECT_TSF_OPERATION">
                    <description>The TOE will provide the capability to test the TSF to ensure the
                        correct operation of the TSF in its operational environment.</description>
                    <!-- HERE --><component-refer ref=""/>
                </SO>
                <SO id="O.MANAGE">
                    <description>The TOE will provide all the functions and facilities necessary to
                        support the authorized administrators in their management of the security of
                        the TOE, and restrict these functions and facilities from unauthorized
                        use.</description>
                    <!-- HERE --><component-refer ref=""/>
                </SO>
            </SOs>
        </section>
        <section title="Security Objectives for the TOE's Operational Environment" id="objenv"> The
            Operational Environment of the TOE implements technical and procedural measures to
            assist the TOE in correctly providing its security functionality (which is defined by
            the security objectives for the TOE). The security objectives for the Operational
            Environment consist of a set of statements describing the goals that the Operational
            Environment should achieve.<htm:br/> This section defines the security objectives that are
            to be addressed by the IT domain or by non-technical or procedural means. The
            assumptions identified in Section 3 are incorporated as security objectives for the
            environment. <SOs>
                <SO id="OE.AUTHORIZATION_FACTOR_STRENGTH">
                    <description>An authorized user will be responsible for ensuring that all
                        externally derived authorization factors have sufficient strength and
                        entropy to reflect the sensitivity of the data being protected. This can
                        apply to password- or passphrase-based, ECC CDH, and RSA authorization
                        factors.</description>
                    <!-- HERE --><component-refer ref=""/>
                </SO>
                <SO id="OE.POWER_SAVE">
                    <description>The non-mobile operational environment must be configurable so that
                        there exists at least one mechanism that will cause the system to power down
                        after a period of time in the same fashion as the user electing to shutdown
                        the system (A.SHUTDOWN). Any such mechanism (e.g., sleep, hibernate) that
                        does not conform to this requirement must be capable of being disabled.
                        <htm:br/> The mobile operational environment must be configurable such that
                        there exists at least one mechanism that will cause the system to lock upon
                        a period of time. </description>
                    <!-- HERE --><component-refer ref=""/>
                </SO>
                <SO id="OE.STRONG_ENVIRONMENT_CRYPTO">
                    <description>The Operating environment will provide a cryptographic function
                        capability that is commensurate with the requirements and capabilities of
                        the TOE.</description>
                    <!-- HERE --><component-refer ref=""/>
                </SO>
                <SO id="OE.TRAINED_USERS">
                    <description>Authorized users of the host machine will be trained to follow all
                        provided guidance.</description>
                    <!-- HERE --><component-refer ref=""/>
                </SO>
            </SOs>
        </section>
        <section title="Security Objectives Rationale" id="SOR">This section describes how the
            assumptions, threats, and organizational security policies map to the security
            objectives. <InsertSPDCorrespondence/>
        </section>
    </chapter>

    <chapter title="Security Requirements" id="req">This chapter describes the security requirements
        which have to be fulfilled by the email client. Those requirements comprise functional
        components from Part 2 of <cite linkend="bibCC"/>. The following notations are used: <htm:ul>
            <htm:li>
                <htm:b>Selection</htm:b> (denoted by <htm:i>italicized text</htm:i>): is used to select one or more
                options provided by the [CC] in stating a requirement.</htm:li>
            <htm:li>
                <htm:b>Assignment</htm:b> operation (denoted by <htm:i>italicized text</htm:i>): is used to assign a
                specific value to an unspecified parameter, such as the length of a password.
                Showing the value in square brackets indicates assignment.</htm:li>
            <htm:li>
                <htm:b>Iteration</htm:b> operation: are identified with a number inside parentheses (e.g.
                "(1)").</htm:li>
        </htm:ul>
        <section title="Security Functional Requirements for the File Encryption Application (TOE)"
            id="sfr1"> As indicated in Section 1.3.2, security functional requirements in the main
            body of the EP are divided into those that must be satisfied by the file encryption
            application (the TOE), and those that must be satisfied by either the TOE or the
            platform on which it runs. This section contains the requirements that must be met by
            the TOE. 
            <subsection title="Cryptographic Support (FCS)" id="fcs">
                <htm:b>Cryptographic Key Management (FCS_CKM)</htm:b><htm:br/> Conformant implementations will
                use a File Encryption Key (FEK) conditioned from a password/passphrase, or randomly
                generated and protected by a Key Encryption Key (KEK). A KEK is either produced by
                the TOE, or composed of a public/private key pair in hardware (e.g., a smartcard
                device) or software (service on the host) external to the TOE (the latter are
                referred to as "external entities" in this EP, and contain "external authorization
                factors"). If the FEK are randomly generated, then they must be generated by the TOE
                as specified in FCS_CKM_EXT.2, and support the use of a KEK as specified in this
                section. However, depending on the KEK(s) supported, either the TOE or the TOE
                platform (or some combination of the two) will implement the lower-level
                functionality, so those capabilities are specified in Section 4.2. If a FEK and KEK
                are used, authentication factors (especially the Password Authentication Factor) can
                be changed without having to re-encrypt all of the user data on the device.<htm:br/>
                <f-component id="FCS_CKM_EXT.2" name="Cryptographic key generation (FEK)"
                    status="threshold">
                    <f-element id="FCS_CKM_EXT.2.1">
                        <title> The TSF shall generate FEK cryptographic keys <htm:br/><selectables
                                linebreak="yes">
                                <selectable> using a Random Bit Generator as specified in
                                    FCS_RBG_EXT.1 (from the AS PP) and with entropy corresponding to
                                    the security strength of AES key sizes of [selection: 128 bit,
                                    256 bit]; </selectable>
                                <selectable> conditioned from a password/passphrase as defined in
                                    FCS_CKM_EXT.1(A) </selectable>
                            </selectables></title>
                    </f-element>
                    <f-element id="FCS_CKM_EXT.2.2">
                        <title>The TSF shall create a unique FEK for each file (or set of files)
                            using the mechanism on the client as specified in
                            FCS_CKM_EXT.2.1.</title>
                    </f-element>
                    <f-element id="FCS_CKM_EXT.2.3">
                        <title>The FEKs must be generated by the TOE.</title>
                        <note role="application"> For the first selection, the key generation
                            capability of the TOE uses a RBG implemented on the TOE device
                            (FCS_RBG_EXT.1 from the <cite linkend="bibAppPP"/>). Either 128-bit or
                            256-bit (or both) are allowed for the FEK; the ST author makes the
                            selection appropriate for the device. For the second selection, the key
                            is generated by the conditioning of a password/passphrase.<htm:br/>
                            FCS_CKM_EXT.2.2 requires that each resource to be encrypted has a unique
                            FEK, and that this FEK is generated by the TSF. If the encrypted
                            resource is a set of files encrypted under one FEK, additional
                            requirements on the initialization vectors and cipher modes must be
                            adhered to in Section 4.2. </note>
                        <aactivity>
                            <htm:h4>TSS</htm:h4> FCS_CKM_EXT.2.1: The evaluator shall review the TSS to
                            determine that a description covering how and when a FEK are generated
                            exists. The description must cover all environments on which the TOE is
                            claiming conformance, and include any preconditions that must exist in
                            order to successfully generate the FEK. The TSS is checked to ensure
                            that the description of how the FEK are generated is consistent with the
                            instructions in the AGD guidance, and any differences that arise from
                            different platforms are taken into account. This assurance activity may
                            be combined with activities for FCS_COP.1(5) and FCS_CKM_EXT.2.1. <htm:br/>
                            For the first selection, the evaluator shall review the TSS to determine
                            that it describes how the functionality described by FCS_RBG_EXT.1 (from
                            the <cite linkend="bibAppPP"/>) is invoked to generate FEK. To the
                            extent possible from the description of the RBG functionality in
                            FCS_RBG_EXT.1 (from the AS PP), the evaluator shall determine that the
                            key size being requested is identical to the key size and mode to be
                            used for the decryption/encryption of the user data (FCS_COP.1(1)).
                            <htm:br/> For the second selection, password/passphrase-based factors, the
                            examination of the TSS section is performed as part of FCS_CKM_EXT.1(A)
                            assurance activities. <htm:br/> FCS_CKM_EXT.2.2: The evaluator shall examine
                            the TSS to determine that it describes how a FEK is created for a
                            protected resource and associated with that resource; protection of the
                            FEK itself is covered by FIA_AUT_EXT.1 and FCS_COP.1(5). The evaluator
                            confirms that -- per this description -- the FEK is unique per resource (file
                            or set of files) and that the FEK is created using the mechanisms
                            specified in ). <htm:br/> FCS_CKM_EXT.2.3: The evaluator shall review the
                            TSS to verify it details that the FEKs are generated on the client
                            machine and are not generated on an external server. <htm:h4>Guidance</htm:h4>
                            The evaluator shall review the instructions in the AGD guidance to
                            determine that any explicit actions that need to be taken by the user to
                            create a FEK exist -- taking into account any differences that arise from
                            different platforms -- and are consistent with the description in the TSS.
                                <htm:h4>Tests</htm:h4> None. </aactivity>
                    </f-element>
                </f-component>
                <f-component id="FCS_CKM_EXT.1" name="Key Encrypting Key (KEK) Support" status="sel-based">
                    <selection-depends req="FCS_CKM_EXT.1.1"/><!-- HERE what is req this depends on -->
                    <f-element id="FCS_CKM_EXT.1.1 ">
                        <title> The TSF shall support KEK in the following manner based on the selection
                            chosen in FPT_FEK_EXT.1:<htm:br/>
                            <selectables linebreak="yes">
                                <selectable>derive a KEK using a password-based authorization factor
                                    conditioned as defined in FCS_CKM_EXT.1(A) and in accordance with
                                    FIA_FCT_EXT.1(2)</selectable>
                                <selectable>support external authorization factors on an external entity
                                    using RSA key pairs protected by the external entity and in
                                    accordance with FIA_FCT_EXT.1(1)</selectable>
                                <selectable>support external authorization factors on an external entity
                                    using ECC key pairs protected by the external entity and in
                                    accordance with FIA_FCT_EXT.1(1)</selectable>
                                <selectable>using a Random Bit Generator as specified in FCS_RBG_EXT.1
                                    (from the AS PP) and with entropy corresponding to the security
                                    strength of AES key sizes of <selectables>
                                        <selectable>128 bit</selectable>
                                        <selectable>256 bit</selectable>
                                    </selectables>
                                </selectable>
                            </selectables>
                        </title>
                    </f-element>
                    <f-element id="FCS_CKM_EXT.1.2">
                        <title>All KEKs shall be <selectables>
                            <selectable>128 bit</selectable>
                            <selectable>256 bit</selectable>
                        </selectables> keys corresponding to at least the security strength of the
                            keys encrypted by the KEK.</title>
                        <note role="application"> The ST author must include in the ST the appropriate
                            component from Appendix C concerning the generation/support of the selected
                            authorization factor. As previously indicated, the authorization factor can
                            either be derived by the TSF in the case of passwords/passphrases or using
                            an RBG, or the TOE can use an external entity that contains a key pair
                            associated with that user that is used to protect the FEK (the TSF in this
                            case will have a reduced role in the cryptographic operations involving the
                            KEK and FEK depending on the specific scheme and implementation used; some
                            cryptographic functions will be provided by the external entity (such as
                            those used to decrypt the FEK)). <htm:br/> A password is a protected/private
                            string of letters, numbers, and/or special characters used to authenticate
                            an identity or to authorize access to data. One concern is that a secure
                            password may be hard to remember and the user may write it down. A
                            passphrase is a sequence of words, preferably unrelated. Because words are
                            easier for a user to remember, it is possible to create a long passphrase
                            meeting the requirements laid out in Appendix C that will be as secure as a
                            shorter, more complicated to remember password. <htm:br/> For this selection,
                            the ST author selects one (or more, if the TOE supports multiple
                            authorization factors) of the listed authorization factors. The TSF will be
                            responsible for conditioning the key when selecting the password/passphrase.
                            If an external entity contains at least some portion of the authorization
                            factor, regardless of the implementation (smartcard, library on the OS
                            hosting the TOE), the second or third item will be selected, depending on
                            how the FEK is protected. If a KEK is randomly generated, the fourth item is
                            selected. In all cases, the appropriate requirements from Appendix C should
                            be included to reflect the authorization factor(s) used. </note>
                        <aactivity>
                            <htm:h4>TSS</htm:h4> The assurance activity for this component entails examination
                            of the ST's TSS to determine that the TOE's implementation of the
                            requirements is documented. The evaluators shall first examine the TSS
                            section to ensure that the authorization factors specified in the ST are
                            described. For password/passphrase-based factors, the examination of the TSS
                            section is performed as part of FCS_CKM_EXT.1(A) assurance activities. <htm:br/>
                            If external authorization factors are supported, then the evaluator will
                            perform the following activities (these may be performed in conjunction with
                            those performed for FCS_COP.1(5) and FIA_FCT_EXT.1(1)). The evaluator checks
                            to ensure that the TSS describes the method used by the TSF to invoke the
                            function used to protect the private key of the user on the external entity.
                            If this function is provided by the external entity itself and not by the
                            TSF, then the evaluator shall ensure the TSS describes the method by which
                            the TSS can detect that the private key was successfully accessed by the
                            external entity. <htm:br/> The evaluator shall also check that the TSS describes
                            how the TSF invokes either the RSA or ECC functionality in the external
                            entity; this must include a description of both an encryption and decryption
                            scenario for the FEK. This description shall include the manner in which the
                            external entity is invoked to ensure that the requirements for the FEK
                            protection listed in FCS_COP.1(5) are met. <htm:h4>Guidance</htm:h4> The evaluator
                            shall check the Operational Guidance to ensure that any configuration of the
                            TSF to support the authorization factors selected is present. For instance,
                            if external entities are to be used to decrypt/encrypt the FEK, instructions
                            for setting up the TOE to recognize the external entities (if needed) must
                            be present. The evaluator shall also check the Operational Guidance to
                            ensure that adequate warning is given to users regarding the importance of
                            having passwords/passphrases with strong entropy. <htm:h4>Tests</htm:h4> The
                            evaluators also perform the following assurance activities: tests: <testlist>
                                <test>[conditional] If the TOE performs input validation on
                                    password/passphrase authorization factors (e.g., correct length of
                                    factor), perform tests to ensure the input validation routines
                                    identify malformed authorization factors.</test>
                                <test>An example ciphertext file generated via the TOE shall be provided
                                    to the evaluator with the accompanying KEK and prerequisite
                                    authorization information used for encryption. The evaluator will
                                    use the TOE in conjunction with a debugging or forensics utility to
                                    attempt a decrypt of the ciphertext file using the provided
                                    authorization information. The evaluator will then terminate
                                    processing of the TOE and perform a search through non-volatile
                                    memory using the provided KEK string. The evaluator must document
                                    each command, program or action taken during this process, and must
                                    confirm that the KEK was never written to non-volatile memory. This
                                    test must be performed three times to ensure repeatability. If
                                    during the course of this testing the evaluator finds that the KEK
                                    was written to non-volatile memory, they should be able to identify
                                    the cause (i.e. the TOE wrote the KEK to disk, the TOE platform
                                    dumped volatile memory as a page file, etc.), and document the
                                    reason for failure to comply with the requirement.</test>
                            </testlist> Other testing is performed with the FIA_FCT_EXT.1, FCS_COP.1(5),
                            and FDP_PRT_EXT.1 assurance activities. </aactivity>
                    </f-element>
                </f-component>
                <f-component id="FCS_CKM_EXT.1" name="Key Encrypting Key (KEK) Support" status="sel-based">
                    <selection-depends req="FCS_CKM_EXT.1.1"/><!-- HERE what is req this depends on -->
                    <f-element id="FCS_CKM_EXT.1.1 ">
                        <title> The TSF shall support KEK in the following manner based on the selection
                            chosen in FPT_FEK_EXT.1:<htm:br/>
                            <selectables linebreak="yes">
                                <selectable>derive a KEK using a password-based authorization factor
                                    conditioned as defined in FCS_CKM_EXT.1(A) and in accordance with
                                    FIA_FCT_EXT.1(2)</selectable>
                                <selectable>support external authorization factors on an external entity
                                    using RSA key pairs protected by the external entity and in
                                    accordance with FIA_FCT_EXT.1(1)</selectable>
                                <selectable>support external authorization factors on an external entity
                                    using ECC key pairs protected by the external entity and in
                                    accordance with FIA_FCT_EXT.1(1)</selectable>
                                <selectable>using a Random Bit Generator as specified in FCS_RBG_EXT.1
                                    (from the AS PP) and with entropy corresponding to the security
                                    strength of AES key sizes of <selectables>
                                        <selectable>128 bit</selectable>
                                        <selectable>256 bit</selectable>
                                    </selectables>
                                </selectable>
                            </selectables>
                        </title>
                    </f-element>
                    <f-element id="FCS_CKM_EXT.1.2">
                        <title>All KEKs shall be <selectables>
                            <selectable>128 bit</selectable>
                            <selectable>256 bit</selectable>
                        </selectables> keys corresponding to at least the security strength of the
                            keys encrypted by the KEK.</title>
                        <note role="application"> The ST author must include in the ST the appropriate
                            component from Appendix C concerning the generation/support of the selected
                            authorization factor. As previously indicated, the authorization factor can
                            either be derived by the TSF in the case of passwords/passphrases or using
                            an RBG, or the TOE can use an external entity that contains a key pair
                            associated with that user that is used to protect the FEK (the TSF in this
                            case will have a reduced role in the cryptographic operations involving the
                            KEK and FEK depending on the specific scheme and implementation used; some
                            cryptographic functions will be provided by the external entity (such as
                            those used to decrypt the FEK)). <htm:br/> A password is a protected/private
                            string of letters, numbers, and/or special characters used to authenticate
                            an identity or to authorize access to data. One concern is that a secure
                            password may be hard to remember and the user may write it down. A
                            passphrase is a sequence of words, preferably unrelated. Because words are
                            easier for a user to remember, it is possible to create a long passphrase
                            meeting the requirements laid out in Appendix C that will be as secure as a
                            shorter, more complicated to remember password. <htm:br/> For this selection,
                            the ST author selects one (or more, if the TOE supports multiple
                            authorization factors) of the listed authorization factors. The TSF will be
                            responsible for conditioning the key when selecting the password/passphrase.
                            If an external entity contains at least some portion of the authorization
                            factor, regardless of the implementation (smartcard, library on the OS
                            hosting the TOE), the second or third item will be selected, depending on
                            how the FEK is protected. If a KEK is randomly generated, the fourth item is
                            selected. In all cases, the appropriate requirements from Appendix C should
                            be included to reflect the authorization factor(s) used. </note>
                        <aactivity>
                            <htm:h4>TSS</htm:h4> The assurance activity for this component entails examination
                            of the ST's TSS to determine that the TOE's implementation of the
                            requirements is documented. The evaluators shall first examine the TSS
                            section to ensure that the authorization factors specified in the ST are
                            described. For password/passphrase-based factors, the examination of the TSS
                            section is performed as part of FCS_CKM_EXT.1(A) assurance activities. <htm:br/>
                            If external authorization factors are supported, then the evaluator will
                            perform the following activities (these may be performed in conjunction with
                            those performed for FCS_COP.1(5) and FIA_FCT_EXT.1(1)). The evaluator checks
                            to ensure that the TSS describes the method used by the TSF to invoke the
                            function used to protect the private key of the user on the external entity.
                            If this function is provided by the external entity itself and not by the
                            TSF, then the evaluator shall ensure the TSS describes the method by which
                            the TSS can detect that the private key was successfully accessed by the
                            external entity. <htm:br/> The evaluator shall also check that the TSS describes
                            how the TSF invokes either the RSA or ECC functionality in the external
                            entity; this must include a description of both an encryption and decryption
                            scenario for the FEK. This description shall include the manner in which the
                            external entity is invoked to ensure that the requirements for the FEK
                            protection listed in FCS_COP.1(5) are met. <htm:h4>Guidance</htm:h4> The evaluator
                            shall check the Operational Guidance to ensure that any configuration of the
                            TSF to support the authorization factors selected is present. For instance,
                            if external entities are to be used to decrypt/encrypt the FEK, instructions
                            for setting up the TOE to recognize the external entities (if needed) must
                            be present. The evaluator shall also check the Operational Guidance to
                            ensure that adequate warning is given to users regarding the importance of
                            having passwords/passphrases with strong entropy. <htm:h4>Tests</htm:h4> The
                            evaluators also perform the following assurance activities: tests: <testlist>
                                <test>[conditional] If the TOE performs input validation on
                                    password/passphrase authorization factors (e.g., correct length of
                                    factor), perform tests to ensure the input validation routines
                                    identify malformed authorization factors.</test>
                                <test>An example ciphertext file generated via the TOE shall be provided
                                    to the evaluator with the accompanying KEK and prerequisite
                                    authorization information used for encryption. The evaluator will
                                    use the TOE in conjunction with a debugging or forensics utility to
                                    attempt a decrypt of the ciphertext file using the provided
                                    authorization information. The evaluator will then terminate
                                    processing of the TOE and perform a search through non-volatile
                                    memory using the provided KEK string. The evaluator must document
                                    each command, program or action taken during this process, and must
                                    confirm that the KEK was never written to non-volatile memory. This
                                    test must be performed three times to ensure repeatability. If
                                    during the course of this testing the evaluator finds that the KEK
                                    was written to non-volatile memory, they should be able to identify
                                    the cause (i.e. the TOE wrote the KEK to disk, the TOE platform
                                    dumped volatile memory as a page file, etc.), and document the
                                    reason for failure to comply with the requirement.</test>
                            </testlist> Other testing is performed with the FIA_FCT_EXT.1, FCS_COP.1(5),
                            and FDP_PRT_EXT.1 assurance activities. </aactivity>
                    </f-element>
                </f-component>
                <f-component id="FCS_COP.1(6) " name="FAK encryption/decryption support" status="optional">
                    <f-element id="FCS_COP.1.1(6)">
                        <title>The FAK shall be protected in the same manner as the FEK, in accordance
                            with FCS_COP.1(5).</title>
                        <note role="application">53 The intent of this requirement is to clarify that,
                            if a FAK is to be used, it should be treated as sensitive as the FEK, and
                            thus, follow the same encryption and decryption practices. </note>
                        <aactivity> The evaluator shall follow the assurance activities as laid out in
                            FCS_COP.1(5) to assert proper FAK protection. </aactivity>
                    </f-element>
                </f-component>
                <f-component id="FCS_CKM_EXT.5" name="File Authentication Key (FAK) Support" status="optional">
                    <f-element id="FCS_CKM_EXT.5.1">
                        <title> The TSF shall use a FAK to authenticate sensitive data when a
                            cryptographic, keyed hashing function is used for data authentication and
                            shall be supported in the following manner: <selectables linebreak="yes">
                                <selectable>A FAK conditioned from a password/passphrase shall never be
                                    stored in non-volatile memory</selectable>
                                <selectable>a FAK will be stored in non-volatile memory encrypted with a
                                    KEK as specified in FCS_COP.1(5) using authorization factors as
                                    specified in FCS_CKM_EXT.1 </selectable>
                            </selectables>
                        </title>
                    </f-element>
                    <f-element id="FCS_CKM_EXT.5.2">
                        <title>The TSF shall create a unique FAK for each file (or set of files) using
                            the mechanism on the client as specified in FCS_RBG_EXT.1.</title>
                    </f-element>
                    <f-element id="FCS_CKM_EXT.5.3">
                        <title>The FAKs must be generated by the TOE.</title>
                    </f-element>
                    <f-element id="FCS_CKM_EXT.5.4">
                        <title>The TSF will not write FAKs to non-volatile memory.</title>
                    </f-element>
                    <f-element id="FCS_CKM_EXT.5.5">
                        <title>The FAK shall be protected in a manner conformant to
                            FCS_COP.1(6).</title>
                        <note role="application"> The intent of this requirement is to describe the
                            different methods that a FAK can be created and formed. <htm:br/>FCS_CKM_EXT.5.1
                            details how a FAK may be directly conditioned from a password/passphrase or
                            may be a randomly generated from an approved randomizer.
                            <htm:br/>FCS_CKM_EXT.5.2 requires that each resource to be encrypted has a
                            unique FAK, and that this FAK is generated by the TSF. If the encrypted
                            resource is a set of files encrypted under one FAK, additional requirements
                            on the initialization vectors and cipher modes must be adhered to in Section
                            4.2. </note>
                        <aactivity>
                            <htm:h4>TSS</htm:h4> FCS_CKM_EXT.5.1: The evaluator shall examine the TSS to
                            determine how the FEK will actually be formed and details how the FEK is
                            stored (or not stored) in memory. <htm:br/> FCS_CKM_EXT.5.2: The evaluator shall
                            examine the TSS to determine that it describes how a FAK is created for a
                            protected resource and associated with that resource; protection of the FAK
                            itself is covered by FCS_COP.1(5). The evaluator confirms that -- per this
                            description -- the FAK is unique per resource (file or set of files) and that
                            the FAK is created using the mechanisms specified in FCS_CKM_EXT.1. <htm:br/>
                            FCS_CKM_EXT.5.3: The TSS must detail that the FAKs are generated on the
                            client machine and are not generated on an external server. <htm:br/>
                            FCS_CKM_EXT.5.4: FCS_CKM_EXT.4 contains the requirements necessary to ensure
                            that plaintext keys and key material do not remain in plaintext form in the
                            TSF's non-volatile memory space. In TOEs where the FAK is protected with a
                            KEK, the FAK will need to be encrypted and stored in non-volatile memory
                            when not being used to decrypt/encrypt a file. (Typically, the encrypted FAK
                            is stored in the meta-data of the encrypted file(s).) The evaluator shall
                            examine the TSS to ensure that it describes how the FAK is encrypted, both
                            after its initial creation and after it has been decrypted for use (note
                            that in the entirely likely possibility that the FAK is not re-encrypted,
                            then this case must be indicated in the TSS and the description for
                            FCS_CKM_EXT.4 will cover disposal of the plaintext FEK and FAK). The
                            evaluator shall further check to ensure that the TSS describes how the FAK
                            and any other associated meta-data necessary to decrypt the file or set of
                            files are associated with the resource. This description can be combined
                            with the description required for FCS_COP.1(5). <htm:br/>
                            <htm:h4>Guidance</htm:h4> None <htm:h4>Tests</htm:h4> An example ciphertext file generated
                            via the TOE shall be provided to the evaluator with the accompanying FAK and
                            prerequisite authorization information used for encryption. The evaluator
                            will use the TOE in conjunction with a debugging or forensics utility to
                            attempt an authentication of the ciphertext file using the provided
                            authorization information. The evaluator will then terminate processing of
                            the TOE and perform a search through non-volatile memory using the provided
                            FAK string. The evaluator must document each command, program or action
                            taken during this process, and must confirm that the FAK was never written
                            to non-volatile memory. This test must be performed three times to ensure
                            repeatability. If during the course of this testing the evaluator finds that
                            the FAK was written to non-volatile memory, they should be able to identify
                            the cause (i.e. the TOE wrote the FAK to disk, the TOE platform dumped
                            volatile memory as a page file, etc), and document the reason for failure to
                            comply with the requirement. </aactivity>
                    </f-element>
                </f-component>
                <f-component id="FCS_SMC_EXT.1 " name="Submask Combining" status="optional">
                    <f-element id="FCS_SMC_EXT.1.1 ">
                        <title>The TSF shall combine submasks using the following method <selectables>
                            <selectable>exclusive OR (XOR)</selectable>
                            <selectable>SHA-256</selectable>
                            <selectable>SHA-512</selectable>
                        </selectables> to generate an intermediary key or BEV.</title>
                        <note role="application">This requirement specifies the way that a product may
                            combine the various submasks by using either an XOR or an approved SHA-hash. </note>
                        <aactivity>
                            <htm:h4>TSS</htm:h4> If keys are XORed together to form an intermediate key, the TSS
                            section shall identify how this is performed (e.g., if there are ordering
                            requirements, checks performed, etc.). The evaluator shall also confirm that
                            the TSS describes how the length of the output produced is at least the same
                            as that of the FEK. <htm:h4>Guidance</htm:h4>None. <htm:h4>Tests</htm:h4>None. </aactivity>
                    </f-element>
                </f-component>
                <f-component id="FCS_CKM_EXT.1(A)"
                    name="Extended: Cryptographic key generation (Password/Passphrase conditioning)" status="sel-based">
                    <selection-depends req="FCS_CKM_EXT.2.1"></selection-depends><!--HERE what is the correct requirement here?-->
                    <f-element id="FCS_CKM_EXT.1.1(A)">
                        <title> The TSF shall support a password/passphrase of up to [assignment:
                            maximum password size, positive integer of 64 or more] characters used to
                            generate a password authorization factor. </title>
                    </f-element>
                    <f-element id="FCS_CKM_EXT.1.2(A)">
                        <title> The TSF shall allow passwords to be composed of any combination of upper
                            case characters, lower case characters, numbers, and the following special
                            characters: "!", "@", "#", "$", "%", "^", "&#38;", "*", "(", and ")", and
                            [selection: [assignment: other supported special characters], no other
                            characters]. </title>
                    </f-element>
                    <f-element id="FCS_CKM_EXT.1.3(A)">
                        <title>The TSF shall perform Password-based Key Derivation Functions in
                            accordance with a specified cryptographic algorithm [HMAC-[selection:
                            SHA-256, SHA-384, SHA- 512]], with [assignment: positive integer of 4096 or
                            more] iterations, and output cryptographic key sizes [selection: 128, 256]
                            bits that meet the following: [NIST SP 800-132]. </title>
                    </f-element>
                    <f-element id="FCS_CKM_EXT.1.4(A)">
                        <title>The TSF shall not accept passwords less than [selection: a value settable
                            by the administrator, [assignment: minimum password length accepted by the
                            TOE, must be >= 1]] and greater than the maximum password length defined in
                            FCS_CKM_EXT.1.1(A). </title>
                    </f-element>
                    <f-element id="FCS_CKM_EXT.1.5(A)">
                        <title>The TSF shall generate all salts using a RBG that meets FCS_RBG_EXT.1
                            (from the AS PP) and with entropy corresponding to the security strength
                            selected for PBKDF in FCS_CKM_EXT.1.3(A). </title>
                        
                        <note role="application"> The password/passphrase is represented on the host machine
                            as a sequence of characters whose encoding depends on the TOE and the underlying
                            OS. This sequence must be conditioned into a string of bits that is to be used
                            as a KEK that is the same size as the FEK. <htm:br/> For FCS_CKM_EXT.1.1(A), the ST
                            author assigns the maximum size of the password/passphrase it supports; it must
                            support at least 64 characters. <htm:br/> For FCS_CKM_EXT.1.2(A), the ST author
                            assigns any other supported characters; if there are no other supported
                            characters, they should select "no other characters". <htm:br/> For
                            FCS_CKM_EXT.1.3(A), the ST author selects the parameters based on the PBKDF used
                            by the TSF. The key cryptographic key sizes in are made to correspond to the KEK
                            key sizes selected in FCS_CKM_EXT.1. <htm:br/> The password/passphrase must be
                            conditioned into a string of bits that forms the submask to be used as input
                            into the KEK. Conditioning is performed using one of the identified hash
                            functions in accordance with the process described in NIST SP 800-132. SP
                            800-132 requires the use of a pseudo-random function (PRF) consisting of HMAC
                            with an approved hash function. <htm:br/> Appendix A of SP 800-132 recommends
                            setting the iteration count in order to increase the computation needed to
                            derive a key from a password and, therefore, increase the workload of performing
                            a password recovery attack. However, for this EP, a minimum iteration count of
                            4096 is required in order to ensure that twelve bits of security is added to the
                            password/passphrase value. A significantly higher value is recommended to ensure
                            optimal security. <htm:br/> For FCS_CKM_EXT.1.4(A) If the minimum password length is
                            settable, then ST author chooses "a value settable by the administrator for this
                            component," as well as the "configure password/passphrase complexity setting"
                            item for FMT_SMF.1.1. If the minimum length is not settable, the ST author fills
                            in the assignment with the minimum length the password must be (zero-length
                            passwords are not allowed for compliant TOEs). </note>
                        <aactivity>
                            <htm:h4>TSS</htm:h4> FCS_CKM_EXT.1.1(A): There are two aspects of this component that
                            require evaluation: passwords/passphrases of the length specified in the
                            requirement (at least 64 characters) are supported, and that the characters that
                            are input are subject to the selected conditioning function. These activities
                            are separately addressed in the text below. <htm:br/><htm:b>Support for
                                Password/Passphrase length:</htm:b> The evaluators shall check to ensure that
                            the TSS describes the allowable ranges for password/passphrase lengths, and that
                            at least 64 characters may be specified by the user.<htm:br/> Support for PBKDF: The
                            evaluator shall examine the password hierarchy TSS to ensure that the formation
                            of all KEKs or FEKs (as decided in the FCS_CKM_EXT.1 selection) is described and
                            that the key sizes match that described by the ST author. <htm:br/>The evaluator
                            shall check that the TSS describes the method by which the password/passphrase
                            is first encoded and then fed to the SHA algorithm. The settings for the
                            algorithm (padding, blocking, etc.) shall be described, and the evaluator shall
                            verify that these are supported by the selections in this component as well as
                            the selections concerning the hash function itself. The evaluator shall verify
                            that the TSS contains a description of how the output of the hash function is
                            used to form the submask that will be input into the function and is the same
                            length as the KEK as specified in FCS_CKM_EXT.4. <htm:br/>For the NIST SP
                            800-132-based conditioning of the password/passphrase, the required assurance
                            activities will be performed when doing the assurance activities for the
                            appropriate requirements (FCS_COP.1.1(4)). If any manipulation of the key is
                            performed in forming the submask that will be used to form the FEK or KEK, that
                            process shall be described in the TSS. <htm:br/>No explicit testing of the formation
                            of the submask from the input password is required. <htm:br/> FCS_CKM_EXT.1.5(A):
                            The ST author shall provide a description in the TSS regarding the salt
                            generation. The evaluator shall confirm that the salt is generated using an RBG
                            described in FCS_RBG_EXT.1 (from the <cite linkend="bibAppPP"/>).
                            <htm:h4>Guidance</htm:h4> The evaluators shall check the Operational Guidance to
                            determine that there are instructions on how to generate large
                            passwords/passphrases, and instructions on how to configure the
                            password/passphrase length (and optional complexity settings) to provide entropy
                            commensurate with the keys that the authorization factor is protecting. This is
                            important because many default settings for passwords/passphrases will not meet
                            the necessary entropy needed as specified in this EP. <htm:h4>Tests</htm:h4>
                            <htm:b>Support for Password/Passphrase characteristics:</htm:b> In addition to the
                            analysis above, the evaluator shall also perform the following tests on a TOE
                            configured according to the Operational Guidance <testlist>
                                <test>Ensure that the TOE supports passwords/passphrases of a minimum length
                                    of 64 characters.</test>
                                <test>Ensure that the TOE does not accept more than the maximum number of
                                    characters specified in FCS_CKM_EXT.1.1(A).</test>
                                <test>Ensure that the TOE does not accept less than the minimum number of
                                    characters specified in FCS_CKM_EXT.1.4(A). If the minimum length is
                                    settable by the administrator, the evaluator determines the minimum
                                    length or lengths to test.</test>
                                <test>Ensure that the TOE supports passwords consisting of all characters
                                    listed in FCS_CKM_EXT.1.2(A).</test>
                            </testlist>
                            <htm:b>Conditioning:</htm:b> No explicit testing of the formation of the authorization
                            factor from the input password/passphrase is required. <htm:b>Iteration count:</htm:b>
                            The evaluator shall verify that the iteration count for PBKDFs performed by the
                            TOE comply with NIST SP 800-132 by ensuring that the TSS contains a description
                            of the estimated time required to derive key material from passwords and how the
                            TOE increases the computation time for password-based key derivation (including
                            but not limited to increasing the iteration count). </aactivity>
                    </f-element>
                </f-component>
                <f-component id="FCS_CKM.1(1)"
                    name="Cryptographic Key Generation (for asymmetric keys)" status="sel-based"> 
                    <selection-depends req="FCS_CKM_EXT.2.1"></selection-depends><!--HERE what is the correct requirement here?-->
                    <f-element id="FCS_CKM.1.1(1)">
                        <title><htm:b>Refinement:</htm:b> The application shall [selection: invoke
                            platform-provided functionality, implement functionality] shall generate
                            <htm:b>asymmetric</htm:b> cryptographic keys <htm:b>used for key establishment</htm:b>
                            in accordance with NIST Special Publication 800-56A, "Recommendation for
                            Pair-Wise Key Establishment Schemes Using Discrete Logarithm Cryptography"
                            for elliptic curve-based key establishment schemes and implementing "NIST
                            curves" <selectables>
                                <selectable>P-256</selectable>
                                <selectable>P-384</selectable>
                            </selectables> (as defined in FIPS PUB 186-4, "Digital Signature Standard")
                            and specified cryptographic key sizes equivalent to, or greater than, a
                            symmetric key strength of 112 bits. </title>
                        <note role="application"> This component requires that the TOE/TOE platform be
                            able to generate the public/private key pairs that are used for key
                            establishment purposes when ECC CDH is used to protect the FEK; the ST
                            author selects the entity that is performing the key generation activity in
                            the first selection. <htm:br/>The ST author also chooses the curves that are
                            supported for the key pair generation activity; either or both can be
                            selected. </note>
                        <aactivity>
                            <htm:h4>TSS</htm:h4>
                            <htm:b>Requirement met by the TOE</htm:b><htm:br/> The evaluator shall examine the TSS
                            to ensure that it specifies which key size is used.<htm:br/>
                            <htm:b>Requirement met by the Platform</htm:b><htm:br/> The evaluator shall examine the
                            TSS to verify that it describes how the key establishment algorithm is
                            invoked. <htm:h4>Guidance</htm:h4>None. <htm:h4>Tests</htm:h4><htm:b>Requirement met by the
                                TOE</htm:b><htm:br/>
                            <htm:b>ECC Key Generation Test </htm:b><htm:br/> For each supported NIST curve selected
                            by the ST author, the evaluator shall require the implementation under test
                            (IUT) to generate 10 private/public key pairs. The private key shall be
                            generated using an approved random bit generator (RBG). To determine
                            correctness, the evaluator shall submit the generated key pairs to the
                            public key verification (PKV) function of a known good implementation. <htm:br/>
                            <htm:b>ECC Public Key Verification (PKV) Test</htm:b>
                            <htm:br/> For each supported NIST curve selected by the ST author, the evaluator
                            shall generate 10 private/public key pairs using the key generation function
                            of a known good implementation and modify five of the public key values so
                            that they are incorrect, leaving five values unchanged (i.e., correct). The
                            evaluator shall obtain in response a set of 10 PASS/FAIL values.
                        </aactivity>
                    </f-element>
                </f-component>
                <f-component id="FCS_COP.1(4)	"
                    name="Cryptographic Operation (Keyed-Hash Message Authentication)" status="sel-based"> 
                    <selection-depends req="FCS_CKM_EXT.2.1"></selection-depends><!--HERE what is the correct requirement here?-->
                    
                    <f-element id="FCS_COP.1.1(4)">
                        <title><htm:b>Refinement:</htm:b> The application shall <selectables>
                            <selectable>invoke platform-provided functionality</selectable>
                            <selectable>implement functionality</selectable>
                        </selectables> to perform <htm:b>keyed-hash message authentication</htm:b> in
                            accordance with a specified cryptographic algorithm <htm:b>HMAC-</htm:b>
                            <selectables>
                                <selectable>SHA-256</selectable>
                                <selectable>SHA-384</selectable>
                                <selectable>SHA-512</selectable>
                            </selectables> , key size [assignment: key size (in bits) used in HMAC],
                            <htm:b>and message digest size of</htm:b>
                            <selectables>
                                <selectable>256</selectable>
                                <selectable>384</selectable>
                                <selectable>512</selectable>
                            </selectables> bits that meet the following: <htm:b>FIPS PUB 198-1, "The
                                Keyed-Hash Message Authentication Code", and FIPS PUB 180-4, "Secure
                                Hash Standard."</htm:b><htm:br></htm:br><htm:br></htm:br>
                            Some schemes that
                            may be implemented in the TOE may contain Key Derivation Functions (or other
                            functions) that require a Keyed-Hash Message Authentication function. If such a
                            capability is required, the ST will include this requirement in the body of the ST.
                        </title>
                        <note role="application"> The selection of the hashing algorithm must correspond
                            to the selection of the message digest size; for example, if HMAC-SHA-256 is
                            chosen, then the only valid message digest size selection would be 256 bits.
                            <htm:br/>The message digest size above corresponds to the underlying hash
                            algorithm used. Note that truncating the output of the HMAC following the
                            hash calculation is an appropriate step in a variety of applications. This
                            does not invalidate compliance with this requirement, however, the ST should
                            state that truncation is performed, the size of the final output, and the
                            standard to which this truncation complies. <htm:br/>The evaluator shall check
                            that the association of the keyed-hash function with other cryptographic
                            functions specified in the file encryption product ST (whether these are
                            performed by the platform or by the TOE) that either use or are used by the
                            keyed-hash function is documented in the TSS. </note>
                        <aactivity>
                            <htm:h4>TSS</htm:h4>
                            <htm:b>Requirement met by the TOE</htm:b>
                            <htm:br/> For all cases where the output of the HMAC following the hash
                            calculation is truncated, the evaluator shall ensure that the TSS states for
                            what operation this truncation takes place; the size of the final output;
                            and the standard to which this truncation complies. <htm:br/> The evaluator
                            shall examine the TSS to ensure that it specifies the following values used
                            by the HMAC function: key-length, hash function used, block size, and output
                            MAC length used. <htm:br/>
                            <htm:b>Requirement met by the Platform</htm:b>
                            <htm:br/> The evaluator shall examine the TSS to verify that it describes how
                            the keyed hash function algorithm is invoked. <htm:h4>Guidance</htm:h4> None.
                            <htm:h4>Tests</htm:h4>
                            <htm:b>Requirement met by the TOE</htm:b> For each of the supported parameter sets,
                            the evaluator shall compose 15 sets of test data. Each set shall consist of
                            a key and message data. The evaluator shall have the TSF generate HMAC tags
                            for these sets of test data. The resulting MAC tags shall be compared to the
                            result of generating HMAC tags with the same key and IV using a known good
                            implementation. </aactivity>
                    </f-element>
                </f-component>
            </subsection>
            <subsection title="User Data Protection (FDP)" id="fdp">This stipulates encryption,
                decryption and authentication of user-selected files or sets of files. There are
                several more requirements in Section 4.2 and Appendix B that also address plaintext
                data being successfully removed and sharing resources between users. There are
                requirements in Appendix C discussing specific methods for authenticating the data,
                as this is dependent on the choice of encryption mode.<htm:br/>
                <htm:h4>Extended: Protection of Selected User Data (FDP_PRT_EXT)</htm:h4>
                
                
                <f-component id="FDP_PRT_EXT.1" name="Extended: Protection of Selected User Data"
                    status="threshold">
                    <f-element id="FDP_PRT_EXT.1.1">
                        <title>The TSF shall perform encryption and decryption of the user-selected
                            file (or set of files) in accordance with FCS_COP.1(1). </title>
                        <note role="application">This is the primary requirement for encrypting and
                            decrypting the protected resources (files and sets of files). Apart from
                            the actual encryption and decryption of the resources, there are two
                            other functions specified by this requirement. </note>
                        <aactivity>
                            <htm:h4>TSS</htm:h4> FDP_PRT_EXT.1.1: The evaluator shall examine the TSS to
                            determine that it lists each type of resource that can be encrypted
                            (e.g., file, directory) and what "encrypted" means in terms of the
                            resource (e.g., "encrypting a directory" means that all of the files
                            contained in the directory are encrypted, but the data in the directory
                            itself (which are filenames and pointers to the files) are not
                            encrypted). The evaluator shall also confirm that the TSS describes how
                            each type of resource listed is encrypted and decrypted by the TOE. The
                            evaluator shall ensure that this description includes the case where an
                            existing file or set of files is encrypted for the first time; a new
                            file or set of files is created and encrypted; an existing file or set
                            of files is re-encrypted (that is, it had been initially encrypted; it
                            was decrypted (by the TOE) for use by the user, and is then subsequently
                            re-encrypted); and corresponding decryption scenarios. If other
                            scenarios exist due to product implementation/features, the evaluator
                            shall ensure that those scenarios are covered in the TSS as well.
                                <htm:h4>Guidance</htm:h4> If the TOE creates temporary objects and these
                            objects can be protected through administrative measures (e.g., the TOE
                            creates temporary files in a designated directory that can be protected
                            through configuration of its access control permissions), then the
                            evaluator shall check the Operational Guidance to ensure that these
                            measures are described. <htm:br/> If there are special measures necessary to
                            configure the method by which the file or set of files are encrypted
                            (e.g., choice of algorithm used, key size, etc.), then those
                            instructions shall be included in the Operational Guidance and verified
                            by the evaluator. In these cases, the evaluator checks to ensure that
                            all non-TOE products used to satisfy the requirements of the ST that are
                            described in the Operational Guidance are consistent with those listed
                            in the ST, and those tested by the assurance activities of this EP.
                                <htm:h4>Tests</htm:h4> The evaluator shall also perform the following tests.
                            All instructions for configuring the TOE and each of the environments
                            must be included in the Operational Guidance and used to establish the
                            test configuration.<htm:br/> For each resource and decryption/encryption
                            scenario listed in the TSS, the evaluator shall ensure that the TSF is
                            able to successfully encrypt and decrypt the resource using the
                            following methodology:<htm:br/> Monitor the temporary resources being
                            created (if any) and deleted by the TSF -- the tools used to perform the
                            monitoring (e.g., procmon for a Windows system) shall be identified in
                            the test report. The evaluator shall ensure that these resources are
                            consistent with those identified in the TSS, and that they are protected
                            as specified in the Operational Guidance and are deleted when the
                            decryption/encryption operation is completed. </aactivity>
                    </f-element>
                </f-component>
                <f-component id="FDP_PRT_EXT.2" name="Extended: Protection of Selected User Data " status="optional">
                    <f-element id="FDP_PRT_EXT.2.1">
                        <title>The application shall [selection: invoke platform-provided functionality,
                            implement functionality] to ensure that all original plaintext data created
                            when decrypting/encrypting the user-selected file (or set of files) are
                            destroyed in volatile and non-volatile memory upon completion of the
                            decryption/encryption operation.</title>
                    </f-element>
                    <f-element id="FDP_PRT_EXT.2.2">
                        <title>The TSF shall support more than one user being able to access the same
                            encrypted resource, each using a different authorization factor.</title>
                    </f-element>
                    <f-element id="FDP_PRT_EXT.2.3">
                        <title>The TSF shall ensure that all temporary files created (including those by
                            a third-party application, for example an editor) when decrypting/encrypting
                            the user-selected file (or set of files) are removed or encrypted upon
                            completion of the decryption/encryption operation.</title>
                        <note role="application"> This is the primary requirement for encrypting and
                            decrypting the protected resources (file or set of files). Apart from the
                            actual encryption and decryption of the resources, there are three other
                            functions specified by this requirement. <htm:br/>FDP_PRT_EXT.2.2 requires that
                            a single resource (file or set of files) be able to be encrypted, but
                            sharable among more than one user. The TSF must support each user having a
                            different authorization factor, which could be the same type of
                            authorization factor but just a different value (like two different
                            passwords), or different types of authorization factors altogether. <htm:br/>
                            For FDP_PRT_EXT.2.2-2.3, the intent is that the TSF controls the use and
                            clearing of any data that it manipulates. It needs to ensure that no
                            plaintext data from encrypted resources, or any plaintext key material that
                            could be used to recover that information from the encrypted resource,
                            remains after the TSF has finished operating on that resource. In the
                            context of FDP_PRT_EXT.2.2, the TSF has completed the decryption operation
                            after it has decrypted the file or set of files for use by an application,
                            and completed the encryption operation after it has encrypted the file or
                            set of files for storage in the file system. </note>
                        <aactivity>
                            <htm:h4>TSS</htm:h4> FDP_PRT_EXT.2.2 - The evaluator shall examine the TSS to
                            determine that it identifies each of the resources that is sharable in
                            encrypted form (for instance, encrypted files may be sharable among users,
                            but encrypted directories may not), and the method by which the resource can
                            be shared among users with different authorization factors. This description
                            shall also cover the TSF actions when adding or removing users to the set
                            allowed to access the file. <htm:br/> FDP_PRT_EXT.2.3 - The evaluator shall
                            examine the TSS to ensure that it describes all temporary file (or set of
                            files) that are created in the filesystem of the host during the
                            decryption/encryption process, and that the TSS describes how these files
                            are deleted after the TSF is done with its decryption/encryption operation.
                            Note that if other objects/resources are created on the host that are 1)
                            persistent and 2) visible to other processes (users) on that host that are
                            not filesystem objects, those objects shall be identified and described in
                            the TSS as well. <htm:h4>Guidance</htm:h4> FDP_PRT_EXT.2.2 - The evaluator shall
                            examine the operation guidance to determine that it contains instructions on
                            how to set up and share resources with other users, if additional actions
                            are necessary due to use of the encryption product. If different for
                            different underlying platforms, the evaluator determines that all platforms
                            listed in the ST are addressed. <htm:h4>Tests</htm:h4>
                            <testlist>
                                <test>For each type of resource that is identified in the TSS as
                                    sharable in its encrypted form, the evaluator shall ensure that
                                    different users using different authorization factors are able to
                                    successfully access the resource using different authorization
                                    factors. This should include making changes to the resource to
                                    ensure that the same resource is being shared, and that a per-user
                                    copy of the resource is not being made.</test>
                                <test>If the TSS or the third party file editor creates temporary
                                    files/resources during file decryption/encryption, the evaluator
                                    shall perform the following tests to verify that the temporary
                                    files/resources are destroyed. The evaluator shall use a tool (e.g.,
                                    procmon for a Windows system) that is capable of monitoring the
                                    creation and deletion of files during the decryption/encryption
                                    process is performed. A tool that can search the contents of the
                                    hard drive (e.g., winhex) will also be needed. The tools used to
                                    perform the monitoring shall be identified in the test report.
                                </test>
                            </testlist> Test A (Creating an encrypted document) <htm:ul>
                                <htm:li>Open an editing application.</htm:li>
                                <htm:li>Create a special string inside the document. The string could be
                                    5-10 words. It is recommended to remove the spaces. This will create
                                    a one page document.</htm:li>
                                <htm:li>Start the file monitoring tool.</htm:li>
                                <htm:li>Save and close the file.</htm:li>
                                <htm:li>Encrypt the file using the TOE (if the TOE does not encrypt
                                    automatically for the user).</htm:li>
                            </htm:ul>
                            <htm:b>Analysis Steps </htm:b>
                            <htm:ul>
                                <htm:li>If needed, exit/close the TOE.</htm:li>
                                <htm:li>Stop the file monitoring tool. View the results. Identify any
                                    temporary files that were created during the encryption process.
                                    Examine to see if the temporary files were destroyed when the TOE
                                    closed. </htm:li>
                                <htm:li>If temporary files remain, these temporary files should be examined
                                    to ensure that no plaintext data remains. If plaintext data is found
                                    in these files, that means that plaintext from the encrypted file
                                    remains on the hard drive.</htm:li>
                                <htm:li>Search the contents of the hard drive (using the second tool) for
                                    the plaintext string used above. (The search should be performed
                                    using both ASCII and Unicode formats.)</htm:li>
                                <htm:li>If the string is found, this means that plaintext from the encrypted
                                    file remains on the hard drive. </htm:li>
                            </htm:ul> Test B (Creating, Encrypting a blank document and then adding text): <htm:ul>
                                <htm:li>Encrypt a blank document using the tool.</htm:li>
                                <htm:li>Create a special string inside the document. The string could be
                                    5-10 words. It is recommended to remove the spaces. This will create
                                    a one page document.</htm:li>
                                <htm:li>Start the file monitoring tool.</htm:li>
                                <htm:li>Save and close the file. </htm:li>
                                <htm:li>Perform the "Analysis Steps" listed above</htm:li>
                                <htm:li>If Test 1 fails and Test 2 passes, the Operational Guidance shall
                                    include instructions for the users to perform encryption in the
                                    manner outlined in Test 2.</htm:li>
                            </htm:ul>
                            <htm:br/> Assumption: Regardless of the length of the file, it is assumed that
                            if any fragment of the original string is found, this reflects that there is
                            a problem with the cleanup with the file encryptor. </aactivity>
                    </f-element>
                </f-component>
                <f-component id="FDP_PM_EXT.1"
                    name="Extended: Protection of  Data in Power Managed States" status="optional">
                    <f-element id="FDP_PM_EXT.1.1">
                        <title>The TSF shall protect all data stored to the disk drive during the
                            transition to the [assignment: powered-down state(s) for which this
                            capability is provided] state as per FDP_PRT_EXT.1.1. </title>
                    </f-element>
                    <f-element id="FDP_PM_EXT.1.2">
                        <title>On the return to a powered-on state from the state(s) indicated in
                            FDP_PM_EXT.1.1, the TSF shall authorize the user in the manner specified in
                            FIA_AUT_EXT.1.1 once before any protected data are decrypted. </title>
                        <note role="application"> For the first selection, the ST author fills in the
                            state using the same name used in the Operational Guidance for the state
                            that is appropriately protected by the TOE. <htm:br/> It should be noted that it
                            is not sufficient to use Operational Environment-based credentials to unlock
                            the TOE from the indicated state; the intent is that returning from the
                            indicated state is equivalent (from an authorization point of view) to
                            returning from a completely powered-off state and re-opening the resources
                            that are protected. </note>
                        <aactivity>
                            <htm:h4>TSS</htm:h4>The evaluator shall examine the TSS to ensure that it describes
                            the state(s) that are supported by this capability. For each state, the
                            evaluator ensures that the TSS contains a description of how the state is
                            entered, and the actions of the TSF on entering the state, specifically
                            addressing how multiple open resources (of each type) are protected, and how
                            keying material associated with these resources is protected (if different
                            from that described elsewhere). The TSF shall also describe how the state is
                            exited, and how the requirements are met during this transition to an
                            operational state. <htm:h4>Guidance</htm:h4> The evaluator shall check the
                            Operational Guidance to determine that it describes the states that are
                            supported by the TOE, and provides information related to the correct
                            configuration of these modes and the TOE. <htm:h4>Tests</htm:h4> The following tests
                            must be performed by the evaluator for each supported State, type of
                            resource, platform, and authorization factor:<testlist>
                                <test>Following the Operational guidance, configure the Operational
                                    Environment and the TOE so that the lower power state of the
                                    platform is protected. Open several resources (documented in the
                                    test report) that are protected. Invoke the lower power state. On
                                    resumption of normal power an attempting to access a
                                    previously-opened protected resource, observe that an incorrect
                                    entry of the authorization factor(s) does not result in access to
                                    the system, and that correct entry of the authorization factor(s)
                                    does result in access to the resources. </test>
                            </testlist>
                        </aactivity>
                    </f-element>
                </f-component>
                <f-component id="FDP_AUT_EXT.2"
                    name="Extended: Data Authentication using cryptographic, keyed hash functions" status="optional">
                    <f-element id="FDP_AUT_EXT.2.1">
                        <title>The TSF shall use a cryptographic, keyed hash function in accordance with
                            FCS_COP.1(4).</title>
                    </f-element>
                    <f-element id="FDP_AUT_EXT.2.2">
                        <title>The TSF shall use a File Authentication Key (FAK) in accordance with
                            FCS_COP.1(6) and FCS_CKM_EXT.5 as the secret key to the keyed hash
                            function.</title>
                    </f-element>
                    <f-element id="FDP_AUT_EXT.2.3">
                        <title>The TSF shall use the entirety of the ciphertext file as the message
                            input to the keyed hash function.</title>
                    </f-element>
                    <f-element id="FDP_AUT_EXT.2.4">
                        <title>The TSF shall concatenate the output of the keyed hash function, the
                            Message Authentication Code (MAC).</title>
                    </f-element>
                    <f-element id="FDP_AUT_EXT.2.5">
                        <title>The TSF shall authenticate the encrypted file prior to
                            decryption.</title>
                    </f-element>
                    <f-element id="FDP_AUT_EXT.2.6">
                        <title>The TSF shall authenticate the data by comparing the keyed hash output of
                            the ciphertext against the stored MAC.</title>
                    </f-element>
                    <f-element id="FDP_AUT_EXT.2.7">
                        <title>The TSF shall notify the user of an unsuccessful authentication and
                            prevent decryption of the ciphertext.</title>
                    </f-element>
                    <f-element id="FDP_AUT_EXT.2.8">
                        <title>During verification, the TSF shall assume the MAC is at the end of the
                            ciphertext file.</title>
                    </f-element>
                    <f-element id="FDP_AUT_EXT.2.9">
                        <title>The FAK will be generated using a RBG that meets FCS_RBG_EXT.1 (from the
                            AS PP).</title>
                        <note role="application">The intent of this requirement is to specify the
                            correct way of using a keyed hash function to authenticate the data, and
                            enable authentication of data. </note>
                        <aactivity>
                            <htm:h4>TSS</htm:h4> 46 The evaluator shall check the TSS section to confirm that it
                            describes how a request for each type of supported resource (file (or set of
                            files)) will result in data authentication using a keyed hash function. The
                            evaluator will confirm that the TOE will respond appropriately to a failed
                            authentication, to include notifying the user of an invalid authentication
                            and preventing decryption. The evaluator will confirm that any file
                            encryption utility will be able to identify where the MAC is placed.
                            <htm:br/>The evaluator will confirm that a FAK is used as part of the
                            authentication process and will identify the keyed hash function utilized.
                            <htm:h4>Guidance</htm:h4> 1 It is encouraged for every implementation to use a
                            FAK that is wholly different and independently generated from the FEK.
                            <htm:h4>Tests</htm:h4> The evaluator shall perform the following test: <testlist>
                                <test>Create an encrypted file and confirm that authentication of this
                                    file using the correct FAK will result in a success.</test>
                                <test>Modify an arbitrary number of bits of ciphertext and attempt to
                                    run the authentication and decryption operations on the file. Assert
                                    that the TOE successfully identified the forged ciphertext file and
                                    notified the user. </test>
                            </testlist>
                        </aactivity>
                    </f-element>
                </f-component>
                <f-component id="FDP_AUT_EXT.1" name="Extended: Authentication of Selected User Data " status="optional">
                    <f-element id="FDP_AUT_EXT.1.1">
                        <title>The TSF shall perform authentication of the user-selected file (or set of
                            files) and provide notification to the user if modification had been
                            detected. </title>
                    </f-element>
                    <f-element id="FDP_AUT_EXT.1.2">
                        <title> The TSF shall implement a data authentication method based on <selectables>
                            <selectable>cryptographic, keyed hashing service and verification in
                                accordance with FDP_AUT_EXT.2</selectable>
                            <selectable>asymmetric signing and verification in accordance with
                                FDP_AUT_EXT.3</selectable>
                        </selectables>. </title>
                        <note role="application">49 This is the primary requirement for authentication
                            of the protected resources (files and sets of files). It is highly
                            encouraged for vendors to utilize a keyed hashing service or asymmetric
                            signing mechanism to ensure data authentication, as these are the only two
                            implementations noted in this EP that prevent decryption if authentication
                            is unsuccessful. Using modes such as XTS or CBC will require additional data
                            authentication measures to be added, such as a keyed hash function or
                            asymmetric signing, because these modes do not come inherently packaged with
                            data authentication or a way to signal to the user that data has been
                            modified. </note>
                        <aactivity>
                            <htm:h4>TSS</htm:h4> The evaluator shall examine the TSS to determine that it lists
                            each type of resource that can be authenticated (e.g., file, directory) and
                            what "authenticated" means in terms of the resource (e.g., "authenticating a
                            directory" means that all of the files contained in the directory are
                            authenticated, but the data in the directory itself (which are filenames and
                            pointers to the files) are not authenticated). The evaluator shall also
                            confirm that the TSS describes how each type of resource listed is
                            authenticated by the TOE and how authentication measures are added to each
                            resource (e.g. taking all the encrypted files through a MAC function and
                            appending the MAC to the set of files). The evaluator shall ensure that this
                            description includes the case where an existing file or set of files has
                            authentication measures added for the first time; a new file or set of files
                            is created and adds authentication measure; an existing file or set of files
                            updates or replaces its existing authentication measures (that is, it had a
                            MAC appended to the data; it was authenticated and decrypted (by the TOE)
                            for use by the user, and is then subsequently re-encrypted with an updated
                            MAC); and corresponding decryption scenarios. If other scenarios exist due
                            to product implementation/features, the evaluator shall ensure that those
                            scenarios are covered in the TSS as well. <htm:h4>Guidance</htm:h4>If the TOE
                            creates temporary objects and these objects can be protected through
                            administrative measures (e.g., the TOE creates temporary files in a
                            designated directory that can be protected through configuration of its
                            access control permissions), then the evaluator shall check the Operational
                            Guidance to ensure that these measures are described. <htm:br/>If there are
                            special measures necessary to configure the method by which the file or set
                            of files are authenticated (e.g., choice of function used, additional keys,
                            etc.), then those instructions shall be included in the Operational Guidance
                            and verified by the evaluator. This includes, for instance, lists of allowed
                            platforms, libraries, and devices, and instructions for using them. In these
                            cases, the evaluator checks to ensure that all non-TOE products used to
                            satisfy the requirements of the ST that are described in the Operational
                            Guidance are consistent with those listed in the ST, and those tested by the
                            assurance activities of this EP. <htm:h4>Tests</htm:h4> The evaluator shall also
                            perform the following tests. These tests may be performed in conjunction
                            with the tests listed for FCS_COP.1(2) (from the <cite linkend="bibAppPP"
                            />), FCS_COP.1(3) (from the <cite linkend="bibAppPP"/>), and FCS_COP.1(4).
                            These tests must be performed for each data authentication feature and
                            platform claimed in the ST; all instructions for configuring the TOE and
                            each of the environments must be included in the Operational Guidance and
                            used to establish the test configuration. <htm:br/>For each resource and data
                            authentication scenario listed in the TSS, the evaluator shall ensure that
                            the TSF is able to successfully add authentication measures and authenticate
                            the resource using the following methodology. <htm:br/>Monitor the temporary
                            resources being created (if any) and deleted by the TSF -- the tools used to
                            perform the monitoring (e.g., procmon for a Windows system) shall be
                            identified in the test report. The evaluator shall ensure that these
                            resources are consistent with those identified in the TSS, and that they are
                            protected as specified in the Operational Guidance and are deleted when the
                            decryption/encryption and authentication operations are completed.
                        </aactivity>
                    </f-element>
                </f-component>
                <f-component id="FDP_AUT_EXT.3"
                    name="Extended: Data Authentication using asymmetric signing and verification" status="optional">
                    <f-element id="FDP_AUT_EXT.3.1">
                        <title>The TSF shall use a secure hash function in accordance with FCS_COP.1(3)
                            (from the <cite linkend="bibAppPP"/>) with the entire ciphertext file as
                            input to create a hash.</title>
                    </f-element>
                    <f-element id="FDP_AUT_EXT.3.2">
                        <title>The TSF shall use a cryptographic signing function in accordance with
                            FCS_COP.1(2) (from the <cite linkend="bibAppPP"/>) and must use the hash
                            generated in accordance with FDP_AUT_EXT.3.1 as input to the signing
                            process. Additionally, use of ephemeral key for signing purposes is
                            prohibited.</title>
                    </f-element>
                    <f-element id="FDP_AUT_EXT.3.3">
                        <title>The TSF shall use a public and private key pair generated in accordance
                            with FIA_CKM.1(1) and must use this key pair as part of the cryptographic
                            signing process in accordance with FDP_AUT_EXT.3.2.</title>
                    </f-element>
                    <f-element id="FDP_AUT_EXT.3.4">
                        <title>The TSF shall authenticate the ciphertext data prior to
                            decryption.</title>
                    </f-element>
                    <f-element id="FDP_AUT_EXT.3.5">
                        <title>The TSF shall notify the user of an unsuccessful authentication and
                            prevent decryption of the ciphertext if such an event were to occur.</title>
                    </f-element>
                    <f-element id="FDP_AUT_EXT.3.6">
                        <title>The TSF shall append the signature to the end of the ciphertext
                            file.</title>
                    </f-element>
                    <f-element id="FDP_AUT_EXT.3.7">
                        <title>During verification, the TSF shall assume the signature is at the end of
                            the ciphertext file.</title>
                        <note role="application">55 The intent of this requirement is to specify the
                            secure way of using a cryptographic signing and hashing function as part of
                            the data authentication mechanism.</note>
                        <aactivity>
                            <htm:h4>TSS</htm:h4> 1 The evaluator shall check the TSS section to confirm that it
                            describes how a request for each type of supported resource (file (or set of
                            files)) will result in data authentication using a secure hash and
                            cryptographic signing process. The evaluator will confirm that the supplied
                            public and private key pair were generated in accordance with FCS_CKM.1(1).
                            The evaluator will confirm that the entire ciphertext file was used to
                            create the hash and that the hash was used as input to the cryptographic
                            signing function. The evaluator will confirm that the TSF notifies the user
                            of an unsuccessful authentication and prevents decryption. <htm:h4>Guidance</htm:h4>
                            None. <htm:h4>Tests</htm:h4> The evaluator shall perform the following test: <testlist>
                                <test>Create an encrypted file and demonstrate that authentication of
                                    this file using the correct keying material will be
                                    successful.</test>
                                <test>Modify an arbitrary number of bits of ciphertext and attempt to
                                    run the authentication and decryption operations on the file. Assert
                                    that the TOE successfully identified the forged ciphertext file and
                                    notified the user. </test>
                            </testlist>
                        </aactivity>
                    </f-element>
                </f-component>
            </subsection>
            <subsection title="Security Management (FMT)" id="fmt"> The primary intent in this
                section is to call out critical activities that must be performed by the user (or
                administrator) in order to use the TOE in a safe manner. The critical activities are
                defined as those that reference the Cryptographic Support items in Section 4.2.1.
                    <htm:h4>Specification of Management Functions (FMT_SMF)</htm:h4>
                <f-component id="FMT_SMF.1" name="Specification of Management Functions"
                    status="threshold">
                    <f-element id="FMT_SMF.1.1">
                        <title>The TSF shall be capable of performing the following management
                            functions: <selectables linebreak="yes">
                                <selectable>no other function;</selectable>
                                <selectable>configure password/passphrase complexity
                                    setting;</selectable>
                                <selectable>configure cryptographic functionality;</selectable>
                                <selectable>change password/passphrase authentication
                                    credential;</selectable>
                                <selectable>disable key recovery functionality;</selectable>
                                <selectable>[assignment: other management functions provided by the
                                    TSF]</selectable>
                            </selectables>
                        </title>
                        <note role="application"> As the Application Software PP already includes
                            FMT_SMF.1, the ST author should combine the selections (and assignment,
                            if performed) with those in the FMT_SMF.1 requirement in the Application
                            Software PP to form a single FMT_SMF.1 SFR in the ST. The intent of this
                            requirement is to express the management capabilities that may be
                            included in the TOE. Several common options are given:<htm:br/>
                            <htm:ul>
                                <htm:li>If password or passphrase authorization factors are implemented
                                    by the TOE, then the appropriate "change" selection must be
                                    included, along with FIA_FCT_EXT.1(2) from Appendix C.</htm:li>
                                <htm:li>If the TOE provides for a password/passphrase complexity
                                    setting, then "configure password/passphrase complexity setting"
                                    will be included, and the specifics of the functionality offered
                                    can either be written from the requirement as bullet points, or
                                    included in the TSS.</htm:li>
                                <htm:li>If the TOE provides configurability of the cryptographic
                                    functions (for example, key size of the FEK) -- even if the
                                    configuration is the form of parameters that may be passed to
                                    cryptographic functionality implement on the TOE platform--then
                                    "configure cryptographic functionality" will be included, and
                                    the specifics of the functionality offered can either be written
                                    in this requirement as bullet points, or included in the
                                    TSS.</htm:li>
                                <htm:li>If the TOE includes a key recovery function, the TOE must
                                    provide the capability for the user to turn this functionality
                                    off so that no recovery key is generated and no keys are
                                    permitted to be exported.</htm:li>
                                <htm:li>If "other management functions" are assigned, a validation
                                    authority must be consulted to ensure the assurance activities
                                    and other functionality requirements that may be needed are
                                    appropriately specified so that the ST can claim conformance to
                                    this EP.</htm:li>
                            </htm:ul>
                        </note>
                        <aactivity>The assurance activities for this component will be driven by the
                            selections made by the ST author. This section describes assurance
                            activities for all possible selections in an ST; it should be understood
                            that if a capability is not selected in the ST, the noted assurance
                            activity does not need to be performed. The following sections are
                            divided up into "Required Activities" and "Conditional Activities" for
                            ease of reference. <htm:h4>TSS</htm:h4>
                            <htm:b>Conditional Activities:</htm:b> The evaluator shall examine the TSS to
                            ensure that it describes the sequence of activities that take place from
                            an implementation perspective when this activity is performed (for
                            example, how it determines which resources are associated with the KEK,
                            the decryption and re-encryption process), and ensure that the KEK and
                            FEK are not exposed during this change. <htm:br/>
                            <htm:b>Cryptographic Configuration:</htm:b> None for this requirement. <htm:br/>
                            <htm:b>Disable Key Recovery:</htm:b> If the TOE supports key recovery, this must
                            be stated in the TSS. The TSS shall also describe how to disable this
                            functionality. This includes a description of how the recovery material
                            is provided to the recovery holder. The guidance for disabling this
                            capability shall be described in the AGD documentation.
                                <htm:h4>Guidance</htm:h4>
                            <htm:b>Conditional Activities:</htm:b> The evaluator shall examine the
                            Operational Guidance to ensure that it describes how the
                            password/passphrase-based authorization factor is to be changed. <htm:br/>
                            <htm:b>Cryptographic Configuration:</htm:b> The evaluator shall determine from
                            the TSS for other requirements (FCS_*, FDP_PRT_EXT, FIA_AUT_EXT) what
                            portions of the cryptographic functionality are configurable. The
                            evaluator shall then review the AGD documentation to determine that
                            there are instructions for manipulating all of the claimed mechanisms.
                                <htm:h4>Tests</htm:h4>
                            <htm:b>Conditional Activities:</htm:b> The evaluator shall set all length and
                            complexity settings offered by the TOE. The evaluator shall then attempt
                            to enter values that violate those settings and ensure they are not
                            accepted. <htm:br/>
                            <htm:b>Disable Key Recovery:</htm:b> If the TOE provides key recovery
                            capability, then the evaluator shall devise a test that ensures that the
                            key recovery capability has been or can be disabled following the
                            guidance provided by the vendor. <htm:br/>
                            <htm:b>Cryptographic Configuration:</htm:b> Testing for this activity is
                            performed for other components in this EP. </aactivity>
                    </f-element>
                </f-component>
                <f-component id="FMT_MEC_EXT.1" name="Supported Configuration Mechanism" status="optional">
                    <f-element id="FMT_MEC_EXT.1.1">
                        <title>The TSF shall <selectables>
                            <selectable>invoke the mechanisms recommended by the platform vendor for
                                storing and setting configuration options,</selectable>
                            <selectable>store and protect configuration options as specified in
                                FCS_COP.1(1)</selectable>
                        </selectables>. </title>
                    
                    <note role="application">The ST author replaces FMT_MEC_EXT.1 in the Application
                        Software PP with this requirement, and performs the appropriate selections. The
                        ST author ensures all configuration options are "covered" by one of the two
                        selections. It is allowable to have some configuration stored and protected
                        using platform-provided functions and some stored by the TSF and protected using
                        encryption per FCS_COP.1(1).</note>
                    <aactivity>
                        <htm:h4>TSS</htm:h4> The TSS assurance activity in the Application Software PP for
                        FMT_MEC_EXT.1 applies for either selection. Additionally, if "store and protect
                        configuration options as specified in FCS_COP.1(1)" is selected, the evaluator
                        shall ensure that the TSS identifies those options, as well as indicates where
                        the encrypted representation of these options is stored. <htm:h4>Guidance</htm:h4> None.
                        <htm:h4>Tests</htm:h4> The test assurance activites in the Application Software PP
                        for FMT_MEC_EXT.1 apply to all configuration options identified as being stored
                        and set using platform mechanisms. The following test activity applies to any
                        configuration options identified as being stored and protected using encryption
                        per FCS_COP.1(1). <testlist>
                            <test>[Conditional] For all configuration options listed in the TSS as being
                                stored and protected using encryption per FCS_COP.1(1), the evaluator
                                shall examine the contents of the configuration option storage
                                (identified in the TSS) to determine that the options have been
                                encrypted. </test>
                        </testlist>
                    </aactivity>
                    </f-element>
                </f-component>
            </subsection>
            <subsection title="Protection of the TSF (FPT)" id="fpt">
                <htm:h4>Extended: Protection of FEK (FPT_FEK_EXT)</htm:h4>
                <f-component id="FPT_FEK_EXT.1" name="File Encryption Key (FEK) Support"
                    status="threshold">
                    <f-element id="FPT_FEK_EXT.1.1">
                        <title> The TSF shall <selectables linebreak="yes">
                                <selectable>Never store a FEK conditioned from a Password/Passphrase
                                    in non-volatile memory</selectable>
                                <selectable>Store a FEK in Non-Volatile memory conformant with
                                    FPT_KYP_EXT.1</selectable>
                            </selectables>
                        </title>
                        <note role="application">FPT_FEK_EXT.1.details how a FEK may be directly
                            conditioned from a password/passphrase or may be a randomly generated
                            from an approved randomizer. </note>
                        <aactivity>
                            <htm:h4>TSS</htm:h4> In TOEs where the FEK is protected with a KEK, the FEK will
                            need to be encrypted and stored in non-volatile memory when not being
                            used to decrypt/encrypt a file. (Typically, the encrypted FEK is stored
                            in the meta-data of the encrypted file(s).) The evaluator shall examine
                            the TSS to ensure that it describes how the FEK is encrypted, both after
                            its initial creation and after it has been decrypted for use (note that
                            in the entirely likely possibility that the FEK is not re-encrypted,
                            then this case must be indicated in the TSS and the description for
                            FCS_CKM_EXT.4 will cover disposal of the plaintext FEK). The evaluator
                            shall further check to ensure that the TSS describes how the FEK and any
                            other associated meta-data necessary to decrypt the file or set of files
                            are associated with the resource. This description can be combined with
                            the description required for FCS_COP.1(5). <htm:h4>Guidance</htm:h4> None
                                <htm:h4>Tests</htm:h4>
                            <testlist>
                                <test>An example ciphertext file generated via the TOE shall be
                                    provided to the evaluator with the accompanying FEK and
                                    prerequisite authorization information used for encryption. The
                                    evaluator will use the TOE in conjunction with a debugging or
                                    forensics utility to attempt a decrypt of the ciphertext file
                                    using the provided authorization information. The evaluator will
                                    then terminate processing of the TOE and perform a search
                                    through non-volatile memory using the provided FEK string. The
                                    evaluator must document each command, program or action taken
                                    during this process, and must confirm that the FEK was never
                                    written to non-volatile memory. This test must be performed
                                    three times to ensure repeatability. If during the course of
                                    this testing the evaluator finds that the FEK was written to
                                    non-volatile memory, they should be able to identify the cause
                                    (i.e. the TOE wrote the FEK to disk, the TOE platform dumped
                                    volatile memory as a page file, etc), and document the reason
                                    for failure to comply with the requirement.</test>
                            </testlist>
                        </aactivity>
                    </f-element>
                </f-component>
            </subsection>
            <subsection title="Protection of the TSF (FPT)" id="fpt">
                <f-component id="FPT_KYP_EXT.1"
                    name="Extended: Protection of Key and Key Material (FPT_KYP_EXT)"
                    status="threshold">
                    <f-element id="FPT_KYP_EXT.1.1">
                        <title>The TSF shall [selection: not store keys in non-volatile memory, only
                            store keys in non-volatile memory when <selectables linebreak="yes">
                                <selectable>wrapped, as specified in FCS_COP.1(5);</selectable>
                                <selectable>encrypted, as specified in FCS_COP.1(1);</selectable>
                                <selectable>the plaintext key is not part of the key chain as
                                    specified in FCS_KYC_EXT.1;</selectable>
                                <selectable>The plaintext key will no longer provide access to the
                                    encrypted data after initial provisioning;</selectable>
                                <selectable>The plaintext key is a key split that is combined as
                                    specified in FCS_SMC_EXT.1, and the other half of the key is
                                    either <selectables linebreak="yes">
                                        <selectable>wrapped as specified in
                                            FCS_COP.1(5);</selectable>
                                        <selectable>derived and not stored in non-volatile
                                            memory</selectable>
                                    </selectables>
                                </selectable>
                            </selectables>. </title>
                        <note role="application">The plaintext key storage in non-volatile memory is
                            allowed for several reasons. If the keys exist within protected memory
                            that is not user accessible on the TOE or OE, the only methods that
                            allow it to play a security relevant role for protecting the FEK is if
                            it is a key split or providing additional layers of wrapping or
                            encryption on keys that have already been protected. </note>
                        <aactivity>
                            <htm:h4>TSS</htm:h4> The evaluator shall verify the TSS for a high level
                            description of method used to protect keys stored in non-volatile
                            memory.<htm:br/> The evaluator shall verify the TSS to ensure it describes
                            the storage location of all keys and the protection of all keys stored
                            in non-volatile memory. The description of the key chain shall be
                            reviewed to ensure FCS_COP.1(5) is followed for the storage of wrapped
                            or encrypted keys in non-volatile memory and plaintext keys in
                            non-volatile memory meet one of the criteria for storage.
                                <htm:h4>Guidance</htm:h4> None. <htm:h4>Tests</htm:h4> None. </aactivity>
                    </f-element>
                </f-component>
            </subsection>
        </section>
        <section
            title="Security Functional Requirements for the Software File Encryption Application or Client Platform"
            id="sfr2"> As indicated in Section 1.3.2, security functional requirements in the main
            body of the EP are divided into those that must be satisfied by the file encryption
            application (the TOE), and those that must be satisfied by either the TOE or the
            platform on which it runs. This section contains requirements that must be met, but they
            can either be met by the TOE or the platform on which the TOE operates. Assurance
            activities are therefore constructed such that those that apply when the requirements
            are met by the TOE are identified, and those that are performed when the platform on
            which the TOE operates implements the required functionality are likewise identified. If
            a test or documentation assurance activity is specified that is not specifically
            associated with either the TOE or the TOE platform, then it applies regardless of where
            the requirement is implemented. 
            <subsection title="Cryptographic Support (FCS)" id="fcs">
                <f-component id="FCS_CKM_EXT.4" name="Extended: Cryptographic Key Destruction"
                    status="threshold">
                    <f-element id="FCS_CKM_EXT.4.1">
                        <title>The application shall <selectables linebreak="yes">
                                <selectable>invoke platform-provided key destruction</selectable>
                                <selectable>implement key destruction using <selectables
                                        linebreak="yes">
                                        <selectable>For volatile memory, the erasure shall be
                                            executed by a single direct overwrite <selectables>
                                                <selectable>consisting of a pseudo-random pattern
                                                  using the TSF's RBG</selectable>
                                                <selectable>consisting of a pseudo-random pattern
                                                  using the host platform's RBG</selectable>
                                                <selectable>consisting of zeroes] following by a
                                                  read-verify</selectable>
                                            </selectables></selectable>
                                        <selectable> For non-volatile storage, the erasure shall be
                                            executed by a <selectables>
                                                <selectable>single</selectable>
                                                <selectable>three</selectable>
                                                <selectable>or more times</selectable>
                                            </selectables> overwrite of key data storage location
                                            consisting of <selectables>
                                                <selectable>a pseudo random pattern using the TSF's
                                                  RBG (as specified in FCS_RBG_EXT.1</selectable>
                                                <selectable>a pseudo-random pattern using the host
                                                  platform's RBG</selectable>
                                                <selectable>a static pattern</selectable>
                                            </selectables> followed by a <selectables>
                                                <selectable>read-verify</selectable>
                                                <selectable>none</selectable>
                                            </selectables> If read-verification of the overwritten
                                            data fails, the process shall be repeated again
                                        </selectable>
                                    </selectables> that meets the following:
                                            <selectables><selectable>NIST
                                            SP800-88</selectable><selectable>no
                                            standard</selectable></selectables> for destroying all
                                    plaintext keying material and cryptographic security parameters
                                    when no longer needed </selectable>
                            </selectables>
                        </title>
                        <note role="application"> For the purposes of this requirement, plaintext
                            keying material refers to authentication data, passwords, symmetric
                            keys, data used to derive keys, etc. <htm:br/> For Mobile Devices, it is
                            assumed that the TOE will call the platform for the memory management
                            calls (and the Platform meets the MDF PP) to destroy the plaintext
                            keying material when it is no longer necessary, including when the TOE
                            is powered down and when the wipe function is performed. In the future,
                            "no longer needed", will include keys generated for protecting sensitive
                            data received while in a locked state. <htm:br/> The destruction indicated
                            above applies to each intermediate storage area for plaintext
                            key/cryptographic critical security parameter (i.e., any storage, such
                            as memory buffers, that is included in the path of such data) upon the
                            transfer of the key/cryptographic critical security parameter to another
                            memory location. </note>
                        <aactivity>
                            <htm:h4>TSS</htm:h4> If the platform provides the key destruction, then the
                            evaluator shall examine the TSS to verify that it describes how the key
                            destruction functionality is invoked. <htm:br/> If the application invokes
                            key destruction, the evaluator shall check to ensure the TSS describes
                            each of the secret keys (keys used for symmetric encryption and/or data
                            authentication), private keys, and CSPs used to generate key; when they
                            are zeroized (for example, immediately after use, on system shutdown,
                            etc.); and the type of zeroization procedure that is performed
                            (overwrite with zeros, overwrite three times with random pattern, etc.).
                            If different types of memory are used to store the materials to be
                            protected, the evaluator shall check to ensure that the TSS describes
                            the zeroization procedure in terms of the memory in which the data are
                            stored (for example, "secret keys stored on flash are zeroized by
                            overwriting once with zeros, while secret keys stored on the internal
                            hard drive are zeroized by overwriting three times with a random pattern
                            that is changed before each write"). <htm:h4>Guidance</htm:h4> None
                                <htm:h4>Tests</htm:h4> These tests are only for key destruction provided by
                            the application: <testlist>
                                <test>For each type of authorization service, encryption mode and
                                    encryption operation, a known authorization factor, FEK and KEK
                                    must be provided to the evaluator with an associated ciphertext
                                    data set (e.g. if a passphrase is used to create a KEK, then the
                                    ciphertext containing the FEK as well as the KEK itself must be
                                    provided to the evaluator. If a passphrase is used to generate a
                                    FEK, then the ciphertext file encrypted with the FEK as well as
                                    the FEK must be provided to the evaluator.) The evaluator will
                                    use the TOE in conjunction with a debugging or forensics utility
                                    to attempt to authorize themselves, resulting in the generation
                                    of a FEK or decryption of a FEK. The evaluator will ascertain
                                    from the TSS what the vendor defines as "no longer needed" and
                                    execute the sequence of actions via the TOE to invoke this
                                    state. At this point, the evaluator should take a dump of
                                    volatile memory and search the retrieved dump for the provided
                                    authorization credentials, KEKs or FEKs (e.g. if the password
                                    was "PaSSw0rd", perform a string search of the forensics dump
                                    for "PaSSw0rd"). The evaluator must document each command,
                                    program or action taken during this process, and must confirm
                                    that no plaintext keying material resides in volatile memory.
                                    The evaluator must perform this test three times to ensure
                                    repeatability. If during the course of this testing the
                                    evaluator finds that keying material remains in volatile memory,
                                    they should be able to identify the cause (i.e. execution of the
                                    grep command for "PaSSw0rd" caused a false positive) and
                                    document the reason for failure to comply with this requirement.
                                    The evaluator will repeat this same test, but looking for keying
                                    material in non-volatile memory -- in some cases, the
                                    non-volatile memory testing may be satisfied by other assurance
                                    activities (see FCS_CKM_EXT.1 and FPT_FEK_EXT.1).</test>
                                <test>Test 2: For each data authentication mechanism supported by
                                    the TOE, the evaluator must be provided known keying material
                                    with the associated ciphertext file(s). The evaluator will
                                    attempt to authenticate the ciphertext data using the known key.
                                    The evaluator will ascertain from the TSS what the vendor
                                    defines as "no longer needed" and execute the sequence of
                                    actions via the TOE to invoke this state. Once this state is
                                    attained, the evaluator shall take a forensics dump of volatile
                                    memory and perform a search for the authentication keying
                                    material (i.e. if a FAK is used as input to an HMAC, then the
                                    evaluator will look for the FAK string in the forensics dump).
                                    The evaluator must document each command, program or action
                                    taken during this process, and must confirm that no plaintext
                                    keying material resides in volatile memory. The evaluator must
                                    perform this test three times to ensure repeatability. If during
                                    the course of this testing the evaluator finds that keying
                                    material remains in volatile memory, they should be able to
                                    identify the cause and document the reason for failure to comply
                                    with this requirement. The evaluator will repeat this same test,
                                    but looking for keying material in non-volatile memory -- in
                                    some cases, the non-volatile memory testing may be satisfied by
                                    other assurance activities (see FCS_CKM_EXT.4).</test>
                            </testlist>
                        </aactivity>
                    </f-element>
                </f-component>
                <htm:h4>Cryptographic Operation (FCS_COP)</htm:h4> This requirement is used to specify the
                symmetric decryption/encryption algorithm that is used to encrypt and decrypt the
                data. <f-component id="FCS_COP.1(1)"
                    name="Cryptographic operation (Data Encryption)" status="threshold">
                    <f-element id="FCS_COP.1.1(1)">
                        <title>
                            <htm:b>Refinement:</htm:b> The application shall <selectables>
                                <selectable>implement platform-provided AES encryption</selectable>
                                <selectable>implement AES encryption</selectable>
                            </selectables> shall perform <htm:b>data encryption and decryption</htm:b> in
                            accordance with a specified cryptographic algorithm <htm:b>AES used in</htm:b>
                            <selectables linebreak="yes">
                                <selectable>CBC (as defined in NIST SP 800-38A)</selectable>
                                <selectable>XTS (as defined in NIST SP 800-38E)</selectable>
                                <selectable>GCM (as defined in NIST SP 800-38D)</selectable>
                            </selectables>
                            <htm:b>mode</htm:b> and cryptographic key sizes <selectables linebreak="yes">
                                <selectable>128 bits;</selectable>
                                <selectable>256 bits</selectable>
                            </selectables>
                        </title>
                        <note role="application"> The intent of this requirement is to specify the
                            approved AES modes that the ST author may select for AES encryption of
                            the appropriate information on the file encryption software. The first
                            selection indicates whether the TOE or the platform performs the actual
                            cryptographic operations. For the second selection, the ST author should
                            indicate the mode or modes supported by the TOE/platform implementation.
                            The third selection indicates the key size to be used, which is
                            identical to that specified for FCS_CKM_EXT.1. The fourth selection must
                            agree with the mode or modes chosen in the first selection. If multiple
                            modes are supported, it may be clearer in the ST if this component was
                            iterated. <htm:br/> The CBC encryption mode may also be used to encrypt sets
                            of files and must follow NIST SP 800-38 A to use unique IVs for each
                            file that is encrypted. <htm:br/> Future versions of this EP may include new
                            cryptographic modes as they are reviewed and approved by NIST. </note>
                        <aactivity>
                            <htm:h4>TSS</htm:h4>
                            <htm:h4>Requirement met by the platform</htm:h4> The evaluator examines the TSS
                            to determine that it lists the APIs used by the TOE to invoke the
                            required functionality on the platform. <htm:br/> The evaluator examines the
                            ST of all platforms claimed in the TOE ST to determine that the specific
                            modes and key-sizes are supported by the underlying platform, and that
                            the APIs listed in the TSS section are those that were exercised on each
                            underlying platform. <htm:br/>
                            <htm:h4>Requirement met by the TOE</htm:h4> If multiple modes are supported, the
                            evaluator examines the TSS to determine how a specific mode/key-size is
                            chosen by the end user. <htm:br/>
                            <htm:h4>Guidance</htm:h4>
                            <htm:h4>Requirement met by the TOE</htm:h4> If multiple modes are supported, the
                            evaluator examines the Operational Guidance to determine how a specific
                            mode/key-size is chosen by the end user. <htm:br/>
                            <htm:h4>Tests</htm:h4> The assurance activity tests specified for AES in GCM
                            mode in <cite linkend="bibAppPP"/> shall be performed in the case that
                            "GCM" is selected.<htm:br/>Requirement met by the TOE: <htm:h4>AES-CBC
                                Tests</htm:h4>
                            <htm:h4>AES-CBC Known Answer Tests </htm:h4> There are four Known Answer Tests
                            (KATs), described below. In all KATs, the plaintext, ciphertext, and IV
                            values shall be 128-bit blocks. The results from each test may either be
                            obtained by the evaluator directly or by supplying the inputs to the
                            implementer and receiving the results in response. To determine
                            correctness, the evaluator shall compare the resulting values to those
                            obtained by submitting the same inputs to a known good implementation.
                                <htm:h4>KAT-1.</htm:h4> To test the encrypt functionality of AES-CBC, the
                            evaluator shall supply a set of 10 plaintext values and obtain the
                            ciphertext value that results from AES-CBC encryption of the given
                            plaintext using a key value of all zeros and an IV of all zeros. Five
                            plaintext values shall be encrypted with a 128-bit all-zeros key, and
                            the other five shall be encrypted with a 256-bit all-zeros key. <htm:br/>To
                            test the decrypt functionality of AES-CBC, the evaluator shall perform
                            the same test as for encrypt, using 10 ciphertext values as input and
                            AES-CBC decryption. <htm:h4>KAT-2.</htm:h4> To test the encrypt functionality of
                            AES-CBC, the evaluator shall supply a set of 10 key values and obtain
                            the ciphertext value that results from AES-CBC encryption of an
                            all-zeros plaintext using the given key value and an IV of all zeros.
                            Five of the keys shall be 128-bit keys, and the other five shall be
                            256-bit keys. <htm:br/>To test the decrypt functionality of AES-CBC, the
                            evaluator shall perform the same test as for encrypt, using an all-zero
                            ciphertext value as input and AES-CBC decryption. <htm:h4>KAT-3.</htm:h4> To
                            test the encrypt functionality of AES-CBC, the evaluator shall supply
                            the two sets of key values described below and obtain the ciphertext
                            value that results from AES encryption of an all-zeros plaintext using
                            the given key value and an IV of all zeros. The first set of keys shall
                            have 128 128-bit keys, and the second set shall have 256 256-bit keys.
                            Key i in each set shall have the leftmost i bits be ones and the
                            rightmost N-i bits be zeros, for i in [1,N]. <htm:br/>To test the decrypt
                            functionality of AES-CBC, the evaluator shall supply the two sets of key
                            and ciphertext value pairs described below and obtain the plaintext
                            value that results from AES-CBC decryption of the given ciphertext using
                            the given key and an IV of all zeros. The first set of key/ciphertext
                            pairs shall have 128 128-bit key/ciphertext pairs, and the second set of
                            key/ciphertext pairs shall have 256 256-bit key/ciphertext pairs. Key i
                            in each set shall have the leftmost i bits be ones and the rightmost N-i
                            bits be zeros, for i in [1,N]. The ciphertext value in each pair shall
                            be the value that results in an all-zeros plaintext when decrypted with
                            its corresponding key. <htm:h4>KAT-4.</htm:h4> To test the encrypt functionality
                            of AES-CBC, the evaluator shall supply the set of 128 plaintext values
                            described below and obtain the two ciphertext values that result from
                            AES-CBC encryption of the given plaintext using a 128-bit key value of
                            all zeros with an IV of all zeros and using a 256-bit key value of all
                            zeros with an IV of all zeros, respectively. Plaintext value i in each
                            set shall have the leftmost i bits be ones and the rightmost 128-i bits
                            be zeros, for i in [1,128]. <htm:br/> To test the decrypt functionality of
                            AES-CBC, the evaluator shall perform the same test as for encrypt, using
                            ciphertext values of the same form as the plaintext in the encrypt test
                            as input and AES-CBC decryption. <htm:br/>
                            <htm:h4>AES-CBC Multi-Block Message Test</htm:h4> The evaluator shall test the
                            encrypt functionality by encrypting an i-block message where 1 &lt; i
                            &lt;=10. The evaluator shall choose a key, an IV and plaintext message
                            of length i blocks and encrypt the message, using the mode to be tested,
                            with the chosen key and IV. The ciphertext shall be compared to the
                            result of encrypting the same plaintext message with the same key and IV
                            using a known good implementation. <htm:br/> The evaluator shall also test
                            the decrypt functionality for each mode by decrypting an i-block message
                            where 1 &lt; i &lt;=10. The evaluator shall choose a key, an IV and a
                            ciphertext message of length i blocks and decrypt the message, using the
                            mode to be tested, with the chosen key and IV. The plaintext shall be
                            compared to the result of decrypting the same ciphertext message with
                            the same key and IV using a known good implementation. <htm:br/>
                            <htm:h4>AES-CBC Monte Carlo Tests</htm:h4> The evaluator shall test the encrypt
                            functionality using a set of 200 plaintext, IV, and key 3-tuples. 100 of
                            these shall use 128 bit keys, and 100 shall use 256 bit keys. The
                            plaintext and IV values shall be 128-bit blocks. For each 3-tuple, 1000
                            iterations shall be run as follows:
                            
                            <figure entity="images/codeSample.jpg" title="" id="code"/>
                                                 
                            The ciphertext computed in the 1000th iteration (i.e., CT[1000]) is the
                            result for that trial. This result shall be compared to the result of
                            running 1000 iterations with the same values using a known good
                            implementation. <htm:br/>The evaluator shall test the decrypt functionality
                            using the same test as for encrypt, exchanging CT and PT and replacing
                            AES-CBC-Encrypt with AES-CBC-Decrypt. <htm:h4>XTS-AES Monte Carlo Test</htm:h4>
                            The evaluator shall test the encrypt functionality of XTS-AES for each
                            combination of the following input parameter lengths: <htm:h4>256 bit (for
                                AES-128) and 512 bit (for AES-256) keys</htm:h4>
                            <htm:h4>Three data unit (i.e., plaintext) lengths.</htm:h4> One of the data unit
                            lengths shall be a non-zero integer multiple of 128 bits, if supported.
                            One of the data unit lengths shall be an integer multiple of 128 bits,
                            if supported. The third data unit length shall be either the longest
                            supported data unit length or 216 bits, whichever is smaller. <htm:br/>
                            using a set of 100 (key, plaintext and 128-bit random tweak value)
                            3-tuples and obtain the ciphertext that results from XTS-AES encrypt.
                            <htm:br/> The evaluator may supply a data unit sequence number instead of
                            the tweak value if the implementation supports it. The data unit
                            sequence number is a base-10 number ranging between 0 and 255 that
                            implementations convert to a tweak value internally. <htm:br/> The evaluator
                            shall test the decrypt functionality of XTS-AES using the same test as
                            for encrypt, replacing plaintext values with ciphertext values and
                            XTS-AES encrypt with XTS-AES decrypt. </aactivity>
                    </f-element>
                </f-component>
                <htm:h4>FEK decryption and encryption (Key Wrapping)</htm:h4> This requirement specifies the
                operations to be used if the FEK are encrypted and decrypted using a KEK. If
                intermediate keys are used, the ST author iterates this requirement to specify the
                operations used in those cases. <f-component id="FCS_COP.1(5)"
                    name="Cryptographic operation (Key Wrapping)" status="threshold">
                    <f-element id="FCS_COP.1.1(5)">
                        <title>
                            <htm:b>Refinement:</htm:b> The application shall <selectables>
                                <selectable>use platform-provided functionality to perform Key
                                    Wrapping</selectable>
                                <selectable>implement functionality to perform Key
                                    Wrapping</selectable>
                            </selectables> in accordance with a specified cryptographic algorithm
                                <selectables linebreak="yes">
                                <selectable>AES Key Wrap</selectable>
                                <selectable>AES Key Wrap with Padding</selectable>
                                <selectable>RSA using the KTS-OAEP-basic scheme</selectable>
                                <selectable>RSA using the KTS-OAEP-receiver-confirmation
                                    scheme</selectable>
                                <selectable>ECC CDH</selectable>
                            </selectables> and the cryptographic key size <selectables>
                                <selectable>128 bits (AES)</selectable>
                                <selectable>256 bits (AES)</selectable>
                                <selectable>2048 (RSA)</selectable>
                                <selectable>4096 (RSA)</selectable>
                                <selectable>256-bit prime modulus (ECC CDH)</selectable>
                                <selectable>384-bit prime modulus (ECC CDH)</selectable>
                            </selectables> that meet the following: <selectables linebreak="yes">
                                <selectable>"NIST SP 800-38F" for Key Wrap (section 6.2) and Key
                                    Wrap with Padding (section 6.3)</selectable>
                                <selectable>"NIST SP 800-56B" for RSA using the KTS-OAEP-basic
                                    (section 9.2.3) and KTS-OAEP-receiver-confirmation
                                    (section9.2.4) scheme, "NIST SP 800-56A rev 2" for ECC CDH
                                    (sections 5.6.1.2 and 6.2.2.2)</selectable>
                            </selectables>
                        </title>
                        <note role="application"> This requirement specifies the protection of the
                            FEK (that is, protecting it using the KEK specified in FCS_CKM_EXT.1)
                            and unwrapping/decryption of the FEK with the KEK so that it may be used
                            to encrypt or decrypt files or set of files. <htm:br/> This requirement
                            allows the TSF to control how the FEK is encrypted and decrypted. When
                            encrypting the FEK, the TSF may pass the FEK to the operational
                            environment with various amounts of information. For instance, if
                            128-bit AES Key Wrap is being used, the TSF may invoke an interface
                            specifying these parameters. If RSA is being used, the FEK may invoke a
                            crypto-library and pass the private key and the FEK to the
                            crypto-library; or it may invoke crypto-functionality on a smart card
                            that contains the private key, so the TSF only passes the FEK. <htm:br/> In
                            the first selection, the ST author chooses the entity that performs the
                            decryption/encryption of the FEK. If one operation is done by the TOE
                            platform (e.g., decryption of the FEK) and one operation is done by the
                            TSF (e.g., encryption of the FEK), the ST author should iterate and
                            refine the requirement to reflect this functionality. Iteration can also
                            be used if the TOE supports either option; in this case the assurance
                            activities will be performed for all claimed modes. <htm:br/> In the second
                            selection, the ST author chooses the method by which the KEK is used to
                            encrypt the FEK: <htm:br/>
                            <htm:ul>
                                <htm:li>Using one of the two AES-based Key Wrap methods specified in
                                    NIST SP 800-38F</htm:li>
                                <htm:li>Using one of the two the KTS-OAEP schemes for RSA as described
                                    in NIST SP 800-56B (KTS-OAEP-basic described in section
                                    9.2.3</htm:li>
                                <htm:li>Using ECC CDH as described in NIST SP 800-56A section 6.2.2.2.
                                    In this case, the ST author also incorporates FCS_CKM.1(1) in
                                    Appendix C to ensure the ephemeral keys to be used in the
                                    exchange with the external entity are generated. Any key wrap
                                    mode included in NIST SP 800-38 F is allowed</htm:li>
                            </htm:ul> Based on the method(s) selected, the last selection should be used
                            to select the appropriate reference(s). The fourth selection should be
                            made to reflect the size of the KEK; 2048/4096 is used for the RSA-based
                            schemes, while the size of the prime modulus is used for ECC-based
                            schemes. </note>
                        <aactivity>
                            <htm:h4>TSS</htm:h4>
                            <htm:h4>Requirement met by the platform</htm:h4> If the platform provides the
                            FEK encryption/decryption, then the evaluator shall examine the TSS to
                            verify that it describes how the FEK encryption/decryption is invoked. <htm:br/>
                            <htm:h4>Requirement met by the TOE</htm:h4> The evaluator shall examine the TSS
                            to ensure there is a high-level description of how the FEK is protected. <htm:br/>
                            <htm:h4>Guidance</htm:h4> None. <htm:h4>Tests</htm:h4> These tests are only for data
                            encryption provided by the application: <testlist>
                                <test>The evaluator shall use platform tools (such as a debugger) to
                                    generate a FEK to be generated and capture the value of the FEK.
                                    The evaluator shall then continue with the TOE operation which
                                    will result in an encrypted resource, as well as an encrypted
                                    FEK being associated with the resource as described in the TSS.
                                    The evaluator shall then examine the encrypted FEK to determine
                                    that it is different than the value of the unencrypted FEK. The
                                    evaluator shall then use the information provided in the ST and
                                    TSS to determine that the unencrypted FEK -- when wrapped according
                                    to the algorithm and parameters used by the TOE as
                                    described -- produces the value observed for the encrypted
                                    FEK.</test>
                            </testlist>
                            <htm:h4>AES Key Wrap (with or without padding)</htm:h4> If AES Key Wrap is used
                            to decrypt/encrypt the key, the evaluator shall examine the TSS to
                            determine that it specifies that the implementation conforms to SP
                            800-38F with the appropriate (with or without padding) Key Wrap section
                            using AES. <htm:br/> The evaluator shall also perform the verification
                            procedures outlined in the testing methodology, "The Key Wrap Validation
                            System." (http://csrc.nist.gov/groups/STM/cavp/documents/mac/KWVS.pdf)
                                <htm:h4> RSA</htm:h4> The evaluator shall check the TSS to ensure it
                            describes the various values used for the RSA-OAEP encryption and
                            decryption scheme described in NIST SP 800-56B, section 7.2.2 and other
                            referenced sections. <htm:br/> The evaluator shall also perform the
                            validation procedures outlined in
                            http://www.emc.com/emc-plus/rsa-labs/standards-initiatives/pkcs-rsa-cryptography-standard.htm.
                                <htm:h4>ECC CDH</htm:h4> The evaluator shall verify a TOE's implementation
                            of the ECC DH key agreement scheme using the following Function and
                            Validity tests. These validation tests verify that a TOE has implemented
                            the components of the key agreement scheme according to the
                            specifications in the Recommendation. These components include the
                            calculation of the DLC primitives (the shared secret value Z) and the
                            calculation of the derived keying material (DKM) via the Key Derivation
                            Function (KDF). If key confirmation is supported, the evaluator shall
                            also verify that the components of key confirmation have been
                            implemented correctly, using the test procedures described below. This
                            includes the parsing of the DKM, the generation of MAC data and the
                            calculation of MAC tag. <htm:h4>Function Test</htm:h4> The Function test
                            verifies the ability of the TOE to implement the key agreement scheme
                            correctly. To conduct this test, the evaluator shall generate or obtain
                            test vectors from a known good implementation of the TOE supported
                            schemes. For each supported key agreement scheme-key agreement role
                            combination, KDF type, and, if supported, key confirmation role- key
                            confirmation type combination, the tester shall generate 10 sets of test
                            vectors. The data set consists of one NIST approved curve per 10 sets of
                            ephemeral public keys. The evaluator shall obtain the DKM, the
                            corresponding TOE's public keys, the MAC tag(s), and any inputs used in
                            the KDF, such as the Other Information field OI and TOE id fields. The
                            evaluator shall verify the correctness of the TSF's implementation of a
                            given scheme by using a known good implementation to calculate the
                            shared secret value, derive the keying material DKM, and compare hashes
                            or MAC tags generated from these values. If key confirmation is
                            supported, the TSF shall perform the above for each implemented approved
                            MAC algorithm. <htm:h4>Validity Test</htm:h4> The Validity test verifies the
                            ability of the TOE to recognize another party's valid and invalid key
                            agreement results with or without key confirmation. To conduct this
                            test, the evaluator shall obtain a list of the supporting cryptographic
                            functions included in the SP800-56A key agreement implementation to
                            determine which errors the TOE should be able to recognize. The
                            evaluator generates a set of 30 test vectors consisting of data sets
                            including the selected NIST approved curves, the evaluator's public
                            keys, the TOE's ephemeral public/private key pairs, MACTag, and any
                            inputs used in the KDF, such as the other info and TOE id fields. <htm:br/>
                            The evaluator shall inject an error in some of the test vectors to test
                            that the TOE recognizes invalid key agreement results caused by the
                            following fields being incorrect: the shared secret value Z, the DKM,
                            the other information field OI, the data to be MACed, or the generated
                            MACTag. If the TOE contains the full or partial public key validation,
                            the evaluator will also individually inject errors in the static public
                            keys, the ephemeral public keys and the TOE's ephemeral private key to
                            assure the TOE detects errors in the public key validation function
                            and/or the partial key validation function. At least two of the test
                            vectors shall remain unmodified and therefore should result in valid key
                            agreement results (they should pass). <htm:br/>The TOE shall use these
                            modified test vectors to emulate the key agreement scheme using the
                            corresponding parameters. The evaluator shall compare the TOE's results
                            with the results using a known good implementation verifying that the
                            TOE detects these errors. </aactivity>
                    </f-element>
                </f-component>
                <f-component id="FCS_IV_EXT.1" name="Extended: Initialization Vector Generation"
                    status="threshold">
                    <f-element id="FCS_IV_EXT.1.1 ">
                        <title>The application shall <selectables>
                                <selectable>implement platform-provided functionality to generate
                                    IVs</selectable>
                                <selectable>generate IVs</selectable>
                            </selectables> in accordance with Appendix H: Initialization Vector
                            Requirements for NIST-Approved Cipher Modes.</title>
                        <note role="application">Appendix G lists the requirements for composition
                            of IVs according to the NIST Special Publications for each cipher mode.
                            The composition of IVs generated for encryption according to a
                            cryptographic protocol is addressed by the protocol. Thus, this
                            requirement addresses only IVs generated for key storage and data
                            storage encryption.</note>
                        <aactivity>
                            <htm:h4>TSS</htm:h4>
                            <htm:h4>Requirement met by the platform</htm:h4> If the platform provides the IV
                            generation, then the evaluator shall examine the TSS to verify that it
                            describes how the IV generation is invoked. <htm:br/>
                            <htm:h4>Requirement met by the TOE</htm:h4> The evaluator shall examine the key
                            hierarchy section of the TSS to ensure that the encryption of all keys
                            is described and the formation of the IVs for any data encrypted by the
                            same key meets FCS_IV_EXT.1. <htm:h4>Guidance</htm:h4>None. <htm:h4>Tests</htm:h4>None.
                        </aactivity>
                    </f-element>
                </f-component>
                <f-component id="FCS_KYC_EXT.1" name="Key Chaining and Key Storage"
                    status="threshold">
                    <f-element id="FCS_KYC_EXT.1.1">
                        <title> The TSF shall maintain a primary key chain of: <selectables
                                linebreak="yes">
                                <selectable>a conditioned password as the FEK,</selectable>
                                <selectable>KEKs originating from one or more authorization
                                    factors(s) to the FEK(s) using the following method(s):
                                        <selectables linebreak="yes">
                                        <selectable>utilization of the platform key
                                            storage,</selectable>
                                        <selectable>utilization of platform key storage that
                                            performs key wrap with a TSF provided key,</selectable>
                                        <selectable>implement key wrapping as specified in
                                            FCS_COP.1(5),</selectable>
                                        <selectable>implement key combining as specified in
                                            FCS_SMC_EXT.1,</selectable>
                                        <selectable>implement key encryption as specified in
                                            FCS_COP.1(1) in [selection: CBC, GCM] mode</selectable>
                                    </selectables> while maintaining an overall effective strength
                                    of <selectables>
                                        <selectable>[selection: 128 bits, 256 bits] for symmetric
                                            keys;</selectable>
                                        <selectable>[selection: 112 bits, 128 bits, 192 bits, 256
                                            bits] for asymmetric keys</selectable>
                                    </selectables> commensurate with the strength of the FEK,
                                </selectable>
                            </selectables> and <selectables>
                                <selectable>no supplemental key chains</selectable>
                                <selectable>other supplemental key chains that protect a key or keys
                                    in the primary key chain using the following method(s) <selectables>
                                        <selectable>utilization of the platform key
                                            storage,</selectable>
                                        <selectable>utilization of the platform key storage that
                                            performs key wrap with a TSF-provided key,</selectable>
                                        <selectable>implement key wrapping as specified in
                                            FCS_COP.1(5),</selectable>
                                        <selectable>implement key combining as specified in
                                            FCS_SMC_EXT.1,</selectable>
                                        <selectable>implement key encryption as specified in
                                            FCS_COP.1(1) in [selection: CBC, GCM] mode</selectable>
                                    </selectables>
                                </selectable>
                            </selectables>. </title>
                        <note role="application">For the first selection, the ST author selects the
                            method used for the keychain. If the second option is chosen ("KEKs
                            originating"), then the ST author chooses all methods for production
                            and protection of KEKs in the keychain from the options in the second
                            selection. For this option, the ST author must also specify the strength
                            of the keys in the keychain. It should be noted that "maintaining
                            overall strength...commensurate with the overall strength of the FEK" is
                            meant to cover the use case for this EP of a powered-off device being
                            recovered by an adversary, who subsequently attempts to recover the FEK
                            through a compromise of the key chain. <htm:br/> The third selection in the
                            requirement is used to select the types of keys used in the key chain
                            (both symmetric and asymmetric keys are allowed). The bit sizes selected
                            in the fourth and fifth selections are chosen by the ST author to be
                            commensurate with the strength of the FEK in the following manner: for
                            symmetric FEKs of 128 bits, the ST author can select any of the choices
                            for both symmetric and asymmetric keys. For symmetric FEKs of 256 bits,
                            the ST author selects 256 bits if the symmetric key option is chosen and
                            192 bits or 256 bits if the asymmetric key option is chosen. <htm:br/> If a
                            supplemental keychain is used, then the ST author selects the second
                            option in the sixth selection and then chooses the method by which these
                            keys are protected. Keys in the supplemental key chain may be of any
                            size, as they only provide additional protection to the primary key
                            chain. Compromise (according the EP use case) of the secondary key chain
                            cannot circumvent the protection provided by the primary keychain. </note>
                        <aactivity>
                            <htm:h4>TSS</htm:h4>
                            <htm:b>Requirement met by the TOE</htm:b> The evaluator shall verify the TSS*
                            contains a high level description of the key hierarchy for all keychains
                            and authorization methods selected in FIA_AUT_EXT that are used to
                            protect the KEK or FEK. The evaluator shall examine the TSS to ensure it
                            describes each key chain in detail, and these descriptions correspond
                            with the selections of the requirement. The description of each key
                            chain shall be reviewed to ensure it maintains a chain of keys using key
                            wrap that meet FCS_COP.1(5) if mandated by the selections in the
                            requirement.<htm:br/> The evaluator shall verify the TSS* to ensure that it
                            describes how each key chain process functions, such that it does not
                            expose any material that might compromise any key in the chain. A
                            high-level description should include a diagram illustrating the key
                            hierarchy implemented and detail where all keys and keying material is
                            stored or what it is derived from. The evaluator shall examine the
                            primary key hierarchy to ensure that at no point the chain could be
                            broken without a cryptographic exhaust or knowledge of the KEK or FEK
                            and the effective strength of the FEK is maintained throughout the Key
                            Chain as specified in the requirement. <htm:br/> *if necessary, this
                            information could be contained in a proprietary document and not appear
                            in the TSS.<htm:br/><htm:b>Requirement met by the platform</htm:b>
                            <htm:br/>If the platform provides the IV generation, then the evaluator
                            shall examine the TSS to verify that it describes how the IV generation
                            is invoked. <htm:h4>Guidance</htm:h4> None. <htm:h4>Tests</htm:h4>None. </aactivity>
                    </f-element>
                </f-component>
            </subsection>
            <subsection title="Identification and Authentication (FIA)" id="fia">
                <f-component id="FIA_AUT_EXT.1" name="User Authorization" status="threshold">
                    <f-element id="FIA_AUT_EXT.1.1">
                        <title>The application shall <selectables>
                                <selectable>implement platform-provided functionality to provide
                                    user authorization</selectable>
                                <selectable>provide user authorization</selectable>
                            </selectables> based on <selectables>
                                <selectable>external entity authorization factors</selectable>
                                <selectable>password/passphrase authorization factors</selectable>
                            </selectables>
                        </title>
                        <note role="application">Requirements that pertain to the selection are
                            contained in Appendix C. The ST author will include FIA_FCT_EXT.1(1) in
                            the ST if the TOE supports RSA/ECC CDH authorization factors, and will
                            include FIA_FCT_EXT.1(2) in the ST if the TOE supports
                            password/passphrase authorization factors. <htm:br/>It is possible that the
                            platform is providing the actual authorization functionality. </note>
                        <aactivity>The assurance activities for this component will be driven by the
                            selections made by the ST author. This section describes assurance
                            activities for all possible selections in an ST; it should be understood
                            that if a capability is not selected in the ST, the noted assurance
                            activity does not need to be performed. <htm:h4>TSS</htm:h4> The evaluator shall
                            examine the TSS to ensure that it describes how user authentication is
                            performed. The evaluator shall verify that the authorization methods
                            listed in the TSS are specified and included in the requirements in the
                            ST. <htm:br/>
                            <htm:b>Requirement met by the TOE</htm:b>
                            <htm:br/> Nothing additional. <htm:br/>
                            <htm:b>Requirement met by the platform</htm:b><htm:br/> The evaluator shall examine
                            the TSS to ensure a description is included for how the TOE is invoking
                            the platform functionality and how it is getting an authorization value
                            that has appropriate entropy. <htm:h4>Guidance</htm:h4>The evaluator shall
                            verify that the operational guidance includes instructions for
                            configuring the selected authorization method. <htm:h4>Tests</htm:h4>The
                            evaluator shall ensure that authorization using each selected method is
                            tested during the course of the evaluation, setting up the method as
                            described in the operational guidance and ensuring that authorization is
                            successful. </aactivity>
                    </f-element>
                </f-component>
                <f-component id="FIA_FCT_EXT.1(1)"
                    name="Extended: User Authorization with External Entity Authorization Factors" status="sel-based">
                    <selection-depends req="FIA_AUT_EXT.1.1"/><!-- HERE check this req  -->
                    <f-element id="FIA_FCT_EXT.1.1(1)">
                        <title>The TSF shall support an external entity authorization factor
                            mechanism as defined in FCS_CKM_EXT.1 and FCS_COP.1(5) to perform user
                            authorization. </title>
                    </f-element>
                    <f-element id="FIA_FCT_EXT.1.2(1)">
                        <title>The TSF shall confirm that the user is authorized via the mechanism
                            provided in FIA_FCT_EXT.1.1(1) before allowing decryption of user
                            data.</title>
                    </f-element>
                    <f-element id="FIA_FCT_EXT.1.3(1)">
                        <title>The TSF shall support the use of multiple instances of authorization
                            factors that result in unique KEKs.</title>
                    </f-element>
                    <f-element id="FIA_FCT_EXT.1.4(1)">
                        <title>The TSF shall receive an indication that the authorization factor is
                            valid before decrypting the user's encrypted files. </title>
                        <note role="application"> This requirement is used when an external entity
                            (e.g., smartcard) contains a public/private key pair that is used to
                            protect a FEK used to decrypt the encrypted file (or set of files) owned
                            by the user and thus gain access to the data. It is fairly important to
                            note that this is not considered authentication of an individual user.
                            While FIA_FCT_EXT.1.3(1) requires the TSF to support multiple
                            authorization factors to produce multiple KEKs, the intent is that the
                            TSF supports a system where multiple users have access to files on the
                            underlying platform, and that each user has an authorization factor so
                            that they can protect their own files from other users (this is in
                            contrast to a full disk encryption product where a single authorization
                            factor allows access to all of the files on that disk). In this case it
                            would mean that the TOE is able to support multiple users each with
                            their own smartcard. <htm:br/>User authorization only needs to be performed
                            when a request to the TOE for decrypt/encrypt services is made, not on
                            each individual read and write for that file. In the context of
                            FIA_FCT_EXT.1.4(1), the notion is that the user will enter (either
                            facilitated by the TOE or directly into the external entity through a
                            facility outside of the TOE) the credentials needed to unlock the
                            private key on the external entity; if these credentials are not correct
                            for the private key on the external entity, then the TOE receives an
                            indication from the external entity that the authorization has failed
                            and no decryption is performed. </note>
                        <aactivity>
                            <htm:h4>TSS</htm:h4> The evaluator shall check the TSS section to confirm that
                            it describes, for each type of external entity authorization factor
                            supported by the TOE, how a request for each type of supported resource
                            (file or set of files, etc.) to be encrypted/decrypted is captured by
                            the TOE; and how the TSF interacts with the external entity to obtain a
                            FEK with which to perform the desired operation. Scenarios to be covered
                            should include initial creation of the FEK, and using a FEK to
                            decrypt/encrypt an existing resource as well as to encrypt a resource
                            for the first time. If different resource types require different
                            behavior by the TSF in terms its interactions with external entities in
                            unwrapping the FEK, then the evaluator shall check to ensure that these
                            cases are described as well. <htm:br/>Since cryptographic functions may be
                            implemented in the Operational Environment to perform the wrapping and
                            unwrapping of the FEK, the evaluator shall check the TSS to ensure it
                            describes--for each platform and external entity identified in the
                            ST--the interface(s) used by the TOE to invoke this functionality. This
                            must include the interfaces used (if supported by the TOE) for entry of
                            credentials used to decrypt the private key, as well as the interfaces
                            for passing the (encrypted or unencrypted, as dictated by the
                            implementation) FEK to the external entity and status from external
                            entity in terms of the validity of the authorization factors/FEKs. If
                            the interface conforms to a standard (e.g., PKCS #11), then it is
                            sufficient for the evaluator to ensure that the TSS describes how the
                            TOE uses the standard interfaces, and that each external entity claims
                            to support that standard. Other interfaces must be described at the
                            level of an API call (for instance, a "man page" entry for *IX systems).
                            For each mode of FEK encryption used by the external entity, the
                            evaluator shall check that the TSS identifies (using the information
                            contained in FCS_COP.1(4)) the algorithms supported by each external
                            entity, and any functionality implemented by the TSS to ensure that that
                            functionality is invoked. <htm:br/>The evaluator shall check to ensure that
                            the TSS states that multiple users are able to invoke the TOE, each with
                            their own authorization factor. <htm:br/>The evaluator shall check to ensure
                            that the TSS describes the method by which a user attempting to decrypt
                            a file for which they do not have the correct FEK is detected and
                            dis-allowed. If this operation is performed by the TSF, then the method
                            by which an incorrect FEK is detected shall be described in detail,
                            including the information used in detected incorrect FEKs. If this
                            operation is performed by the external entity, then the evaluator checks
                            to ensure that the TSS describes the information that the TSF must
                            present to the external entity in order for this determination to be
                            made, and how the response from the external entity is indicated to the
                            TSF. <htm:h4>Guidance</htm:h4> 1 The evaluator shall ensure that any
                            configuration needed to be performed on the TSF to support the external
                            entities listed in the ST (e.g., entry of private-key-credentials,
                            algorithms to use to encrypt FEK) shall be contained in the Operational
                            Guidance. The evaluator shall also verify that the Operational Guidance
                            contains instructions on using each external entity authorization factor
                            claimed in the ST for each platform, and describes any error indicators
                            that may be returned in response to elements FIA_FCT_EXT.1.2(1) and
                            FIA_FCT_EXT.1.4(1). <htm:h4>Tests</htm:h4> The evaluator shall perform the
                            following tests (these tests may be conducted in concert with those
                            specified for FDP_PRT_EXT.1):<testlist>
                                <test>For each external entity listed in the ST and resource type
                                    supported by the TOE (file (or set of files)), ensure that
                                    correctly using the external entity results in access to the
                                    protected resource. This activity must be performed using all
                                    cryptographic FEK protection algorithms and private-key-entry
                                    options identified in the TSS for each external entity. This
                                    activity must also be performed for first-time encryption of a
                                    resource, as well as encryption and decryption of an existing
                                    resource.</test>
                                <test>Choose (and describe the rationale in the test report) a
                                    representative sample of different authorization factors (either
                                    instantiation of a single authorization factor, or multiple
                                    different authorization factors), and demonstrate that they can
                                    be used to protect different resource types on the same platform
                                    using the TOE.</test>
                                <test>For each external entity listed in the ST and resource type
                                    supported by the TOE (file (or set of files)), ensure that
                                    incorrect entry of the credential protecting the private key
                                    results in a notification from the TOE that an incorrect
                                    authorization has been provided. </test>
                                <test>For each external entity and platform combination that is
                                    valid as listed in the ST, and resource type supported by the
                                    TOE (file (or set of files)), ensure that an attempt to decrypt
                                    a protected resource is not associated with the user requesting
                                    access results in a notification from the TOE that an incorrect
                                    authorization has been provided.</test>
                            </testlist>
                        </aactivity>
                    </f-element>
                </f-component>
                <f-component id="FIA_FCT_EXT.1(1)"
                    name="Extended: User Authorization with External Entity Authorization Factors" status="sel-based">
                    <selection-depends req="FIA_AUT_EXT.1.1"/><!-- HERE check this req  -->
                    <f-element id="FIA_FCT_EXT.1.1(1)">
                        <title>The TSF shall support an external entity authorization factor
                            mechanism as defined in FCS_CKM_EXT.1 and FCS_COP.1(5) to perform user
                            authorization. </title>
                    </f-element>
                    <f-element id="FIA_FCT_EXT.1.2(1)">
                        <title>The TSF shall confirm that the user is authorized via the mechanism
                            provided in FIA_FCT_EXT.1.1(1) before allowing decryption of user
                            data.</title>
                    </f-element>
                    <f-element id="FIA_FCT_EXT.1.3(1)">
                        <title>The TSF shall support the use of multiple instances of authorization
                            factors that result in unique KEKs.</title>
                    </f-element>
                    <f-element id="FIA_FCT_EXT.1.4(1)">
                        <title>The TSF shall receive an indication that the authorization factor is
                            valid before decrypting the user's encrypted files. </title>
                        <note role="application"> This requirement is used when an external entity
                            (e.g., smartcard) contains a public/private key pair that is used to
                            protect a FEK used to decrypt the encrypted file (or set of files) owned
                            by the user and thus gain access to the data. It is fairly important to
                            note that this is not considered authentication of an individual user.
                            While FIA_FCT_EXT.1.3(1) requires the TSF to support multiple
                            authorization factors to produce multiple KEKs, the intent is that the
                            TSF supports a system where multiple users have access to files on the
                            underlying platform, and that each user has an authorization factor so
                            that they can protect their own files from other users (this is in
                            contrast to a full disk encryption product where a single authorization
                            factor allows access to all of the files on that disk). In this case it
                            would mean that the TOE is able to support multiple users each with
                            their own smartcard. <htm:br/>User authorization only needs to be performed
                            when a request to the TOE for decrypt/encrypt services is made, not on
                            each individual read and write for that file. In the context of
                            FIA_FCT_EXT.1.4(1), the notion is that the user will enter (either
                            facilitated by the TOE or directly into the external entity through a
                            facility outside of the TOE) the credentials needed to unlock the
                            private key on the external entity; if these credentials are not correct
                            for the private key on the external entity, then the TOE receives an
                            indication from the external entity that the authorization has failed
                            and no decryption is performed. </note>
                        <aactivity>
                            <htm:h4>TSS</htm:h4> The evaluator shall check the TSS section to confirm that
                            it describes, for each type of external entity authorization factor
                            supported by the TOE, how a request for each type of supported resource
                            (file or set of files, etc.) to be encrypted/decrypted is captured by
                            the TOE; and how the TSF interacts with the external entity to obtain a
                            FEK with which to perform the desired operation. Scenarios to be covered
                            should include initial creation of the FEK, and using a FEK to
                            decrypt/encrypt an existing resource as well as to encrypt a resource
                            for the first time. If different resource types require different
                            behavior by the TSF in terms its interactions with external entities in
                            unwrapping the FEK, then the evaluator shall check to ensure that these
                            cases are described as well. <htm:br/>Since cryptographic functions may be
                            implemented in the Operational Environment to perform the wrapping and
                            unwrapping of the FEK, the evaluator shall check the TSS to ensure it
                            describes--for each platform and external entity identified in the
                            ST--the interface(s) used by the TOE to invoke this functionality. This
                            must include the interfaces used (if supported by the TOE) for entry of
                            credentials used to decrypt the private key, as well as the interfaces
                            for passing the (encrypted or unencrypted, as dictated by the
                            implementation) FEK to the external entity and status from external
                            entity in terms of the validity of the authorization factors/FEKs. If
                            the interface conforms to a standard (e.g., PKCS #11), then it is
                            sufficient for the evaluator to ensure that the TSS describes how the
                            TOE uses the standard interfaces, and that each external entity claims
                            to support that standard. Other interfaces must be described at the
                            level of an API call (for instance, a "man page" entry for *IX systems).
                            For each mode of FEK encryption used by the external entity, the
                            evaluator shall check that the TSS identifies (using the information
                            contained in FCS_COP.1(4)) the algorithms supported by each external
                            entity, and any functionality implemented by the TSS to ensure that that
                            functionality is invoked. <htm:br/>The evaluator shall check to ensure that
                            the TSS states that multiple users are able to invoke the TOE, each with
                            their own authorization factor. <htm:br/>The evaluator shall check to ensure
                            that the TSS describes the method by which a user attempting to decrypt
                            a file for which they do not have the correct FEK is detected and
                            dis-allowed. If this operation is performed by the TSF, then the method
                            by which an incorrect FEK is detected shall be described in detail,
                            including the information used in detected incorrect FEKs. If this
                            operation is performed by the external entity, then the evaluator checks
                            to ensure that the TSS describes the information that the TSF must
                            present to the external entity in order for this determination to be
                            made, and how the response from the external entity is indicated to the
                            TSF. <htm:h4>Guidance</htm:h4> 1 The evaluator shall ensure that any
                            configuration needed to be performed on the TSF to support the external
                            entities listed in the ST (e.g., entry of private-key-credentials,
                            algorithms to use to encrypt FEK) shall be contained in the Operational
                            Guidance. The evaluator shall also verify that the Operational Guidance
                            contains instructions on using each external entity authorization factor
                            claimed in the ST for each platform, and describes any error indicators
                            that may be returned in response to elements FIA_FCT_EXT.1.2(1) and
                            FIA_FCT_EXT.1.4(1). <htm:h4>Tests</htm:h4> The evaluator shall perform the
                            following tests (these tests may be conducted in concert with those
                            specified for FDP_PRT_EXT.1):<testlist>
                                <test>For each external entity listed in the ST and resource type
                                    supported by the TOE (file (or set of files)), ensure that
                                    correctly using the external entity results in access to the
                                    protected resource. This activity must be performed using all
                                    cryptographic FEK protection algorithms and private-key-entry
                                    options identified in the TSS for each external entity. This
                                    activity must also be performed for first-time encryption of a
                                    resource, as well as encryption and decryption of an existing
                                    resource.</test>
                                <test>Choose (and describe the rationale in the test report) a
                                    representative sample of different authorization factors (either
                                    instantiation of a single authorization factor, or multiple
                                    different authorization factors), and demonstrate that they can
                                    be used to protect different resource types on the same platform
                                    using the TOE.</test>
                                <test>For each external entity listed in the ST and resource type
                                    supported by the TOE (file (or set of files)), ensure that
                                    incorrect entry of the credential protecting the private key
                                    results in a notification from the TOE that an incorrect
                                    authorization has been provided. </test>
                                <test>For each external entity and platform combination that is
                                    valid as listed in the ST, and resource type supported by the
                                    TOE (file (or set of files)), ensure that an attempt to decrypt
                                    a protected resource is not associated with the user requesting
                                    access results in a notification from the TOE that an incorrect
                                    authorization has been provided.</test>
                            </testlist>
                        </aactivity>
                    </f-element>
                </f-component>
                <f-component id="FIA_FCT_EXT.1(2)"
                    name="Extended: User Authorization with Password/Passphrase Authorization Factors"  status="sel-based">
                    <selection-depends req="FIA_AUT_EXT.1.1"/><!-- HERE check this req  -->
                    <f-element id="FIA_FCT_EXT.1.1(2)">
                        <title>The TSF shall provide a mechanism as defined in FCS_CKM_EXT.1 and
                            FCS_COP.1(4) to perform user authorization. </title>
                    </f-element>
                    <f-element id="FIA_FCT_EXT.1.2(2)">
                        <title>The TSF shall perform user authorization using the mechanism provided
                            in FIA_FCT_EXT.1.1(2) before allowing decryption of user data.</title>
                    </f-element>
                    <f-element id="FIA_FCT_EXT.1.3(2)">
                        <title>The TSF shall support the use of multiple instances of authorization
                            factors that result in unique encryption keys.</title>
                    </f-element>
                    <f-element id="FIA_FCT_EXT.1.4(2)">
                        <title>The TSF shall verify that the user-entered authorization factors are
                            valid before decrypting the user's encrypted files. </title>
                    </f-element>
                    <f-element id="FIA_FCT_EXT.1.5(2)">
                        <title>The TSF shall ensure that the method of validation for each
                            authorization factor does not expose or reduce the effective strength of
                            the KEK, FEK, or CSPs used to derive the KEK or FEK.</title>
                    </f-element>
                    <f-element id="FIA_FCT_EXT.1.6(2)">
                        <title>The TSF shall perform user authorization using the mechanism provided
                            in FIA_FCT_EXT.1.1(2) before allowing the user to change the
                            passphrase-based authorization factor as specified in
                            FMT_SMF.1(c).</title>
                        <note role="application">The intent of this requirement is to specify the
                            password and/or passphrase mechanisms by which users are authorized to
                            decrypt the encrypted file (or set of files) and thus gain access to
                            their data. It is fairly important to note that this is not considered
                            authentication of an individual user. While FIA_FCT_EXT.1.3(2) requires
                            the TSF to support multiple authorization factors to produce multiple
                            KEKs, the intent is that the TSF supports a system where multiple users
                            have access to files on the underlying platform, and that each user has
                            an authorization factor so that they can protect their own files from
                            other users (this is in contrast to a full disk encryption product where
                            a single authorization factor allows access to all of the files on that
                            disk). There is no requirement that the TSF even understand the concept
                            of a "user" in the context of a file owner; it should merely be able to
                            tell (FIA_FCT_EXT.1.4(2)) if the authorization factor presented is valid
                            for the file being requested, and if so, perform the appropriate
                            cryptographic operations on that file. User authorization only needs to
                            be performed when a request to the TOE for decrypt/encrypt services is
                            made, not on each individual read and write for that file.<htm:br/><htm:br/>
                            Since the TSF is responsible for manipulating the password/passphrase
                            authorization factor itself, in this case FIA_FCT_EXT.1.1(2) and
                            FIA_FCT_EXT.1.2(2) mean that the TSF itself provides the mechanism to prompt
                            the user for the authorization factors, verify that the authorization
                            factors are valid, transform the authorization factor into a KEK, and then
                            use the KEK to decrypt the FEK so that the data can be accessed. <htm:br/>
                            Elements 1.4(2) and 1.5(2) deal with the validation of the authorization
                            factors provided by the user prior to a user being able to access the
                            information in the file (or set of files). If a password/passphrase
                            authorization factor is not valid, it is undesirable to unmask the FEK and
                            use it to decrypt the file (or set of files) and present gibberish to the
                            user. However, checking that the authorization factor is valid should not be
                            done in a way that allows an attacker to circumvent the other requirements;
                            since this operation may be done on the host, it may be
                            monitored/disassembled by an attacker and so must be designed with this
                            threat in mind. In the case that the TOE supports external authorization
                            factors, this provision means that the external entity must have a way of
                            signaling to the TSF that the authorization factor was not valid (which
                            means that the information provided to decrypt the secret key was invalid),
                            rather than just pass back an incorrectly-derived KEK (as ECC CDH does) or
                            decrypted FEK (as RSA decryption does) for the TSF to use. <htm:br/>
                            FIA_FCT_EXT.1.6(2) covers the case that the user wishes to change their
                            password- or passphrase-based authorization factor such that the user
                            authorization functionality will have to be invoked prior to the change
                            being completed.                         
                        </note>
                        <aactivity>
                            <htm:h4>TSS</htm:h4> The evaluator shall check the TSS section to confirm that
                            it describes how a request for each type of supported resource (file (or
                            set of files)) to be encrypted/decrypted is captured by the TOE; how the
                            user is prompted for an authorization factor, and how the KEK is formed.
                            <htm:br/>The evaluator shall check that the TSS describes how the
                            authorization factors are validated prior to allowing the user to access
                            the data on a drive or change their passphrase. This description shall
                            be in enough detail so that the evaluator can determine that the method
                            or methods used do not expose the FEK, KEK, or other key material.
                            "Expose" also includes the notion of weakening the FEK or KEK. It is not
                            required to have a separate method for checking each authorization
                            factor if separate authorization factors are used to provide submasks to
                            create the KEK. The evaluator shall document their analysis of the
                            mechanism(s) used to authenticate the authorization factors in the test
                            report (ATE_IND). <htm:br/>The evaluator shall ensure the TSS describes how
                            updates to the current authorization factor are handled, to include
                            verifying that a change to the authorization factor cannot occur prior
                            to providing the original authorization factor and that once the update
                            has transpired the original authorization factor would no longer be
                            effective. <htm:br/>For the cryptographic functions implemented in the
                            Operational Environment that are used by the TOE in implementing this
                            component, the evaluator shall check the TSS to ensure it describes--for
                            each platform identified in the ST--the interface(s) used by the TOE to
                            invoke this functionality. <htm:h4>Guidance</htm:h4>The evaluator shall check
                            that the Operational Guidance contains information so that users
                            understand how authorization factors are entered, and the resources that
                            are protectable by the TOE in each platform listed in the ST. They shall
                            also check to ensure it describes the method by which a user changes
                            their password/passphrase authorization factor. <htm:h4>Tests</htm:h4> The
                            evaluator shall perform the following tests (these tests may be
                            conducted in concert with those specified for FDP_PRT_EXT.1 above):<testlist>
                                <test>For each authorization factor and resource type supported by
                                    the TOE (file (or set of files)), ensure that the authorization
                                    factors are prompted for prior to allowing any access to the
                                    protected resource. This activity must be performed using all
                                    cryptographic FEK protection algorithms identified in the TSS
                                    for each external entity. This activity must also be performed
                                    for first-time encryption of a resource, as well as encryption
                                    and decryption of an existing resource.</test>
                                <test>Choose (and describe the rationale in the test report) a
                                    representative sample of different authorization factors (either
                                    instantiation of a single authorization factor, or multiple
                                    different authorization factors), and demonstrate that they can
                                    be used to protect different resource types on the same platform
                                    using the TOE.</test>
                                <test>For each authorization factor and resource type supported by
                                    the TOE (file (or set of files)), ensure that incorrect entry of
                                    an authorization factor results in a notification from the TOE
                                    that an incorrect authorization has been provided. </test>
                                <test>For each external entity and platform combination that is
                                    valid as listed in the ST, and resource type supported by the
                                    TOE (file or set of files), ensure that an attempt to decrypt a
                                    protected resource is not associated with the user requesting
                                    access results in a notification from the TOE that an incorrect
                                    authorization has been provided.</test>
                            </testlist>
                        </aactivity>
                    </f-element>
                </f-component>
            </subsection>
            <subsection title="User Data Protection (FDP)" id="fdp">
                <htm:h4>Extended: Protection of Selected User Data (FDP_PRT_EXT)</htm:h4>
                <f-component id="FDP_PRT_EXT.1" name="Extended: Protection of Selected User Data"
                    status="threshold">
                    <f-element id="FDP_PRT_EXT.1.2">
                        <title> The application shall <selectables>
                                <selectable>invoke platform-provided functionality</selectable>
                                <selectable>implement functionality</selectable>
                            </selectables> to ensure that all sensitive data created by the TOE when
                            decrypting/encrypting the user-selected file (or set of files) are
                            destroyed in volatile and non-volatile memory when the data is no longer
                            needed </title>
                        <note role="application"> The intent is that the TSF controls the use and
                            clearing of any data that it manipulates that is not needed by the user
                            (e.g. a temporary file created in non-volatile memory during the
                            encryption/decryption process would be destroyed as soon as the process
                            is completed). This should not prevent expected usage (e.g. the TOE may
                            create a decrypted copy of a file as requested by the user).The TSF is
                            also not responsible for temporary files that non-TSF application
                            creates (for example, a text editor may create a "checkpoint" file when
                            editing a file that is protected by the TOE; the TOE does not have to
                            try to keep track of or clean up these "checkpoint" files). An optional
                            requirement on cleaning up the temporary files created by non-TSF
                            application when operating on files protected by the TOE is in Appendix
                            B. </note>
                        <aactivity>
                            <htm:h4>TSS</htm:h4>
                            <htm:b>Requirement met by the TOE</htm:b>
                            <htm:br/> The evaluator shall examine the TSS to ensure there is a
                            high-level description of how the FEK is protected. <htm:br/> The evaluator
                            shall examine the TSS to ensure there is a description of how the FEK is
                            protected. The evaluator shall examine the TSS to ensure that it
                            describes all temporary files/resources created or memory used during
                            the decryption/encryption process and when those files/resources or
                            memory is no longer needed. The TSS shall describe how the TSF or TOE
                            platform deletes the non-volatile memory (for example, files) and
                            volatile memory locations after the TSF is done with its
                            decryption/encryption operation. <htm:h4>Guidance</htm:h4> None. <htm:h4>Tests</htm:h4>
                            This test only applies for application provided functionality. <htm:br/> 1.
                            Using a file editor, create and save a text file that is encrypted per
                            the evaluation configured encryption policy. The contents of the file
                            will be limited to a known text pattern to ensure that the text pattern
                            will be present in all encryption/decryption operations performed by the
                            TOE. <htm:br/> 2. Exit the file editor so that the file (including its known
                            text pattern) has "completed the decryption/encryption operation" and
                            process memory containing the known text pattern is released. <htm:br/> 3.
                            The evaluator will take a dump of volatile memory and search the
                            generated dump for the known pattern. The test fails if the known
                            plaintext pattern is found in the memory dump. <htm:br/> 4. Open the file
                            again with a file editor. <htm:br/> 5. The evaluator will take a dump of
                            volatile memory and search the generated dump for the known text
                            pattern. Note that the known text pattern is expected to be present
                            since the file editor has the file open. The test fails if the known
                            plaintext pattern is not found in the memory dump. <htm:br/> 6. Close the
                            file and exit the file editor. <htm:br/> 7. The evaluator will take a dump
                            of volatile memory and search the retrieved dump for the known pattern.
                            The test fails if the known plaintext pattern is found in the memory
                            dump. <htm:br/>
                        </aactivity>
                    </f-element>
                </f-component>
            </subsection>
        </section>
    </chapter>

    <!-- 
       Do NOT put SFRs in this section. All SFR belong up above in SFR section. 
       To make an SFR optional tag it above as status="optional" 
    -->
    <appendix id="optional" title="Optional Requirements"> As indicated in the introduction to this
        EP, the baseline requirements (those that must be performed by the TOE or its underlying
        platform) are contained in the body of this EP. Additionally, there are three other types of
        requirements specified in Appendices B, C, and D. <htm:br/> The first type (in this Appendix)
        are optional requirements that can be included in the ST, but do not have to be in order for
        a TOE to claim conformance to this EP. The second type (in Appendix C) are requirements
        based on selections in the body of the EP: if certain selections are made, then additional
        requirements in that appendix will need to be included. The third type (in Appendix D) are
        components that are not required in order to conform to this PP, but will be included in the
        baseline requirements in future versions of this EP, so adoption by File Encryption Product
        vendors is encouraged. Note that the ST author is responsible for ensuring that requirements
        that may be associated with those in Appendix B, Appendix C, and/or Appendix D but are not
        listed (e.g., FMT-type requirements) are also included in the ST. 
    </appendix>

    <!-- 
       Do NOT put SFRs in this section. All SFR belong up above in SFR section. 
       To make an SFR optional tag it above as status="sel-based" 
    -->
    <appendix id="sel-based" title="Selection Based Requirements">As indicated in the introduction to this
        EP, the baseline requirements (those that must be performed by the TOE) are contained in the
        body of this EP. There are additional requirements based on selections in the body of the
        EP: if certain selections are made, then additional requirements below will need to be
        included. 
    </appendix>

     <!-- 
       Do NOT put SFRs in this section. All SFR belong up above in SFR section. 
       To make an SFR optional tag it above as status="objective" 
     -->
    <appendix id="objective" title="Objective Requirements"> As indicated in the introduction to this
        EP, the baseline requirements (those that must be performed by the TOE) are contained in the
        body of this EP. There are additional requirements that specify security functionality that
        is desirable and these requirements are contained in this Appendix. It is expected that
        these requirements will transition from objective requirements to baseline requirements in
        future versions of this EP. <htm:br/> These requirements may be included in the ST and the TOE
        will still be able to claim conformance to this EP.
        <htm:br/> There are no objective requirements at this time.
    </appendix>

    <appendix id="biblio" title="References">
        <bibliography>
            <entry id="bibCC">
                <tag>CC</tag>
                <description>Common Criteria for Information Technology Security Evaluation - <htm:ul>
                        <htm:li><htm:a
                                href="http://www.commoncriteriaportal.org/files/ccfiles/CCPART1V3.1R4.pdf"
                                >Part 1: Introduction and General Model</htm:a>, CCMB-2012-09-001,
                            Version 3.1 Revision 4, September 2012.</htm:li>
                        <htm:li><htm:a
                                href="http://www.commoncriteriaportal.org/files/ccfiles/CCPART2V3.1R4.pdf"
                                >Part 2: Security Functional Components</htm:a>, CCMB-2012-09-002,
                            Version 3.1 Revision 4, September 2012.</htm:li>
                        <htm:li><htm:a
                                href="http://www.commoncriteriaportal.org/files/ccfiles/CCPART3V3.1R4.pdf"
                                >Part 3: Security Assurance Components</htm:a>, CCMB-2012-09-003,
                            Version 3.1 Revision 4, September 2012.</htm:li>
                    </htm:ul></description>
            </entry>
            <entry id="bibAppPP">
                <tag>AppPP</tag>
                <description>
                    <htm:a href="https://www.niap-ccevs.org/pp/">Protection Profile for Application
                        Software</htm:a>
                </description>
            </entry>
            <entry id="bibMDF">
                <tag>MDF PP</tag>
                <description>
                    <htm:a href="https://www.niap-ccevs.org/pp/">Protection Profile for Mobile Device Fundamentals</htm:a>
                </description>
            </entry>
            
            <entry id="FIPS140">
                <tag>FIPS140-2</tag>
                <description> Federal Information Processing Standard Publication (FIPS-PUB) 140-2,
                    Security Requirements for Cryptographic Modules, National Institute of Standards
                    and Technology, March 19, 2007 </description>
            </entry>
            <entry id="FIPS180">
                <tag>FIPS180-4</tag>
                <description> Federal Information Processing Standards Publication (FIPS-PUB) 180-4,
                    Secure Hash Standard, March, 2012 </description>
            </entry>
            <entry id="FIPS186">
                <tag>FIPS186-4</tag>
                <description> Federal Information Processing Standard Publication (FIPS-PUB) 186-4,
                    Digital Signature Standard (DSS), National Institute of Standards and
                    Technology, July 2013 </description>
            </entry>
            <entry id="FIPS197">
                <tag>FIPS197</tag>
                <description>Federal Information Processing Standards Publication (FIPS-PUB) 197,
                    Specification for the Advanced Encryption Standard (AES), November 26, 2001
                </description>
            </entry>
            <entry id="FIPS198">
                <tag>FIPS198-1</tag>
                <description>Federal Information Processing Standards Publication (FIPS-PUB) 198-1,
                    The Keyed-Hash Message Authentication Code (HMAC), July 2008 </description>
            </entry>
            <entry id="NIST80038A">
                <tag>NIST800-38A</tag>
                <description>NIST Special Publication 800-38A, Recommendation for Block Cipher Modes
                    of Operation: Methods and Techniques, 2001 Edition </description>
            </entry>
            <entry id="NIST80056A">
                <tag>NIST800-56A</tag>
                <description>NIST Special Publication 800-56A, Recommendation for Pair-Wise Key
                    Establishment Schemes Using Discrete Logarithm Cryptography (Revised), March
                    2007 </description>
            </entry>
            <entry id="NIST80056B">
                <tag>NIST800-56B</tag>
                <description>NIST Special Publication 800-56B, Recommendation for Pair-Wise Key
                    Establishment Schemes Using Integer Factorization Cryptography, August 2009
                </description>
            </entry>
            <entry id="NIST80090">
                <tag>NIST800-90</tag>
                <description>NIST Special Publication 800-90, Recommendation for Random Number
                    Generation Using Deterministic Random Bit Generators (Revised), March 2007
                </description>
            </entry>
            <entry id="NIST800132">
                <tag>NIST800-132</tag>
                <description>NIST Special Publication 800-132, Recommendation for Password-Based Key
                    Derivation, December 2010 </description>
            </entry>
            <entry id="NIST80038F">
                <tag>NIST800-38F</tag>
                <description>NIST Special Publication 800-38F,Recommendation for Block Cipher Modes
                    of Operation: Methods for Key Wrapping, December 2012 </description>
            </entry>
            
        </bibliography>
    </appendix>
    
    <appendix id="acronyms" title="Acronyms">
        <acronyms>
            <entry>
                <term>AES</term>
                <description>Advanced Encryption Standard</description>
            </entry>
            <entry>
                <term>CC</term>
                <description>Common Criteria</description>
            </entry>
            <entry>
                <term>CM</term>
                <description/>
            </entry>
            <entry>
                <term>FAK</term>
                <description>File Authentication Key</description>
            </entry>
            <entry>
                <term>FEK</term>
                <description>File Encryption Key</description>
            </entry>
            <entry>
                <term>DRBG</term>
                <description>Deterministic Random Bit Generator</description>
            </entry>
            <entry>
                <term>EAL</term>
                <description>Evaluation Assurance Level</description>
            </entry>
            <entry>
                <term>ECC</term>
                <description>Elliptic Curve Cryptography</description>
            </entry>
            <entry>
                <term>ECC CDH</term>
                <description>Elliptic Curve Cryptography Cofactor Diffie-Hellman (see NIST SP
                    800-56A rev 2, section 6.2.2.2)</description>
            </entry>
            <entry>
                <term>EP</term>
                <description>Extended Package</description>
            </entry>
            <entry>
                <term>FIPS</term>
                <description>Federal Information Processing Standards</description>
            </entry>
            <entry>
                <term>ISSE</term>
                <description>Information System Security Engineers</description>
            </entry>
            <entry>
                <term>IT</term>
                <description>Information Technology</description>
            </entry>
            <entry>
                <term>KDF</term>
                <description>Key Derivation Function</description>
            </entry>
            <entry>
                <term>KEK</term>
                <description>Key Encryption Key</description>
            </entry>
            <entry>
                <term>PBKDF</term>
                <description>Password-Based Key Derivation Function</description>
            </entry>
            <entry>
                <term>PIN</term>
                <description>Personnel Identification Number</description>
            </entry>
            <entry>
                <term>PKI</term>
                <description>Public Key Infrastructure</description>
            </entry>
            <entry>
                <term>PP</term>
                <description>Protection Profile</description>
            </entry>
            <entry>
                <term>PUB</term>
                <description>Publication</description>
            </entry>
            <entry>
                <term>RBG</term>
                <description>Random Bit Generator </description>
            </entry>
            <entry>
                <term>SAR</term>
                <description>Security Assurance Requirement</description>
            </entry>
            <entry>
                <term>SF</term>
                <description>Security Function</description>
            </entry>
            <entry>
                <term>SFR</term>
                <description>Security Functional Requirement</description>
            </entry>
            <entry>
                <term>ST</term>
                <description>Security Target</description>
            </entry>
            <entry>
                <term>TOE</term>
                <description>Target of Evaluation</description>
            </entry>
            <entry>
                <term>TSF</term>
                <description>TOE Security Functionality</description>
            </entry>
            <entry>
                <term>TSFI</term>
                <description>TSF Interface</description>
            </entry>
            <entry>
                <term>TSS</term>
                <description>TOE Summary Specification </description>
            </entry>
        </acronyms>
    </appendix>

</PP>
